//IUTOOLS JOB (FB3),'ARCTOOLS',CLASS=A,MSGCLASS=H,                      JOB01632
//       NOTIFY=&SYSUID,REGION=0M,TIME=1440                                     
//*      TYPRUN=HOLD                                                            
//HSMSTEP1 EXEC PGM=IEBGENER                                                    
//*                                                                             
//********************************************************************          
//* THESE ARE THE SAMPLE PROGRAMS FOR DFSMSHSM.  THIS JOB            *          
//* CREATES A PDS NAMED HSM.SAMPLE.TOOL CONTAINING THE FOLLOWING     *          
//* PROGRAMS:                                                        *          
//*                                                                  *          
//* DCOLREXX - SAMPLE REXX EXEC TO SCAN DFHSM DCOLLECT DATA          *          
//*            (ORIGINALLY IN ARCUTILP MAPPING MACRO COMMENT AREA)   *          
//* SPLITCDS - ALLOCATES DATA SETS NECESSARY TO ANALYZE THE      @01C*          
//*            MCDS/BCDS AND INVOKES SPLITER TO DO THE ANALYSIS  @01C*          
//* SPLITER  - SAMPLE REXX EXEC FOR KEYRANGES TO SPLIT MCDS/BCDS     *          
//*                                                             1@03D*          
//* PREMERGE - SAMPLE JCL TO ASSIST IN PLANNING OF A CDS MERGE   @05A*          
//* HALTER   - REXX PROGRAM TO ALTER THE MANAGEMENT CLASS AND    @02A*          
//*            STORAGE CLASS OF A MIGRATED DATA SET.             @02A*          
//* GENMASK  - REXX PROGRAM TO CONVERT A LIST OF DATA SET MASKS  @ZJA*          
//*            TO AN ASSEMBLER SUBPROGRAM THAT CAN BE INCLUDED   @ZJA*          
//*            IN DATASET-RELATED INSTALLATION EXITS.            @ZJA*          
//* QUERYSET - REXX PROGRAM TO ISSUE QUERY SETSYS FROM EXTENDED  @ZJA*          
//*            CONSOLE WITH CART SUPPORT.  RESULTS ARE RETURNED  @ZJA*          
//*            IN VARIABLES THAT CAN THEN BE PROCESSED.          @ZJA*          
//* SCANBLOG - REXX PROGRAM TO SCAN A WEEK OF BACKUP ACTIVITY    @ZJA*          
//*            LOGS AND PROVIDE SUMMARY RESULTS                  @ZJA*          
//* SCANMLOG - REXX PROGRAM TO SCAN A WEEK OF MIGRATION ACTIVITY @ZJA*          
//*            LOGS AND PROVIDE SUMMARY RESULTS                  @ZJA*          
//* SCANFSR  - REXX PROGRAM TO SCAN FSR DATA IN SMF AND PROVIDE  @ZJA*          
//*            SUMMARY RESULTS                                   @ZJA*          
//* FSRSTAT  - REXX PROGRAM TO SCAN FSR DATA IN SMF AND PROVIDE  @06A*          
//*            STATISTICAL RESULTS                               @06A*          
//* FINDKRDS - SAMPLE REXX EXEC THAT WILL READ THE MCDS AND      @08A*          
//*            IDENTIFY ALL MIGRATED VSAM KEYRANGE DATA SETS.    @08A*          
//* BCDSKEYR - SAMPLE JCL TO IDENTIFY VSAM KEY RANGE DATA SETS   @09A*          
//*            THAT WERE BACKED UP USING HSM AS THE DATA MOVER.  @09A*          
//*                                                                  *          
//* THE FOLLOWING REXX EXECS ARE PART OF THE ABARS UTILITIES         *          
//* PACKAGE.                                                     @04A*          
//*                                                                  *          
//* ABARPOST - DRIVER EXEC FOR ABARPOST FUNCTION                 @04A*          
//* ARAUDIT  - CALL DR10 TO SETUP GLOBAL PARAMETERS              @04A*          
//* ARECPROC - DRIVER EXEC FOR ARECPROC FUNCTION                 @04A*          
//* ARECSNGL - PROVIDES SINGLE DATA SET RESTORE FUNCTION         @04A*          
//* DRAUDIT  - CREATES AUDIT SUMMARY REPORT                      @04A*          
//* DRBACKUP - DRIVER EXEC FOR DRBACKUP FUNCTION                 @04A*          
//* DRSCAN   - DRIVER EXEC FOR DRSCAN FUNCTION                   @04A*          
//* DRSEO    - SIMILAR TO DRSCAN BUT LISTS CANDIDATE FOR EXCLUDE @04A*          
//* DR10     - ABARS UTILITIES GLOBAL VARIABLES                  @04A*          
//* DR11     - PERFORMS EDITS ON PARMS PASSED TO DRBACKUP        @04A*          
//* DR12     - READS DCOLLECT DATA FOR AGGREGATE STRUCTURE       @04A*          
//* DR13     - COPIES INPUT DATA SET TO SELECTION DATA SET       @04A*          
//* DR14     - GET ACTIVITY LOG NAME FOR AGGREGATE               @04A*          
//* DR14AM   - DR14 WHEN USING AUTOMATE FUNCTION                 @04A*          
//* DR14NV   - DR14 WHEN USING NETVIEW FUNCTION                  @04A*          
//* DR15     - CREATE REVISED INPUT                              @04A*          
//* DR151    - CALLED BY DR15                                    @04A*          
//* DR152    - CALLED BY DR15                                    @04A*          
//* DR16     - PREVENTS ABACKUP FROM ATTEMPTING EXECUTION        @04A*          
//* DR21     - PARSES THE ABARS ACTIVITY LOG                     @04A*          
//* DR211    - CALLED BY DR21                                    @04A*          
//* DR22     - WRITES REPORT TO LOG DDNAME                       @04A*          
//* DR31     - READ, PARSE, CREATE, AND EXECUTE ARECOVER CMD     @04A*          
//* DR32     - READS THE ARECOVER LOG AND TRACKS ARECOVERS       @04A*          
//* DR41     - CREATES AUDIT DETAIL REPORT                       @04A*          
//* DR51     - READ ACTIVITY LOG AND LIST DATA SET INFORMATION   @04A*          
//* DR61     - REPORT OF DATASET LOCATION FOR AGGREGATE          @04A*          
//* DR70     - ARECSNGL PARMS VALIDATION                         @04A*          
//* DR71     - SETUP RESTART DATASET FOR AGGREGATE RESTORE       @04A*          
//* DR711    - DFSMS/HSM PREFIX                                  @04A*          
//* DR72     - CREATE ARECOVER COMMAND FOR RESTART               @04A*          
//*                                                                  *          
//* FOLLOWING ARE FIELDS IDENTIFIED THAT MUST BE CHANGED TO EXECUTE  *          
//* THIS BATCH JOB:                                              @01C*          
//*                                                                  *          
//* ?JOBPARM  - JOB CARD WITH APPROPRIATE INFORMATION FOR YOUR       *          
//*             INSTALLATION.                                    @01C*          
//********************************************************************          
//* $42=OW04515,120,042194,THP5: NEW MEMBER: HALTER              @42A*          
//* $03=OW06826,120,091494,THP6: REMOVE SPLITDOC (SUPPLEMENTAL       *          
//*                              DOCUMENTATION FOR SPLIT MCDS/BCDS). *          
//*                                                              @03A*          
//* $04=OW15346,130,083095,THB7: ADD ABARS UTILITIES AND FIX         *          
//*                              PROBLEM IN SPLITTER                 *          
//* $WI=HSMWI,140,082096,THP5: HALTER UPDATED TO USE IDCAMS      @WIA*          
//*                            ALTER STORCLAS MGMTCLAS DIRECTLY  @WIA*          
//* $RI=HSMRI,140,090296,THWG: CHANGE FORMAT OF SPLITCDS OUTPUT  @RIA*          
//* $ZJ-HSMZJ,150,100598,THP5: ADD NEW EXECS                     @ZJA*          
//* $05=OW37110,140,052099,THLC: ADD PREMERGE JOB                @05A*          
//* $06=OW38584,160,052199,THP5: INCREASE SPLITCDS TEMP TO 6552  @06A*          
//*                              LRECL (6544+8 RDW)              @06A*          
//* $07=OW41372,150,112999,THP6: APAR OW41372, SPLIITER EXEC CHANGE  *          
//*                              TO CORRECT PROBLEM ASSOCIATED WITH  *          
//*                              CHANGING CDS KEY RANGES OR NUMBER   *          
//*                              OF CLUSTERS IN CDS'S.           @07A*          
//* $ZL=HSMZL,130,061901,THGS: K170713 - UPDATE COMMENTS.        @ZLA*          
//* $08=OW49809,160,060501,THA5: FIND MIGRATED VSAM KEYRANGE     @08A*          
//*                              DATASETS WITH FINDKRDS.         @08A*          
//* $09=OW57104,130,011402,THP6: APAR OW57104, FIX BUG IN KEYRNGID   *          
//*                              EXEC REGARDING DATA MOVER CHECK.    *          
//*                              ALSO, ADDED NEW MEMBER BCDSKEYR.    *          
//*                              IT IS CAN BE USED TO INDICATE VSAM  *          
//*                              KEY RANGE DATA SETS THAT WERE BACKED*          
//*                              UP BY HSM.                      @09A*          
//* $FQ=HSMFQ,190,072606,THI9-16: FSR IMPROVEMENTS               @FQA*          
//* $ZR=HSMZR,1A0,021507,THI9-15: K1A0324, UPDATE COMMENTS       @ZRA*          
//* $ZR=HSMZR,1A0,092807,THMV:    K1A1549 SPLITER EXEC           @ZRA*          
//* $ZR=HSMZR,1A0,101507,THMV:    K1A1619, UPDATE COMMENTS       @ZRA*          
//* $FV=HSMFV,D10,090810,THMB:    KFI0650 MESSAGE UPDATE         @FVA*          
//* $EY=HSMEY,230,022516,THJC:    ACCESS METHOD ENCRYPTION       @EYA*          
//* $FY=HSMFY,230,012317,THJC: ZFS ENHANCEMENTS                  @FYA*/         
//* $EX=OA52810,230,100917,THAM:  ENCRYPTION INFO IN CDS RECORDS @EXA*          
//* $SZ=HSMSZ,240,091418,THAM: SPLITER TOOL ENHANCEMENT          @SZA*          
//*                            RTC 240571                        @SZA*          
//* $10=OA54965,240,122017,THI9-6: VSAMDB SUPPORT                @10A*          
//* $C8=OA59466,240,040120,THL9: TCT COMPRESSION SUPPORT         @C8A*          
//********************************************************************          
//*                                                                             
//SYSPRINT DD SYSOUT=*                                                          
//SYSUT2   DD UNIT=SYSDA,                                                       
//            DSN=HSM.SAMPLE.TOOL(DCOLREXX),                                    
//            DISP=(NEW,CATLG),                                                 
//            DCB=(RECFM=FB,LRECL=80),                                          
//            SPACE=(CYL,(3,1,20))                                              
//SYSIN    DD DUMMY                                                             
//SYSUT1   DD DATA,DLM='$$'                                                     
        /***********************************************************/           
        /* HERE IS AN EXAMPLE TSO/E REXX EXEC THAT READS RECORDS   */           
        /* PRODUCED BY DCOLLECT AND CREATES A SIMPLE REPORT.       */           
        /*                                                         */           
        /* THERE ARE MANY MEANS OF PROCESSING THIS DATA, REXX IS   */           
        /* JUST ONE OF THEM.                                       */           
        /*                                                         */           
        /* FOR MORE EXAMPLES OF REPORTS THAT CAN BE CREATED FROM   */           
        /* THESE RECORDS, SEE THE FOLLOWING PUBLICATIONS:          */           
        /*                                                         */           
        /* DFSMS ACCESS METHOD SERVICES FOR CATALOGS (SC26 - 7326) */           
        /*                                                     @ZLC*/           
        /*                                                         */           
        /* NOTE: THE REXX LANGUAGE IS A GENERAL-USE PROGRAMMING    */           
        /*       INTERFACE.                                        */           
        /***********************************************************/           
                                                                                
        /***********************************************************/           
        /* OPEN THE INPUT FILE (CONTAINING DCOLLECT RECORDS)       */           
        /***********************************************************/           
         INNAME = "TC37378.NOV17.DATA"                                          
         "ALLOC F(INFILE) DA("INNAME") SHR"                                     
         IF RC^= 0 THEN DO                                                      
            SAY  'ALLOCATION OF ('INNAME') FAILED'                              
            EXIT 8                                                              
            END                                                                 
                                                                                
        /***********************************************************/           
        /* OPEN THE OUTPUT FILE (CONTAINING YOUR REPORT)           */           
        /***********************************************************/           
         OUTNAME = "TC37378.NOV17.REPORT"                                       
         "ALLOC F(OUTFILE) DA("OUTNAME")"                                       
         IF RC^= 0 THEN DO                                                      
            SAY  'ALLOCATION OF ('OUTNAME') FAILED'                             
            EXIT 12                                                             
            END                                                                 
                                                                                
        /***********************************************************/           
        /* PROCESS EACH RECORD UNTIL END-OF-FILE REACHED           */           
        /***********************************************************/           
         EOF = 'NO'                                                             
         DO WHILE EOF='NO'                                                      
           "EXECIO 1 DISKR INFILE"                                              
           IF RC^= 0 THEN                                                       
              EOF = 'YES'                                                       
           ELSE DO                                                              
              PARSE PULL RECORD                                                 
        /***********************************************************/           
        /* DETERMINE THE RECORD TYPE (M,B,C,T)                     */           
        /***********************************************************/           
              DCURCTYP=SUBSTR(RECORD,5,2)                                       
                 SELECT                                                         
        /***********************************************************/           
        /* PROCESS MIGRATED DATA SET INFORMATION RECORD            */           
        /***********************************************************/           
                 WHEN(DCURCTYP='M ') THEN DO                                    
                                     CALL UMRECORD                              
                                     CALL DISPLAYUM                             
                                     END                                        
        /***********************************************************/           
        /* PROCESS BACKUP VERSION INFORMATION RECORD               */           
        /***********************************************************/           
                 WHEN(DCURCTYP='B ') THEN DO                                    
                                     CALL UBRECORD                              
                                     CALL DISPLAYUB                             
                                     END                                        
        /***********************************************************/           
        /* PROCESS DASD CAPACITY PLANNING RECORD                   */           
        /***********************************************************/           
                 WHEN(DCURCTYP='C ') THEN DO                                    
                                     CALL UCRECORD                              
                                     CALL DISPLAYUC                             
                                     END                                        
        /***********************************************************/           
        /* PROCESS TAPE CAPACITY PLANNING RECORD                   */           
        /***********************************************************/           
                 WHEN(DCURCTYP='T ') THEN DO                                    
                                     CALL UTRECORD                              
                                     CALL DISPLAYUT                             
                                     END                                        
        /***********************************************************/           
        /* DO NOT PROCESS OTHER RECORD TYPES                       */           
        /***********************************************************/           
                 OTHERWISE SAY "UNKNOWN RECORD TYPE="DCURCTYP                   
                 END                                                            
              END                                                               
         END                                                                    
         "FREEALL"                                                              
         EXIT                                                                   
        /***********************************************************/           
        /* PROCESS MIGRATED DATA SET INFORMATION RECORD -          */           
        /*   CONVERT THE RECORD INTO INDIVIDUAL FIELD VARIABLES.   */           
        /***********************************************************/           
         UMRECORD:                                                              
               UMDSNAM = SUBSTR(RECORD,25,44)                                   
               UMFLAG1 = BITSTR(SUBSTR(RECORD,69,1))                            
               UMLEVEL = SUBSTR(UMFLAG1,1,2)                                    
               UMCHIND = SUBSTR(UMFLAG1,3,1)                                    
               UMSDSP = SUBSTR(UMFLAG1,4,1)                 /* @EYA*/           
               UMDEVCL = SUBSTR(RECORD,70,1)                                    
               UMDSORG = C2X(SUBSTR(RECORD,71,2))                               
               UMDSIZE = C2D(SUBSTR(RECORD,73,4))                               
               UMTIME  = C2X(SUBSTR(RECORD,77,4))                               
               UMDATE = C2X(SUBSTR(RECORD,81,4))                                
               UMDATCL = SUBSTR(RECORD,87,30)                                   
               UMSTGCL = SUBSTR(RECORD,119,30)                                  
               UMMGTCL = SUBSTR(RECORD,151,30)                                  
               UMRECRD = C2X(SUBSTR(RECORD,181,1))                              
               UMRECOR = C2X(SUBSTR(RECORD,182,1))                              
               UMBKLNG = C2D(SUBSTR(RECORD,183,2))                              
               UMFLAG2 = BITSTR(SUBSTR(RECORD,185,1))                           
               UMRACFD = SUBSTR(UMFLAG2,1,1)                                    
               UMGDS   = SUBSTR(UMFLAG2,2,1)                                    
               UMREBLK = SUBSTR(UMFLAG2,3,1)                                    
               UMPDSE  = SUBSTR(UMFLAG2,4,1)                                    
               UMSMSM  = SUBSTR(UMFLAG2,5,1)                                    
               UMCOMPR  = SUBSTR(UMFLAG2,6,1)               /* @EYA*/           
               UMLFS  = SUBSTR(UMFLAG2,7,1)                 /* @EYA*/           
               UMENCRP  = SUBSTR(UMFLAG2,8,1)               /* @EYA*/           
               UMPDSEV = C2D(SUBSTR(RECORD,186,1))          /* @EYA*/           
               UMNMIG  = C2D(SUBSTR(RECORD,187,2))                              
               UMALLSP = C2D(SUBSTR(RECORD,189,4))                              
               UMUSESP = C2D(SUBSTR(RECORD,193,4))                              
               UMRECSP = C2D(SUBSTR(RECORD,197,4))                              
               UMCREDT = C2X(SUBSTR(RECORD,201,4))                              
               UMEXPDT = C2X(SUBSTR(RECORD,205,4))                              
               UMLBKDT = C2X(SUBSTR(RECORD,209,8))                              
               UMLRFDT = C2X(SUBSTR(RECORD,217,4))                              
               UM_USER_DATASIZE = C2D(SUBSTR(RECORD,221,4)) /* @EYA*/           
               UM_COMP_DATASIZE = C2D(SUBSTR(RECORD,225,4)) /* @EYA*/           
               UMFRVOL = SUBSTR(RECORD,229,6)               /* @EYA*/           
               UMLRECL  = C2X(SUBSTR(RECORD,235,4))         /* @EYA*/           
               UMFLAG3  = BITSTR(SUBSTR(RECORD,239,1))      /* @EYA*/           
               UMEMPTY = SUBSTR(UMFLAG3,1,1)                /* @EYA*/           
               UM_CA_RECLAIM_ELIG = SUBSTR(UMFLAG3,2,1)     /* @EYA*/           
               UMZFS = SUBSTR(UMFLAG3,3,1)                  /* @FYA*/           
               UMENCRDP = SUBSTR(UMFLAG3,4,1)               /* @EXA*/           
               UM_BSON = SUBSTR(UMFLAG3,5,1)                /* @10A*/           
               UM_JSON = SUBSTR(UMFLAG3,6,1)                /* @10A*/           
               UM_CLD_COMP = SUBSTR(UMFLAG3,7,1)            /* @C8A*/           
               UM_CLD_ENCRYPT = SUBSTR(UMFLAG3,8,1)         /* @C8A*/           
               UMFLAG4   = BITSTR(SUBSTR(RECORD,240,1))     /* @EYA*/           
               UMALLSP_FMB =  SUBSTR(UMFLAG4,1,1)           /* @EYA*/           
               UMUSESP_FMB = SUBSTR(UMFLAG4,2,1)            /* @EYA*/           
               UMRECSP_FMB = SUBSTR(UMFLAG4,3,1)            /* @EYA*/           
               UMDSIZE_FMB = SUBSTR(UMFLAG4,4,1)            /* @EYA*/           
               UM_FMB = SUBSTR(UMFLAG4,5,1)                 /* @EYA*/           
               UM_CLD_COMP_PERCENT=C2D(SUBSTR(RECORD,321,1)) /*                 
                                                               @C8A*/           
               UMENCRPT = C2X(SUBSTR(RECORD,353,2))         /* @EXA*/           
               UMENCRPL = SUBSTR(RECORD,355,64)             /* @EXA*/           
               UMENCRPR = SUBSTR(RECORD,419,30)             /* @EXA*/           
         RETURN                                                                 
        /***********************************************************/           
        /* PROCESS MIGRATED DATA SET INFORMATION RECORD -          */           
        /*   WRITE THE FORMATTED FIELDS TO YOUR REPORT             */           
        /***********************************************************/           
         DISPLAYUM:                                                             
         PUSH "M:DSN="UMDSNAM "MIGLEVEL="UMLEVEL "CHANGED="UMCHIND              
         "EXECIO 1  DISKW OUTFILE"                                              
         RETURN                                                                 
        /***********************************************************/           
        /* PROCESS BACKUP VERSION INFORMATION RECORD               */           
        /*   CONVERT THE RECORD INTO INDIVIDUAL FIELD VARIABLES.   */           
        /***********************************************************/           
         UBRECORD:                                                              
               UBDSNAM = SUBSTR(RECORD,25,44)                                   
               UBFLAG1 = BITSTR(SUBSTR(RECORD,69,1))                            
               UBINCAT = SUBSTR(UBFLAG1,1,1)                /* @EYA*/           
               UBNOENQ = SUBSTR(UBFLAG1,2,1)                /* @EYA*/           
               UBBWO = SUBSTR(UBFLAG1,3,1)                  /* @EYA*/           
               UBNQN1 = SUBSTR(UBFLAG1,4,1)                 /* @EYA*/           
               UBNQN2 = SUBSTR(UBFLAG1,5,1)                 /* @EYA*/           
               UBDEVCL = SUBSTR(RECORD,70,1)                                    
               UBDSORG = C2X(SUBSTR(RECORD,71,2))                               
               UBDSIZE = C2D(SUBSTR(RECORD,73,4))                               
               UBTIME  = C2X(SUBSTR(RECORD,77,4))                               
               UBDATE = C2X(SUBSTR(RECORD,81,4))                                
               UBDATCL = SUBSTR(RECORD,87,30)                                   
               UBSTGCL = SUBSTR(RECORD,119,30)                                  
               UBMGTCL = SUBSTR(RECORD,151,30)                                  
               UBRECRD = C2X(SUBSTR(RECORD,181,1))                              
               UBRECOR = C2X(SUBSTR(RECORD,182,1))                              
               UBBKLNG = C2D(SUBSTR(RECORD,183,2))                              
               UBFLAG2 = BITSTR(SUBSTR(RECORD,185,1))                           
               UBRACFD = SUBSTR(UBFLAG2,1,1)                                    
               UBGDS   = SUBSTR(UBFLAG2,2,1)                                    
               UBREBLK = SUBSTR(UBFLAG2,3,1)                                    
               UBPDSE  = SUBSTR(UBFLAG2,4,1)                                    
               UBSMSM  = SUBSTR(UBFLAG2,5,1)                                    
               UBCOMPR = SUBSTR(UBFLAG2,6,1)                /* @EYA*/           
               UBLFS = SUBSTR(UBFLAG2,7,1)                  /* @EYA*/           
               UBNEWNAME = SUBSTR(UBFLAG2,8,1)              /* @EYA*/           
               UBFLAG3 = BITSTR(SUBSTR(RECORD,186,1))       /* @EYA*/           
               UBNOSPHERE = SUBSTR(UBFLAG3,1,1)             /* @EYA*/           
               UBGVCN = SUBSTR(UBFLAG3,2,1)                 /* @EYA*/           
               UBF_RETAIN_SPCD = SUBSTR(UBFLAG3,3,1)        /* @EYA*/           
               UBF_NEVER_EXP = SUBSTR(UBFLAG3,4,1)          /* @EYA*/           
               UBENCRP = SUBSTR(UBFLAG3,5,1)                /* @EYA*/           
               UBZFS = SUBSTR(UBFLAG3,6,1)                  /* @FYA*/           
               UBENCRDP = SUBSTR(UBFLAG3,7,1)               /* @EXA*/           
               UB_RETAINDAYS = C2D(SUBSTR(RECORD,187,2))    /* @EYA*/           
               UBALLSP = C2D(SUBSTR(RECORD,189,4))                              
               UBUSESP = C2D(SUBSTR(RECORD,193,4))                              
               UBRECSP = C2D(SUBSTR(RECORD,197,4))                              
               UB_USER_DATASIZE = C2D(SUBSTR(RECORD,201,4)) /* @EYA*/           
               UB_COMP_DATASIZE = C2D(SUBSTR(RECORD,205,4)) /* @EYA*/           
               UBFRVOL = SUBSTR(RECORD,209,6)               /* @EYA*/           
               UBFLAG4   = BITSTR(SUBSTR(RECORD,215,1))     /* @EYA*/           
               UBALLSP_FMB =  SUBSTR(UMFLAG4,1,1)           /* @EYA*/           
               UBUSESP_FMB = SUBSTR(UMFLAG4,2,1)            /* @EYA*/           
               UBRECSP_FMB = SUBSTR(UMFLAG4,3,1)            /* @EYA*/           
               UBDSIZE_FMB = SUBSTR(UMFLAG4,4,1)            /* @EYA*/           
               UB_FMB = SUBSTR(UMFLAG4,5,1)                 /* @EYA*/           
               UB_BSON = SUBSTR(UBFLAG4,6,1)                /* @10A*/           
               UB_JSON = SUBSTR(UBFLAG4,7,1)                /* @10A*/           
               UBPDSEV = C2D(SUBSTR(RECORD,216,1))          /* @EYA*/           
               UBENCRPT = C2X(SUBSTR(RECORD,229,2))         /* @EXA*/           
               UBENCRPL = SUBSTR(RECORD,231,64)             /* @EXA*/           
               UBENCRPR = SUBSTR(RECORD,295,30)             /* @EXA*/           
         RETURN                                                                 
        /***********************************************************/           
        /* PROCESS BACKUP VERSION INFORMATION RECORD               */           
        /*   WRITE THE FORMATTED FIELDS TO YOUR REPORT             */           
        /***********************************************************/           
         DISPLAYUB:                                                             
         PUSH "B:DSN="UBDSNAM "SMS MGMTCLASS="UBMGTCL                           
         "EXECIO  1 DISKW OUTFILE"                                              
         RETURN                                                                 
        /***********************************************************/           
        /* PROCESS DASD CAPACITY PLANNING RECORD                   */           
        /*   CONVERT THE RECORD INTO INDIVIDUAL FIELD VARIABLES.   */           
        /***********************************************************/           
         UCRECORD:                                                              
               UCVOLSR = SUBSTR(RECORD,25,6)                                    
               UCCOLDT = C2X(SUBSTR(RECORD,31,4))                               
               UCFLAG1 = BITSTR(SUBSTR(RECORD,35,1))                            
               UCLEVEL = SUBSTR(UCFLAG1,1,2)                                    
               UCTOTAL = C2D(SUBSTR(RECORD,37,4))                               
               UCTGOCC = C2D(SUBSTR(RECORD,41,1))                               
               UCTROCC = C2D(SUBSTR(RECORD,42,1))                               
               UCBFOCC = C2D(SUBSTR(RECORD,43,1))                               
               UCAFOCC = C2D(SUBSTR(RECORD,44,1))                               
               UCNOMIG = C2D(SUBSTR(RECORD,45,1))                               
               UCNINTV = C2D(SUBSTR(RECORD,46,1))                               
               UCINTVM = C2D(SUBSTR(RECORD,47,1))                               
         RETURN                                                                 
         DISPLAYUC:                                                             
         PUSH "C:VOLSER="UCVOLSR "MIGLEVEL="UCLEVEL "DATE="UCCOLDT              
         "EXECIO  1 DISKW OUTFILE"                                              
         RETURN                                                                 
        /***********************************************************/           
        /* PROCESS TAPE CAPACITY PLANNING RECORD                   */           
        /*   CONVERT THE RECORD INTO INDIVIDUAL FIELD VARIABLES.   */           
        /***********************************************************/           
         UTRECORD:                                                              
               UTSTYPE = SUBSTR(RECORD,25,1)                                    
               UTFULL  = C2D(SUBSTR(RECORD,29,4))                               
               UTPART  = C2D(SUBSTR(RECORD,33,4))                               
               UTEMPTY = C2D(SUBSTR(RECORD,37,4))                               
         RETURN                                                                 
        /***********************************************************/           
        /* PROCESS TAPE CAPACITY PLANNING RECORD                   */           
        /*   WRITE THE FORMATTED FIELDS TO YOUR REPORT             */           
        /***********************************************************/           
         DISPLAYUT:                                                             
         PUSH "T:TAPE VOLUME TYPE="UTSTYPE UTFULL UTPART UTEMPTY                
         "EXECIO  1 DISKW OUTFILE"                                              
         RETURN                                                                 
        /***********************************************************/           
        /* CONVERT THE HEX VALUE TO INDIVIDUAL 1'S AND 0'S         */           
        /* EACH BYTE WILL TAKE UP 8 CHARACTER POSITIONS            */           
        /***********************************************************/           
         BITSTR:                                                                
           IF BIT.F ^= "1111"  THEN DO                                          
              BIT.0="0000"; BIT.1="0001"; BIT.2="0010"; BIT.3="0011"            
              BIT.4="0100"; BIT.5="0101"; BIT.6="0110"; BIT.7="0111"            
              BIT.8="1000"; BIT.9="1001"; BIT.A="1010"; BIT.B="1011"            
              BIT.C="1100"; BIT.D="1101"; BIT.E="1110"; BIT.F="1111"            
           END                                                                  
           CH=C2X(ARG(1))                                                       
           BS=''                                                                
           DO I=1 TO LENGTH(CH)                                                 
              Q=SUBSTR(CH,I,1)                                                  
              BS=BS||BIT.Q                                                      
           END                                                                  
        RETURN BS                                                               
$$                                                                              
//HSMSTEP2 EXEC PGM=IEBUPDTE,PARM=NEW                                           
//SYSPRINT DD SYSOUT=*                                                          
//SYSUT2   DD DSN=HSM.SAMPLE.TOOL,                                              
//            DISP=OLD                                                          
//SYSIN    DD DATA,DLM='$$'                                                     
./ ADD NAME=SPLITER                                                             
/* REXX - SPLITER                                    */                         
/*********************************************************************/         
/* THIS REXX EXEC WILL REPRO A NUMBER OF RECORDS FROM THE SPECIFIED  */         
/* CONTROL DATA SET (CDSNAME) INTO A TEMPORARY FILE.  THEN READ THE  */         
/* RECORDS FROM THE TEMPORARY FILE INTO STORAGE.  THE MCDS OR BCDS   */         
/* RECORD IMAGES ARE THEN ANALYZED TO DETERMINE SUGGESTED 2-WAY,     */         
/* 3-WAY OR 4-WAY SPLITS FOR THE CONTROL DATA SET AND DISPLAYS       */         
/* THESE RESULTS TO FILE SYSTSPRT.  ALL RECORDS IN THE SPECIFIED     */         
/* CONTROL DATA SET ARE ANALYZED BEFORE THE RESULTS ARE DISPLAYED.   */         
/*                                                                   */         
/* NOTE: THE REXX LANGUAGE IS A GENERAL-USE PROGRAMMING INTERFACE.   */         
/*                                                               @01C*/         
/*                                                               @06C*/         
/*********************************************************************/         
NUMERIC DIGITS 12                                                               
IO=1000      /* NUMBER OF RECORDS PER I/O REQUEST TO READ */                    
LINE.=0         /*                                    @01A*/                    
SIZE.=0         /*                                    @01A*/                    
TOTAL_SIZE=0    /* TOTAL SIZE OF INPUT FILE IN BYTES      */                    
REC_COUNT=0     /* TOTAL NUMBER OF RECORDS IN INPUT FILE  */                    
M=1; AVG=500    /* INITIAL ANALYSIS GROUP# AVERAGE SIZE   */                    
X00=X2C('00')   /* KEYS FROM X'00' - X'1F' ARE IN MCDS        @ZRA */           
X20=X2C('20')   /* KEYS FROM X'20' - X'31' ARE IN BCDS        @ZRA */           
X32=X2C('32')   /* KEYS FROM X'32' - X'3F' ARE IN OCDS        @ZRA */           
X3F=X2C('3F')   /* KEYS OVER X'3F' ARE MCA, MCD, MCB, OR MCC  @ZRC */           
MCA=X2C('11'); MCD=X2C('00')  /* MCHTYPE OF MCA AND MCD   */                    
MCB=X2C('20'); MCC=X2C('24')  /* MCHTYPE OF MCB AND MCC   */                    
MCA_COUNT = 0; MCD_COUNT=0    /* NUMBER OF MCA AND MCD'S  */                    
MCB_COUNT = 0; MCC_COUNT=0    /* NUMBER OF MCC AND MCB'S  @06A*/                
FROMKEY=0; CDS_TYPE_DETERMINED=0  /* INIT FIELDS            @ZRA*/              
MCDS_FLAG=0; BCDS_FLAG=0      /* INIT CDS FLAGS             @ZRA*/              
OCDS_FLAG=0; STOP=0           /* INIT CDS FLAG & STOP FLAG  @ZRA*/              
EOF_REC=('Z9999999999999999999999999999999999999999999') /* @ZRA*/              
LIMIT1=24; LIMIT2=2*LIMIT1   /* NUMBER OF ANALYSIS GROUPS */                    
START=1                       /* START NUMBER OF THE FIRST RECORD               
                                 TO PROCESS EACH LOOP.           @SZA*/         
DO N=1 TO LIMIT2                                                                
   SIZE.N=0; LOWKEY.N=''; CUMPERCENT.N=100                                      
END                                                                             
  /*****************************************************/                       
CALL READ_LINES                                              /* @01C*/          
DO WHILE LINE.0 > 0                                                             
   DO N=START TO LINE.0 WHILE STOP=0   /* DYNAMIC START NUMBER   @SZC*/         
      IF OCDS_FLAG = 0 THEN  /* NOT OCDS DATA SET                @ZRA*/         
       CALL PROCESS_LINE     /* PROCESS EACH RECORD */                          
      ELSE                   /*                                  @ZRA*/         
       STOP=1                /* STOP PROCESSING.  THIS IS OCDS   @ZRA*/         
      END                                                                       
   IF N < IO | STOP = 1 THEN  /* IF ALL RECORDS READ OR NEED TO                 
                                 STOP PROCESSING                 @ZRC*/         
     LINE.0 = 0             /* WE'RE DONE                        @RIA*/         
   ELSE DO                  /* MORE RECORDS TO READ              @SZC*/         
     START = 2              /* NEXT LOOP START ON 2ND RECORD     @SZA*/         
     CALL READ_LINES                                          /* @01C*/         
    END                     /* END MORE RECORDS TO READ          @SZA*/         
   END                                                                          
  IF OCDS_FLAG = 0 THEN     /* NOT OCDS                          @ZRA*/         
   CALL DISPLAY_RESULTS  /* SHOW APPROPRIATE RANGES */                          
  EXIT 0                                                                        
  /*****************************************************/                       
  READ_LINES:                                                                   
    /****************************************************************/          
    /* REPRO 1000 MORE RECORDS TO THE TEMPORARY FILE, THEN READ THEM*/          
    /* INTO VIRTUAL STORAGE FOR PROCESSING. INSTEAD OF ADJUSTING    */          
    /* THE FROMKEY TO THE 1000X+1 RECORD FOR THE NEXT READ OF 1000  */          
    /* RECORDS, PUT IT ON THE LAST RECORD READ IN (I.E. 1000TH REC).*/          
    /* THIS GUARANTEES THAT THE NEXT REPRO COMMAND WILL NOT FAIL,   */          
    /* BUT WILL READ AT LEAST 1 RECORD (I.E. THE LAST RECORD FROM   */          
    /* THE LAST READ). THE MAIN PROCESSING LOOP WILL USE THE 'START'*/          
    /* VARIABLE TO SKIP PAST THE FIRST RECORD OF 1000 BECAUSE IT WAS*/          
    /* PROCESSED DURING THE PREVIOUS LOOP. THE VERY FIRST READ IS A */          
    /* CORNER CASE AND IS HANDLED APPROPRIATELY BY PROCESSING FROM  */          
    /* THE VERY FIRST RECORD.                                   @SZC*/          
    /****************************************************************/          
    X = OUTTRAP(ON.)                                                            
    "REPRO INFILE(INDATA) OUTFILE(ATEMP) COUNT("IO")",                          
           "FROMKEY(X'"FROMKEY"')"                                              
    X = OUTTRAP('OFF')                                                          
     IF RC > 4 THEN DO                       /* RC=4 IS OKAY    @RIA*/          
        SAY  'REPRO OF CDS FAILED WITH RC='RC                /* @RIA*/          
        DO N=1 TO ON.0; SAY ON.N; END                                           
        EXIT 8                                               /* @RIA*/          
        END                                                  /* @RIA*/          
     "EXECIO * DISKR ATEMP ( STEM  LINE."    /* TMPFILE TO VIRT @01A*/          
     MM=LINE.0                                               /* @04C*/          
     IF MM>0 THEN DO                         /* GET NEW FROMKEY @04C*/          
        FROMKEY = C2X(LEFT(LINE.MM,44))      /* FOR NEXT REPRO. @04C*/          
        LAST = X2D(RIGHT(FROMKEY,2))         /* SAVE LAST KEY   @SZC*/          
        FROMKEY = LEFT(FROMKEY,86)||D2X(LAST)                /* @01A*/          
        IF START>1 & MM=1 THEN               /* DONE PROCESSING?@SZA*/          
          LINE.0 = 0                         /* YES, PROPAGATE  @SZA*/          
        END                                  /* END NEW FROMKEY @01A*/          
    "EXECIO 0 DISKR ATEMP ( FINIS"           /* CLOSE TEMPFILE  @01A*/          
    RETURN                                   /* END READ_LINES  @01A*/          
PROCESS_LINE:                                                                   
     BYTES =LENGTH(LINE.N)  /* LENGTH OF RECORD IN BYTES */                     
     KEY=LEFT(LINE.N,44)    /* KEY OF RECORD */                                 
     MCKT=LEFT(KEY,1)          /* MCKTYPE FIELD */                              
     MCHT=SUBSTR(LINE.N,47,1)  /* MCHTYPE FIELD */                              
                                                                                
     IF CDS_TYPE_DETERMINED=0 THEN DO /* CDS TYPE NOT DETERMINED@ZRA*/          
       IF MCHT>=X00 & MCHT<X20 & KEY^=EOF_REC THEN /* MCDS TYPE @ZRA*/          
          MCDS_FLAG = 1                        /* SET MCDS FLAG @ZRA*/          
       ELSE                                    /*               @ZRA*/          
       IF MCHT>=X20 & MCHT<X32 THEN            /* BCDS TYPE     @ZRA*/          
          BCDS_FLAG = 1                        /* SET BCDS FLAG @ZRA*/          
       ELSE                                    /*               @ZRA*/          
       IF MCHT>=X32 & MCHT<=X3F THEN           /* OCDS TYPE     @ZRA*/          
          OCDS_FLAG = 1                        /* SET OCDS FLAG @ZRA*/          
       CDS_TYPE_DETERMINED=1             /* CDS TYPE DETERMINED @ZRA*/          
     END                                 /* END DO              @ZRA*/          
                                                                                
     IF OCDS_FLAG = 1 THEN            /* PROCESSING OCDS        @ZRA*/          
        SAY "OCDS NOT ELIGIBLE FOR PROCESSING WITH SPLITER" /*  @ZRA*/          
     ELSE                            /* PROCESSING MCDS OR BCDS @ZRA*/          
     IF MCKT>X3F | MCKT=MCHT THEN DO /* VALID HSM KEY */                        
        TOTAL_SIZE = TOTAL_SIZE + BYTES                                         
        REC_COUNT = REC_COUNT + 1                                               
        IF MCHT=MCA THEN MCA_COUNT=MCA_COUNT + 1          /* @06A*/             
        IF MCHT=MCB THEN MCB_COUNT=MCB_COUNT + 1          /* @06A*/             
        IF MCHT=MCC THEN MCC_COUNT=MCC_COUNT + 1          /* @06A*/             
        /* DON'T INCREMENT THE MCD COUNT IF THIS IS AN                          
           EOF RECORD.  THE EOF RECORD ALWAYS APPEARS TO                        
           BE AN MCD RECORD NO MATTER WHICH CDS IS BEING                        
           PROCESSED.                                             @ZRA*/        
        IF MCHT=MCD & KEY^=EOF_REC THEN MCD_COUNT=MCD_COUNT + 1 /*@ZRC*/        
        HIGH_KEY = KEY                                                          
        IF SIZE.M=0          /* FOR NEW GROUP, */                               
           THEN LOWKEY.M=KEY /* INITIALIZE LOW KEY */                           
                                                                                
        SIZE.M=SIZE.M+BYTES                                                     
        IF SIZE.M>=AVG THEN DO /* GROUP FILLED        */                        
           IF M<LIMIT2 THEN M=M+1 /* START NEW GROUP  */                        
           ELSE DO               /* NO MORE GROUPS    */                        
                DO J=1 TO LIMIT1 /* MERGE EXISTING GROUPS */                    
                   J2= 2*J; J1=J2-1                                             
                   SIZE.J = SIZE.J1+ SIZE.J2                                    
                   LOWKEY.J = LOWKEY.J1                                         
                   END           /* MERGE EXISTING GROUPS */                    
                DO J=LIMIT1+1 TO LIMIT2 /* CLEAR END */                         
                   SIZE.J = 0                                                   
                   LOWKEY.J = ''                                                
                   END              /* CLEAR GROUPS    */                       
                M = LIMIT1+1                                                    
                CALL AVERAGE  /* DETERMINE NEW AVERAGE */                       
                END         /* NO MORE GROUPS          */                       
           END           /* GROUP FILLED               */                       
     END                 /* VALID HSM KEY              */                       
     RETURN                                                                     
  /*****************************************************/                       
  /*  DETERMINE NEW RUNNING AVERAGE FOR ALL GROUPS     */                       
  /*****************************************************/                       
AVERAGE:                                                                        
     AVREC = TOTAL_SIZE/REC_COUNT                                               
     SUM=0; DO J=1 TO LIMIT1; SUM=SUM+SIZE.J;  END                              
     AVG = SUM/LIMIT1 - AVREC/2                                                 
     RETURN                                                                     
   /*****************************************************/                      
 DISPLAY_RESULTS:                                                               
   CUM = 0                                                                      
   SAY " GROUP  CUM %     STARTING KEY"                                         
   SAY " =====  =====     ============"                                         
   DO J=1 TO LIMIT2 /* DISPLAY RESULTS */                                       
      IF LOWKEY.J<' ' THEN KEY="X'"C2X(LEFT(LOWKEY.J,21))"'"                    
                     ELSE KEY= LOWKEY.J                                         
         IF SIZE.J > 0 THEN DO                                                  
            CUM = CUM + SIZE.J                                                  
            CUMPERCENT.J = FORMAT(100*CUM/TOTAL_SIZE,5,2)                       
            SAY FORMAT(J,5) FORMAT(CUMPERCENT.J,5,1)'   'KEY                    
            END                                                                 
         END        /* DISPLAY RESULTS */                                       
      SAY "HIGHEST KEY FOUND: " HIGH_KEY                                        
  IF REC_COUNT=1 & HIGH_KEY=EOF_REC THEN   /* PRIMER REC ONLY   @ZRA*/          
   SAY " "                                 /*                   @ZRA*/          
  ELSE DO                                  /*                   @ZRA*/          
  P25=1; P33=1; P50=1; P67=1; P75=1                                             
  DO J=1 TO LIMIT2 /* DETERMINE RANGES */                                       
    J2 = J+1                                                                    
    IF CUMPERCENT.J<=50 & CUMPERCENT.J2>50 THEN P50=J                           
    IF CUMPERCENT.J<=33 & CUMPERCENT.J2>33 THEN P33=J                           
    IF CUMPERCENT.J<=67 & CUMPERCENT.J2>67 THEN P67=J                           
    IF CUMPERCENT.J<=25 & CUMPERCENT.J2>25 THEN P25=J                           
    IF CUMPERCENT.J<=75 & CUMPERCENT.J2>75 THEN P75=J                           
    END           /* DETERMINE RANGES */                                        
   /*****************************************************/                      
   /*  DISPLAY SUGGESTED RANGES BASED ON SIZE           */                      
   /*****************************************************/                      
 SAY " "                                                                        
 SAY "TWO-WAY SPLIT: "                                                          
    SAY "   FROMKEY( X'00' ) TOKEY( "RANGE(TO,P50)" )"         /*@RIC*/         
    SAY "   FROMKEY( "RANGE(FROM,P50)" ) TOKEY( X'FF' )"       /*@RIC*/         
 SAY " "                                                                        
 SAY "THREE-WAY SPLIT: "                                                        
    SAY "   FROMKEY( X'00' ) TOKEY( "RANGE(TO,P33)" )"         /*@RIC*/         
    SAY "   FROMKEY( "RANGE(FROM,P33)" ) TOKEY( "RANGE(TO,P67)" )"              
                                                               /*@RIC*/         
    SAY "   FROMKEY( "RANGE(FROM,P67)" ) TOKEY( X'FF' )"       /*@RIC*/         
 SAY " "                                                                        
 SAY "FOUR-WAY SPLIT:"                                                          
    SAY "   FROMKEY( X'00' ) TOKEY( "RANGE(TO,P25)" )"         /*@RIC*/         
    SAY "   FROMKEY( "RANGE(FROM,P25)" ) TOKEY( "RANGE(TO,P50)" )"              
                                                               /*@RIC*/         
    SAY "   FROMKEY( "RANGE(FROM,P50)" ) TOKEY( "RANGE(TO,P75)" )"              
                                                               /*@RIC*/         
    SAY "   FROMKEY( "RANGE(FROM,P75)" ) TOKEY( X'FF' )"       /*@RIC*/         
 SAY " "                                                                        
 END                                             /*              @ZRA*/         
     AVREC = TOTAL_SIZE % REC_COUNT                                             
 SAY "AVERAGE RECORD SIZE IN BYTES ..... " FORMAT(AVREC,11)                     
 SAY "TOTAL NUMBER OF RECORDS .......... " FORMAT(REC_COUNT,11)                 
 IF MCB_COUNT > 0 | MCC_COUNT > 0 | BCDS_FLAG = 1 THEN DO    /* @ZRC*/          
 SAY "      NUMBER OF MCB RECORDS....... " FORMAT(MCB_COUNT,11)                 
 SAY "      NUMBER OF MCC RECORDS....... " FORMAT(MCC_COUNT,11)                 
 END                                                         /* @06A*/          
 ELSE                                                        /* @ZRC*/          
 IF MCA_COUNT > 0 | MCD_COUNT > 0 | MCDS_FLAG = 1 THEN DO    /* @ZRA*/          
 SAY "      NUMBER OF MCA RECORDS....... " FORMAT(MCA_COUNT,11)                 
 SAY "      NUMBER OF MCD RECORDS....... " FORMAT(MCD_COUNT,11)                 
 END                                                         /* @06A*/          
 ELSE                                                        /* @ZRA*/          
 IF REC_COUNT=1 & HIGH_KEY=EOF_REC THEN    /* PRIMER REC ONLY   @ZRA*/          
 SAY "CDS IS EMPTY EXCEPT FOR PRIMER RECORD"                 /* @ZRA*/          
 RETURN                                                                         
   /*****************************************************/                      
 RANGE:   PROCEDURE EXPOSE LOWKEY.                                              
      J=ARG(2); J2=J+1                                                          
      X1=LOWKEY.J; X2=LOWKEY.J2; K=0                                            
      DO N=1 TO LENGTH(LOWKEY.J)                                                
         IF SUBSTR(X1,N,1)^=SUBSTR(X2,N,1) & K=0 THEN K=N                       
         END                                                                    
      IF ARG(1)=TO   THEN KEYVALUE=LEFT(X1,K)                                   
      IF ARG(1)=FROM THEN DO                                                    
         Q=SUBSTR(X1,K,1);  Q2=D2C(C2D(Q)+1)                                    
         KEYVALUE=LEFT(X1,K-1)||Q2                                              
         END                                                                    
       /* SINCE ALPHANUMERIC CHARACTERS ARE NOT CONTIGUOUS                      
          IN THE EBCDIC CODING SEQUENCE, WE CHECK TO SEE IF                     
          ANY CHARACTERS IN THE KEY REQUIRE HEX NOTATION        @06A*/          
       HEXREQ = NO                                           /* @06A*/          
       STANDARDKEYS ='.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' /* @06A*/          
       DO N=1 TO LENGTH(KEYVALUE)                            /* @06A*/          
          IF POS(SUBSTR(KEYVALUE,N,1),STANDARDKEYS)=0 THEN , /* @06A*/          
             HEXREQ = YES                                    /* @06A*/          
       END                                                   /* @06A*/          
       IF HEXREQ =YES THEN KEYVALUE ="X'"C2X(KEYVALUE)"'"    /* @06C*/          
       RETURN KEYVALUE                                                          
./ ADD NAME=SPLITCDS                                                            
//SPLITCDS JOB ?JOBPARM                                                         
//*                                                                             
//********************************************************************          
//*  THIS IS A SAMPLE JOB TO DETERMINE APPROPRIATE KEYRANGES         *          
//*  IF YOU DESIRE TO SPLIT YOUR MCDS OR BCDS INTO 2, 3 OR 4         *          
//*  RANGES.                                                         *          
//*                                                                  *          
//* FOLLOWING ARE FIELDS IDENTIFIED THAT MUST BE CHANGED TO EXECUTE  *          
//* THIS BATCH JOB:                                              @01A*          
//*                                                                  *          
//* ?JOBPARM  - JOB CARD WITH APPROPRIATE INFORMATION FOR YOUR       *          
//*             INSTALLATION.                                    @01A*          
//*                                                                  *          
//* ?CDSNAME  - NAME OF THE CONTROL DATA SET THAT YOU WANT TO        *          
//*             PROCESS.                                         @01C*          
//*                                                                  *          
//*                                                             1@03D*          
//********************************************************************          
//*                                                                             
//************************************************************                  
//*  STEP N-- CONVERT EXPORT COPY TO RECFM=VB SO THAT IT                        
//*           CAN BE READ BY TSO/E REXX.  THIS STEP HAS BEEN                    
//*           DELETED                                     @ZRC                  
//************************************************************                  
//STEP1   EXEC PGM=IKJEFT01                                                     
//************************************************************                  
//*  STEP 1 -- ALLOCATE THE SPECIFIED CONTROL DATA SET AND                      
//*            INVOKE SPLITER ROUTINE TO DETERMINE RECOMMENDED                  
//*            KEYRANGES FOR EACH CDS PORTION.            @01C                  
//*                                                                             
//*           SPLITER - REXX EXEC ... HSM.SAMPLE.TOOL(SPLITER)                  
//*                                                                             
//*           RESULTS WRITTEN TO SYSTSPRT DD CARD.                              
//*                                                                             
//*  THE ATEMP FILE HOLDS 1000 CDS RECORDS, AND WILL BE 3-9      @06A*          
//*  CYLINDERS IN SIZE, DEPENDING ON THE RECORD SIZES. THE       @06A*          
//*  LRECL 6552 HANDLES THE LARGEST RECORD POSSIBLE IN HSM.      @06A*          
//*                                                                             
//* OW02581 CHANGED THE FOLLOWING INDATA AND ATEMP DD CARDS @01C                
//**************************************************************                
//INDATA    DD DSN=?CDSNAME,DISP=SHR                                            
//ATEMP     DD DSNAME=&&ATEMP,DISP=(NEW,PASS),DSORG=PS,                         
//             LRECL=6552,RECFM=VB,SPACE=(CYL,(3,1)),                           
//             UNIT=SYSDA                                                       
//SYSTSPRT  DD SYSOUT=*                                                         
//SYSEXEC   DD DSN=HSM.SAMPLE.TOOL,DISP=SHR                                     
//SYSTSIN   DD *                                                                
  SPLITER                                                                       
/*                                                                              
./ ADD NAME=KEYRNGID                                                            
/* REXX - KEYRNGID                                    @08A*/                    
/*************************************************************** @08A*/         
/* THIS REXX EXEC WILL REPRO A NUMBER OF RECORDS FROM THE MCDS INTO  */         
/* A TEMPORARY FILE.  THEN READ THE RECORDS FROM THE TEMPORARY FILE  */         
/* INTO STORAGE.  THE MCDS RECORD IMAGES ARE ANALYZED TO IDENTIFY    */         
/* MIGRATED VSAM KEYRANGE DATASETS. THE VSAM KEYRANGE DATASETS       */         
/* ARE IDENTIFIED BY DATASET NAME AND ASSOCIATED DATAMOVER IN THE    */         
/* RESULTS. THE RESULTS ARE OUTPUT TO FILE SYSTSPRT.  ALL RECORDS    */         
/* IN THE MCDS ARE ANALYZED BEFORE THE RESULTS ARE DISPLAYED.        */         
/*                                                                   */         
/* NOTE: THE REXX LANGUAGE IS A GENERAL-USE PROGRAMMING INTERFACE.   */         
/*                                                               @ZRC*/         
/*********************************************************************/         
IO=1000      /* NUMBER OF RECORDS PER I/O REQUEST TO READ */                    
LINE.=0         /*                                        */                    
X3F=X2C('3F')   /* KEYS OVER X'3F' ARE MCD OR MCA         */                    
MCA=X2C('11'); MCD=X2C('00')  /* MCHTYPE OF MCA AND MCD   */                    
MCA_COUNT = 0; MCD_COUNT=0    /* NUMBER OF MCA AND MCD'S  */                    
FRMKEY=0; HEADER_DONE=0                                                         
                                                                                
CALL READ_LINES                                                                 
DO WHILE LINE.0 > 0                                                             
   DO N=1 TO LINE.0                                                             
      CALL PROCESS_LINE     /* PROCESS EACH RECORD */                           
      END                                                                       
   IF N < IO THEN           /* IF ALL THE RECORDS WERE READ      */             
     LINE.0 = 0             /* WE'RE DONE                        */             
   ELSE                     /* MORE RECORDS TO READ              */             
     CALL READ_LINES                                                            
   END                                                                          
   IF HEADER_DONE > 0 THEN                                                      
  SAY '========================================================='               
  EXIT 0                                                                        
  /*****************************************************/                       
  READ_LINES:                                                                   
    /****************************************************************/          
    /* REPRO 1000 MORE RECORDS TO THE TEMPORARY FILE, THEN READ THEM*/          
    /* INTO VIRTUAL STORAGE FOR PROCESSING.                         */          
    /****************************************************************/          
    X = OUTTRAP(ON.)                         /* TRAPPING ON         */          
    "REPRO INFILE(INDATA) OUTFILE(ATEMP) COUNT("IO")",                          
           "FROMKEY(X'"FRMKEY"')"                                               
    X = OUTTRAP('OFF')                       /* TRAPPING ON         */          
     IF RC > 4 THEN DO                       /* RC=4 IS OKAY    */              
        SAY  'REPRO OF MCDS FAILED WITH RC='RC                                  
        DO N=1 TO ON.0; SAY ON.N; END        /* ECHO TRAPPED OUTPUT  */         
        EXIT 8                                                                  
        END                                                                     
     "EXECIO * DISKR ATEMP ( STEM  LINE."    /* TMPFILE TO VIRT     */          
     MM=LINE.0                                                                  
     IF MM>0 THEN DO                         /* GET NEW FROMKEY     */          
        FRMKEY = C2X(LEFT(LINE.MM,44))      /* FOR NEXT REPRO.     */           
        LAST = 1+ X2D(RIGHT(FRMKEY,2))                                          
        FRMKEY = LEFT(FRMKEY,86)||D2X(LAST)                                     
        END                                  /* END NEW FROMKEY     */          
    "EXECIO 0 DISKR ATEMP ( FINIS"           /* CLOSE TEMPFILE      */          
    RETURN                                   /* END READ_LINES      */          
PROCESS_LINE:                                                                   
     BYTES =LENGTH(LINE.N)  /* LENGTH OF RECORD IN BYTES */                     
     KEY=LEFT(LINE.N,44)    /* KEY OF RECORD */                                 
     MCKT=LEFT(KEY,1)          /* MCKTYPE FIELD */                              
     MCHT=SUBSTR(LINE.N,47,1)  /* MCHTYPE FIELD */                              
                                                                                
     IF MCKT>X3F THEN DO                     /* VALID HSM MCD KEY */            
        IF MCHT=MCD THEN DO                /* MCD RECORD...           */        
          MCD_COUNT=MCD_COUNT + 1                                               
          DKRBYTE=SUBSTR(LINE.N,398,1)     /* BYTE WITH KEYRANGE BIT */         
          DKRBYT=X2B(C2X(DKRBYTE))         /* TO HEX THEN TO BINARY  */         
          DKEYRG=SUBSTR(DKRBYT,4,1)        /* GET KEYRANGE BIT VALUE */         
          IF DKEYRG > 0 THEN DO            /* IS A KEYRANGE...       */         
           IF HEADER_DONE = 0 THEN         /* HEADER OUTPUT YET?     */         
             CALL DISPLAY_HEADER           /* NO..OUTPUT HEADER      */         
             DDMVBYTE=SUBSTR(LINE.N,135,1) /* BYTE W/DATAMOVER BIT   */         
             DDMVBYT=X2B(C2X(DDMVBYTE))    /* TO HEX THEN TO BINARY  */         
             DDMVBIT=SUBSTR(DDMVBYT,7,1)   /* GET DM BIT VALUE ON=DSS*/         
             IF DDMVBIT = 0 THEN       /* HSM/IDCAMS DATAMOVER   @09C*/         
               SAY KEY '   IDCAMS'                                              
             ELSE                      /* DFSMSDSS IS DATA MOVER @09C*/         
               SAY KEY '   DFSMSDSS'                                            
            END                              /* END - IS A KEYRANGE. */         
        END                                /* END - MCD RECORD        */        
     END                                   /* VALID HSM MCD KEY       */        
     RETURN                                                                     
DISPLAY_HEADER:                                                                 
  HEADER_DONE = 1                                                               
  SAY 'DATASET NAME                                    DATAMOVER'               
  SAY '========================================================='               
  RETURN                                                                        
./ ADD NAME=FINDKRDS                                                            
//FINDKRDS JOB ?JOBPARM                                                         
//*                                                                             
//************************************************************** @08A*          
//*  THIS IS A SAMPLE JOB TO IDENTIFY MIGRATED VSAM KEYRANGE         *          
//*  DATASETS,  OUTPUT THE DATASET NAME TO A FILE AND INDICATE       *          
//*  THE DATAMOVER THAT MIGRATED THE DATASET.                        *          
//*                                                                  *          
//* FOLLOWING ARE FIELDS IDENTIFIED THAT MUST BE CHANGED TO EXECUTE  *          
//* THIS BATCH JOB:                                                  *          
//*                                                                  *          
//* ?JOBPARM  - JOB CARD WITH APPROPRIATE INFORMATION FOR YOUR       *          
//*             INSTALLATION.                                        *          
//*                                                                  *          
//* ?MCDSNAME  - NAME OF THE CONTROL DATA SET (DATA COMPONENT NAME)  *          
//*              THAT YOU WANT TO PROCESS.                           *          
//*                                                                  *          
//* NOTE: IF USING RLS TO SHARE CDSS DEFINED WITH SHAREOPTIONS(3,X), *          
//* DFHSM MUST BE SHUTDOWN ON ALL SHARING HOSTS FOR THE PROGRAM TO   *          
//* EXECUTE SUCCESSFULLY.  IF IT IS INCONVENIENT TO SHUTDOWN DFHSM   *          
//* ON ALL SHARING HOSTS, USE THE CDS BACKUP COPY THAT IS CREATED AT *          
//* AUTOBACKUP OR BACKVOL CDS TIME IN PLACE OF THE ACTIVE MCDS TO    *          
//* SUCCESSFULLY RUN THE PROGRAM.  SIMPLY RESTORE THE MCDS BACKUP    *          
//* COPY TO A NEW NAME AND THEN RUN THE EXEC AGAINST THE RESTORED    *          
//* COPY.                                                            *          
//************************************************************** @08A*          
//*                                                                             
//************************************************************                  
//STEP1   EXEC PGM=IKJEFT01                                                     
//***************************************************************               
//*  STEP 1 -- ALLOCATE THE SPECIFIED MCDS AND INVOKE KEYRNGID                  
//*            ROUTINE TO IDENTIFY ANY VSAM KEYRANGE DATASET THAT               
//*            HAS BEEN MIGRATED.                                               
//*                                                                             
//*           KEYRNGID - REXX EXEC ... HSM.SAMPLE.TOOL(KEYRNGID)                
//*                                                                             
//*           RESULTS WRITTEN TO SYSTSPRT DD CARD.                              
//*                                                                             
//*  THE ATEMP FILE HOLDS 1000 CDS RECORDS, AND WILL BE 3-9                     
//*  CYLINDERS IN SIZE, DEPENDING ON THE RECORD SIZES. THE                      
//*  LRECL 6552 HANDLES THE LARGEST RECORD POSSIBLE IN HSM.                     
//*                                                                             
//****************************************************************              
//INDATA    DD DSN=?MCDSNAME,DISP=SHR                                           
//ATEMP     DD DSNAME=&&ATEMP,DISP=(NEW,PASS),DSORG=PS,                         
//             LRECL=6552,RECFM=VB,SPACE=(CYL,(3,1)),                           
//             UNIT=SYSDA                                                       
//SYSTSPRT  DD SYSOUT=*                                                         
//SYSEXEC   DD DSN=HSM.SAMPLE.TOOL,DISP=SHR                                     
//SYSTSIN   DD *                                                                
  KEYRNGID                                                                      
/*                                                                              
./ ADD NAME=BCDSKEYR                                                            
//BCDSKEYR JOB ?JOBPARM                                                         
//*                                                                             
//************************************************************** @09A*          
//* THIS IS A SAMPLE JOB TO IDENTIFY BACKED UP VSAM KEY RANGE        *          
//* DATASETS THAT WERE BACKED UP USING HSM AS THE DATA MOVER.        *          
//*                                                                  *          
//* FOLLOWING ARE FIELDS IDENTIFIED THAT MUST BE CHANGED TO EXECUTE  *          
//* THIS BATCH JOB:                                                  *          
//*                                                                  *          
//* ?JOBPARM  - JOB CARD WITH APPROPRIATE INFORMATION FOR YOUR       *          
//*             INSTALLATION.                                        *          
//*                                                                  *          
//* ?BCDSNAME - NAME OF THE CONTROL DATA SET (DATA COMPONENT NAME)   *          
//*             THAT YOU WANT TO PROCESS.                            *          
//*                                                                  *          
//* ?BCDSOUT  - NAME OF THE DATA SET THAT WILL CONTAIN THE OUTPUT    *          
//*             OF THIS JOB.                                         *          
//*                                                                  *          
//* NOTE: IF USING RLS TO SHARE CDSS DEFINED WITH SHAREOPTIONS(3,X), *          
//* DFHSM MUST BE SHUTDOWN ON ALL SHARING HOSTS FOR THE PROGRAM TO   *          
//* EXECUTE SUCCESSFULLY.  IF IT IS INCONVENIENT TO SHUTDOWN DFHSM   *          
//* ON ALL SHARING HOSTS, USE THE CDS BACKUP COPY THAT IS CREATED AT *          
//* AUTOBACKUP OR BACKVOL CDS TIME IN PLACE OF THE ACTIVE BCDS TO    *          
//* SUCCESSFULLY RUN THE PROGRAM.  SIMPLY RESTORE THE BCDS BACKUP    *          
//* COPY TO A NEW NAME AND THEN RUN THE EXEC AGAINST THE RESTORED    *          
//* COPY.                                                            *          
//************************************************************** @09A*          
//*                                                                             
//*------------------------------------------------------------------           
//SORT1   EXEC PGM=ICETOOL,REGION=4096K                                         
//*------------------------------------------------------------------           
//TOOLMSG  DD  SYSOUT=*                                                         
//DFSMSG   DD  SYSOUT=*                                                         
//SYSPRINT DD  SYSOUT=*                                                         
//SORKWK01 DD  UNIT=SYSDA,SPACE=(CYL,(10,10))                                   
//SORKWK02 DD  UNIT=SYSDA,SPACE=(CYL,(10,10))                                   
//BCDS     DD  DISP=SHR,DSN=?BCDSNAME                                           
//CMDS     DD  DISP=(NEW,CATLG,DELETE),UNIT=SYSDA,                              
//             DSN=?BCDSOUT,                                                    
//             DCB=(LRECL=500,BLKSIZE=20500,RECFM=VB),                          
//             SPACE=(CYL,(9,9),RLSE)                                           
//*MSGOUT1  DD  SYSOUT=*                                                        
//*SYSOUT   DD  SYSOUT=*                                                        
//TOOLIN    DD *                                                                
   COPY FROM(BCDS) TO(CMDS) USING(CPY1)                                         
/*                                                                              
//CPY1CNTL  DD *                                                                
 OPTION VLSCMP                                                                  
 RECORD TYPE=V                                                                  
 INCLUDE COND=((51,1,BI,EQ,X'24'),AND,(306,1,BI,EQ,B'..1.....'),AND,            
    (156,1,BI,EQ,B'..0.....'))                                                  
/*                                                                              
./ ADD NAME=PREMERGE                                                            
//PREMERGE JOB ?JOBPARM                                                         
//*                                                                             
//*********************************************************************         
//*  THIS IS A SAMPLE JOB THAT MAY ASSIST IN THE PLANNING OF A        *         
//*  CDS MERGE.  THIS JOB WILL COMPARE TWO CDSS AND CREATE A          *         
//*  REPORT THAT WILL LIST THE DUPLICATE KEYS BETWEEN THEM.           *         
//*  THIS JOB WILL NEED TO BE RUN FOR EACH OF THE THREE CDS RECORDS   *         
//*  (MCDSS, BCDSS, AND OCDSS).  THIS JOB COMPARES SINGLE CLUSTER     *         
//*  CDSS, BUT MAY BE MODIFIED TO SUPPORT MORE THAN 2 CDSS BEING      *         
//*  MERGED OR A MULTICLUSTERED CDS ENVIRONMENT.  FOR THIS THE        *         
//*  JOB NEEDS TO BE MODIFIED.  CURRENTLY THERE IS ONLY A SYS1CDS     *         
//*  DD AND A SYS2CDS DD DEFINED.  FOR MULTICLUSTERING OR MORE        *         
//*  THAN 2 CDSS BEING MERGED, DD CARDS WOULD NEED TO BE              *         
//*  ESTABLISHED FOR EACH OF THE CDSS TO BE CONSIDERED.  THEN         *         
//*  COPY COMMANDS WOULD NEED TO BE ADDED TO COPY ALL OF THE          *         
//*  CDSS OR CLUSTERS INTO THE ALLKEYS FILE BEFORE THE SORT IS        *         
//*  DONE. THE REPORT CREATED WILL THEN LIST ALL OF THE DUPLICATE     *         
//*  KEYS BETWEEN THE RECORDS COMPARED.                               *         
//*                                                                   *         
//*  NOTE:  BEFORE MERGING THE CDSES, IT IS RECOMMENDED THAT AUDIT BE *         
//*  RUN AGAINST ALL CDSES TO ENSURE THAT ALL ERRORS ARE CORRECTED.   *         
//*                                                                   *         
//*  THE FIELDS THAT NEED TO BE SPECIFIED FOR THIS JOB ARE AS         *         
//*  FOLLOWS:                                                         *         
//*                                                                   *         
//*  ?CDSNAME1 = FIRST HOST CDS FOR PREMERGE COMPARISON               *         
//*                                                                   *         
//*  ?CDSNAME2 = SECOND HOST CDS FOR PREMERGE COMPARISON              *         
//*                                                                   *         
//*  ?REPORTNAME = OUTPUT DATA SET NAME OF THE REPORT ON THE          *         
//*                DUPLICATE KEYS BETWEEN THE CDSS COMPARED           *         
//*                                                                   *         
//*                                                                   *         
//*                                                                   *         
//*  AFTER THE PREMERGE JOB IS RUN, IF ANY DUPLICATE KEYS             *         
//*  ARE FOUND HANDLE THEM AS FOLLOWS:                                *         
//*                                                                   *         
//*                                                                   *         
//*  MCDS DUPLICATES THAT NEED TO BE CONSIDERED WHEN MERGING A        *         
//*  SECOND HOST'S CDSS INTO A COPY OF A FIRST HOST'S CDSS:           *         
//*                                                                   *         
//*  -(0) MIGRATED DATA SET RECORDS                                   *         
//*  LOCATE IDENTICAL DATA SETS AND DELETE THE MIGRATED DATA          *         
//*  SETS ON THE SECOND HOST BEFORE MERGING THE MCDSS SO THAT         *         
//*  THE MCA RECORDS GET DELETED AND THE MIGRATION SPACE IS           *         
//*  INVALIDATED.                                                     *         
//*                                                                   *         
//*  -(4) MIGRATION VOLUME RECORD                                     *         
//*  IF THERE ARE SMS VOLUMES THAT HAVE THE SAME NAME ON BOTH         *         
//*  SYSTEMS AND THEY ARE SYSTEM PACKS WHERE IT DOES NOT MATTER       *         
//*  WHICH IS KEPT THEN NOTHING SHOULD BE DONE.  IF, HOWEVER,         *         
//*  THEY ARE NOT SYSTEM PACKS THEN THE DATA WILL NEED TO BE          *         
//*  MOVED TO A DIFFERENT L0 DASD, L1 DASD, OR L2 TAPE. TO DEAL       *         
//*  WITH DUPLICATES ON DASD A FREEVOL CAN BE PERFORMED.  WITH        *         
//*  DUPLICATES THAT ARE ON TAPE RECYCLE CAN BE USED.                 *         
//*                                                                   *         
//*  -(10) MCRX MIGRATION CONTROL RECORD                              *         
//*  IF THERE IS A HOST WITH HOSTID OF "X" ON EACH SYSTEM, THEN       *         
//*  A LIST TTOC SELECT(ASSOC) NEEDS TO BE DONE ON THE SECOND         *         
//*  HOST BEFORE MERGING THAT CDS INTO THE FIRST. A DELVOL            *         
//*  UNASSIGN NEEDS TO BE DONE FOR EACH OF THE ML2 TAPES IN THE       *         
//*  LIST. THESE WILL BE AVAILABLE AS UNASSIGNED ML2S IN THE TARGET   *         
//*  SYSTEM.  ALTERNATIVELY THESE COULD BE MARKED FULL.               *         
//*                                                                   *         
//*                                                                   *         
//*  BCDS DUPLICATES THAT NEED TO BE CONSIDERED WHEN MERGING A        *         
//*  SECOND HOST'S CDSS INTO A COPY OF A FIRST HOST'S CDSS.           *         
//*                                                                   *         
//*  -(20) DATA SET BACKUP RECORD                                     *         
//*  IF MULTIPLE DATA SETS OF THE SAME NAME HAVE BACKUP COPIES        *         
//*  THEN THE BACKUP VERSIONS OF ALL THE DUPLICATE MCBS WILL BE       *         
//*  LOST WHEN THE CDSS ARE MERGED.  THE MCCS, HOWEVER, WILL          *         
//*  CONTINUE TO EXIST, SINCE THEY ARE DISCONNECTED FROM THEIR        *         
//*  MCB.  A BDELETE WILL NEED TO BE DONE ON EACH AND EVERY           *         
//*  BACKUP VERSION OF THESE DUPLICATES BEFORE A MERGE IS DONE.       *         
//*  IF THE DATA SETS BOTH NEED TO BE KEPT THEN RENAME THE USER       *         
//*  DATA SET ON THE SECOND SYSTEM BEFORE BDELETEING THE BACKUP       *         
//*  VERSIONS.                                                        *         
//*                                                                   *         
//*  -(22) DUMP CLASS DEFINITION                                      *         
//*  IF THERE IS ONE DUMP CLASS DEFINED ON BOTH SYSTEMS               *         
//*  AND THE DEFINITION IS DIFFERENT, MAKE THE OPTIONS                *         
//*  OF BOTH OCCURRENCES OF THIS CLASS THE SAME OR CHANGE ALL USES ON *         
//*  ONE SYSTEM TO A DIFFERENT CLASS NAME, DEFINE THIS NEW            *         
//*  CLASS, AND THEN DELETE THE ONE IT REPLACES.                      *         
//*                                                                   *         
//*  -(2C) BACKUP VOLUME RECORD                                       *         
//*  IN THE CASE OF BACKUP TAPE DUPLICATES A RECYCLE SHOULD BE        *         
//*  PERFORMED TO MOVE DATA TO NON-DUPLICATE TAPES.                   *         
//*                                                                   *         
//*  -(30) BVR RECORD                                                 *         
//*  THERE MAY BE MANY DUPLICATES  AMONG THE DAILY, SPILL, AND        *         
//*  UNASSIGNED RECORDS.  THESE DUPLICATES CAN BE IGNORED             *         
//*  DURING THE MERGER.                                               *         
//*  AFTER BRINGING UP THE MERGED SYSTEM A FIXCDS                     *         
//*  BVR REFRESH SHOULD BE PERFORMED FOLLOWED BY A CDS BACKUP         *         
//*  BEFORE ANY BACKUP VOLUMES ARE USED.  THE BVR REFRESH WILL        *         
//*  SET ON A FLAG THAT AS THE CDS BACKUP CONCLUDES SUCCESSFULLY      *         
//*  IT WILL BUILD THE NEW FORMAT BVR RECORDS FROM THE MCT            *         
//*  RECORDS OF THE MERGED BCDS AND REMOVE ALL OLD BVR RECORDS        *         
//*                                                                   *         
//*  -(OCDS)                                                          *         
//*  IN THIS CASE DUPLICATES WILL BE ADDRESSED BY THE RECYCLE         *         
//*  COMMAND AS MENTIONED IN THE TYPE 4 AND 2C RECORDS EXPLAINED.     *         
//*                                                                   *         
//****************************************************************@ZRC*         
//SORT1   EXEC PGM=ICETOOL,REGION=4096K                                         
//SYSPRINT DD  SYSOUT=*                                                         
//TOOLMSG  DD  SYSOUT=*                                                         
//DFSMSG   DD  SYSOUT=*                                                         
//SYS1CDS  DD  DISP=SHR,                                                        
//             DSN=?CDSNAME1                                                    
//SYS2CDS  DD  DISP=SHR,                                                        
//             DSN=?CDSNAME2                                                    
//* DD CARDS CAN BE DEFINED FOR OTHER CDSS TO BE                                
//* CONSIDERED FOR THE PREMERGE DUPLICATES                                      
//* REPORT                                                                      
//ALLKEYS  DD  DISP=(MOD,PASS),UNIT=SYSDA,                                      
//             DCB=(LRECL=100,BLKSIZE=0,RECFM=VB),                              
//             SPACE=(CYL,(50,10),RLSE),                                        
//             DSN=&&ALLKEYS                                                    
//SUMKEYS  DD  DISP=(MOD,PASS),UNIT=SYSDA,                                      
//             DCB=(LRECL=100,BLKSIZE=0,RECFM=VB),                              
//             SPACE=(CYL,(50,10),RLSE),                                        
//             DSN=&&SUMKEYS                                                    
//DUPKEYS  DD  DISP=(MOD,PASS),UNIT=SYSDA,                                      
//             DCB=(LRECL=100,BLKSIZE=0,RECFM=VB),                              
//             SPACE=(CYL,(50,10),RLSE),                                        
//             DSN=&&DUPKEYS                                                    
//TEMP     DD  DISP=(NEW,CATLG),UNIT=SYSDA,                                     
//             DSN=&&TEMP1,                                                     
//             DCB=(*.DUPKEYS),                                                 
//             SPACE=(TRK,(1,5),RLSE)                                           
//DISPOUT  DD  DISP=(NEW,CATLG),UNIT=SYSDA,                                     
//             SPACE=(TRK,(1,5),RLSE),                                          
//             DSN=?REPORTNAME                                                  
//MSGOUT1  DD  SYSOUT=*                                                         
//SYSOUT   DD  SYSOUT=*                                                         
//TOOLIN   DD  *                                                                
* COPY THE KEYS FROM THE SYS1 CDS TO THE ALLKEYS FILE                           
   COPY FROM(SYS1CDS) TO(ALLKEYS) USING(ALL1)                                   
* COPY THE KEYS FROM THE SYS2 CDS TO THE ALLKEYS FILE                           
   COPY FROM(SYS2CDS) TO(ALLKEYS) USING(ALL1)                                   
* COPY ALL OTHER INSTANCE OF THIS TYPE CDS INTO ALLKEYS                         
* FOR CONSIDERATION IN THE DUPLICATE KEYS REPORT                                
                                                                                
* SUM THE COUNTER FIELDS ADDED TO THE RECORD KEYS                               
   SORT FROM(ALLKEYS) TO(SUMKEYS) USING(SUM1)                                   
* COPY THE DUPLICATE KEYS                                                       
   COPY FROM(SUMKEYS) TO(DUPKEYS) USING(DUP1)                                   
* PRINTS A REPORT ON DUPLICATE KEYS FOUND, SORTED BY MCHTYPE                    
   SORT FROM(DUPKEYS) TO(TEMP) USING(SRT1)                                      
   DISPLAY FROM(TEMP) LIST(DISPOUT) -                                           
   LINES(999) -                                                                 
   HEADER('MCHTYPE') ON(51,1,HEX) -                                             
   HEADER('KEY') ON(5,44,CH) -                                                  
   BLANK                                                                        
//ALL1CNTL DD *                                                                 
 OUTREC FIELDS=(1,4,5,64,X'0001')                                               
/*                                                                              
//SUM1CNTL DD *                                                                 
 SORT FIELDS=(5,44,BI,A)                                                        
 SUM FIELDS=(69,2,BI)                                                           
/*                                                                              
//DUP1CNTL DD *                                                                 
 INCLUDE COND=(69,2,BI,GT,X'0001')                                              
 OUTREC FIELDS=(1,4,5,64)                                                       
/*                                                                              
//SRT1CNTL DD  *                                                                
 SORT FIELDS=(51,1,BI,A)                                                        
/*                                                                              
./ ADD NAME=HALTER                                                              
/* REXX - HALTER                                             @02A*/             
/****************************************************************               
 THIS PROGRAM MODIFIES THE STORCLAS AND/OR MGMTCLAS OF A MIGRATED               
 DATA SET.  THESE MUST BE 1..8 CHARACTERS IN LENGTH.  THIS PROGRAM              
 INVOKES IDCAMS ALTER DIRECTLY.  THESE CLASSES ARE PASSED TO THE  @WIC          
 ACS ROUTINES DURING RECALL TO INFLUENCE THE FINAL STORCLAS                     
 AND MGMTCLAS.  THIS PROGRAM WILL WORK FOR DATA SETS THAT ARE                   
 MIGRATED OR ON LEVEL 0 DASD.                                     @WIC          
 ****************************************************************               
 TO INVOKE FROM TSO, ISPF 3.4 LINE COMMAND, OR PGM=IKJEFT01:                    
    HALTER MGMTCLAS(XXXX) STORCLAS(YYYY) DSN                                    
    HALTER MC(XXXX) SC(YYYY) DSN                                                
                                                                                
 YOU MAY SPECIFY EITHER MGMTCLAS OR STORCLAS OR BOTH                            
 DATA SET NAME FOLLOWS STANDARD TSO CONVENTIONS, EITHER                         
 SPECIFY FULLY-QUALIFIED NAME IN QUOTES 'SYSPREF.DATA.SET'                      
 OR ALLOW TSO TO PREFIX YOUR DATA SET WITHOUT QUOTES.                           
 ISSUER MUST BE AUTHORIZED TO ALTER THE DATA SETS SPECIFIED.      @WIC          
 ****************************************************************/              
                                                                                
PARSE ARG PARM                                                                  
PARSE UPPER VAR PARM PARMS                                                      
NONE='N/A'; SC=NONE; MC=NONE                                                    
IF POS('STORCLAS(',PARMS)>0 THEN DO                                             
   PARSE VAR PARMS A 'STORCLAS(' SC ')' B                                       
   PARMS = A B                                                                  
   END                                                                          
IF POS('SC(',PARMS)>0 THEN DO                                                   
   PARSE VAR PARMS A 'SC(' SC ')' B                                             
   PARMS = A B                                                                  
   END                                                                          
IF SC ^= NONE THEN DO                                                           
   SC = STRIP(SC)                                                               
   LEN_SC = RIGHT(LENGTH(SC),2,'0')                                             
   IF LEN_SC>='01' & LEN_SC<='08' THEN PROVIDED_SC = Y                          
   ELSE SAY "INVALID LENGTH FOR STORAGE CLASS("SC") ......"PARMS                
   END                                                                          
IF POS('MGMTCLAS(',PARMS)>0 THEN DO                                             
   PARSE VAR PARMS A 'MGMTCLAS(' MC ')' B                                       
   PARMS = A B                                                                  
   END                                                                          
IF POS('MC(',PARMS)>0 THEN DO                                                   
   PARSE VAR PARMS A 'MC(' MC ')' B                                             
   PARMS = A B                                                                  
   END                                                                          
IF MC ^= NONE THEN DO                                                           
   MC = STRIP(MC)                                                               
   LEN_MC = RIGHT(LENGTH(MC),2,'0')                                             
   IF LEN_MC>='01' & LEN_MC<='08' THEN PROVIDED_MC = Y                          
   ELSE SAY "INVALID LENGTH FOR MANAGEMENT CLASS("MC") ......"PARMS             
   PROVIDED_MC = Y                                                              
   END                                                                          
DSN = STRIP(PARMS)                                                              
IDCOPS = ''                                                                     
IF PROVIDED_SC = Y THEN DO                                                      
   IDCOPS = IDCOPS 'STORCLAS('SC')'                       /* @WIC*/             
   END                                                                          
IF PROVIDED_MC = Y THEN DO                                                      
   IDCOPS = IDCOPS 'MGMTCLAS('MC')'                       /* @WIC*/             
   END                                                                          
RC = 0                                                                          
ADDRESS TSO "ALTER "DSN" "IDCOPS                          /* @WIC*/             
EXIT RC                                                                         
./ ADD NAME=ABARPOST                                                            
/*REXX****************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME                                            */         
/*                                                                   */         
/*  OUTPUT: 1) ABARS ACTIVITY LOG                                    */         
/*          2) ARECOVER STATEMENTS                                   */         
/*          3) DSN REPORT WITH DETAIL                                */         
/*                                                                   */         
/*PROPRIETARY V3 STATEMENT                                           */         
/*LICENSED MATERIALS - PROPERTY OF IBM                               */         
/*5650-ZOS                                                           */         
/*COPYRIGHT IBM CORP. 1993,2017                                  @EYC*/         
/*END PROPRIETARY V3 STATEMENT                                       */         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME TUNIT .                                                             
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
LOGRC = 0                                                                       
STAT = MSG('OFF')                                                               
ADDRESS TSO                                                                     
/*********************************************************************/         
/* SETUP CONSTANTS                                                   */         
/*********************************************************************/         
CALL DR10                                                                       
LOGRC = RC                                                                      
PARSE VAR RESULT DCOLDSN ARDSN DETPRE .                                         
ARDSN = "'" || ARDSN || "(" || IAGNAME || ")'"                                  
/*********************************************************************/         
/* LOCATE THE ACTIVITY LOG                                           */         
/*********************************************************************/         
CALL DR14 IAGNAME                                                               
LOGRC = RC                                                                      
LOGDSN = RESULT                                                                 
/*********************************************************************/         
/* ATTEMPT LOG DATASET ALLOCATION AND PARSE                          */         
/*   COPY THE LOG TO SYSOUT, CREATE ARECOVER STATEMENTS AND DSN RPT  */         
/*********************************************************************/         
CALL DR21 IAGNAME TUNIT LOGDSN ARDSN DETPRE                                     
LOGRC = RESULT                                                                  
/*********************************************************************/         
/* WRITE DSNRPT TO LOG DDNAME                                        */         
/*********************************************************************/         
CALL DR22 IAGNAME DETPRE                                                        
LOGRC = RESULT                                                                  
QUIT:                                                                           
EXIT LOGRC                                                                      
./ ADD NAME=ARAUDIT                                                             
/*REXX****************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME                                            */         
/*                                                                   */         
/*  OUTPUT: 1) ABARS ACTIVITY LOG                                    */         
/*          2) ARECOVER STATEMENTS                                   */         
/*          3) DSN REPORT WITH DETAIL                                */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME .                                                                   
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
LOGRC = 0                                                                       
STAT = MSG('OFF')                                                               
ADDRESS TSO                                                                     
/*********************************************************************/         
/* SETUP CONSTANTS                                                   */         
/*********************************************************************/         
CALL DR10                                                                       
PARSE VAR RESULT DCOLDSN ARDSN DETPRE LOGLOG                                    
ARDSN = "'" || ARDSN || "(" || IAGNAME || ")'"                                  
/*********************************************************************/         
/* ALLOCATE THE LOG OF LOGS DATASET AND LOOK TO SEE THE LOGS         */         
/* CREATED AND HOW MANY TIMES THE AGGREGATE HAS BEEN EXECUTED        */         
/** AND **************************************************************/         
/* ALLOCATE THE ARECOVER PARAMETERS DATASET TO READ THE DATASETS     */         
/* AND CHECK FOR THEIR EXISTENCE                                 @ZRC*/         
/*********************************************************************/         
CALL DR41 IAGNAME LOGLOG ARDSN                                                  
LOGRC = RESULT                                                                  
RETURN LOGRC                                                                    
./ ADD NAME=ARECPROC                                                            
/*REXX****************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME                                            */         
/*                                                                   */         
/*  OUTPUT: 1) ABARS ACTIVITY LOG                                    */         
/*          2) ARECOVER STATEMENTS                                   */         
/*          3) DSN REPORT WITH DETAIL                                */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME .                                                                   
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
LOGRC = 0                                                                       
STAT = MSG('OFF')                                                               
ADDRESS TSO                                                                     
/*********************************************************************/         
/* SETUP CONSTANTS                                                   */         
/*********************************************************************/         
CALL DR10                                                                       
PARSE VAR RESULT DCOLDSN ARDSN DETPRE LOGLOG                                    
ARDSN = "'" || ARDSN || "(" || IAGNAME || ")'"                                  
/*********************************************************************/         
/* ALLOCATE THE ARECOVER PARAMETERS DATASET TO EXECUTE THE           */         
/* ARECOVER COMMAND FOR THE AGGREGATE                                */         
/*********************************************************************/         
CALL DR31 IAGNAME ARDSN                                                         
LOGRC = RESULT                                                                  
/*********************************************************************/         
/* LOCATE THE ACTIVITY LOG                                           */         
/*********************************************************************/         
CALL DR14 IAGNAME                                                               
LOGDSN = RESULT                                                                 
/*********************************************************************/         
/* PROCESS THE ACTIVITY LOG                                          */         
/*********************************************************************/         
CALL DR32 IAGNAME LOGDSN LOGLOG                                                 
EXIT LOGRC                                                                      
./ ADD NAME=ARECSNGL                                                            
/*REXX****************************************************************/         
/*  FUNCTION: HANDLE SUBSET RESTORE OF AN AGGREGATE                  */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME                                            */         
/*         INDSN SYSIN                                               */         
/*                                                                   */         
/*  OUTPUT: 1) RESTART DATASET                                       */         
/*          2) ARECOVER COMMAND                                      */         
/*          3) ARECOVER ACTIVITY LOG                                 */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1995,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/* TRACE ?R */                                                                  
/*********************************************************************/         
ARG IAGNAME .                                                                   
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
LOGRC = 0                                                                       
STAT = MSG('OFF')                                                               
ADDRESS TSO                                                                     
/*********************************************************************/         
/* SETUP CONSTANTS                                                   */         
/*********************************************************************/         
CALL DR10                                                                       
PARSE VAR RESULT DCOLDSN ARDSN THLQ LOGLOG                                      
ARDSN = "'" || ARDSN || "(" || IAGNAME || ")'"                                  
/*********************************************************************/         
/* PARSE THE PARAMETERS SUPPLIED FOR ACCURACY                        */         
/*********************************************************************/         
CALL DR70 IAGNAME ARDSN                                                         
LOGRC = RESULT                                                                  
/*********************************************************************/         
/* SET UP THE RESTART DATASET                                        */         
/*********************************************************************/         
CALL DR71 IAGNAME ARDSN THLQ                                                    
/*********************************************************************/         
/* ALLOCATE THE ARECOVER PARAMETERS DATASET TO EXECUTE THE           */         
/* ARECOVER COMMAND FOR THE AGGREGATE                                */         
/*********************************************************************/         
CALL DR72 IAGNAME ARDSN                                                         
LOGRC = RESULT                                                                  
/*********************************************************************/         
/* LOCATE THE ACTIVITY LOG                                           */         
/*********************************************************************/         
CALL DR14 IAGNAME                                                               
LOGDSN=RESULT                                                                   
/*********************************************************************/         
/* PROCESS THE ACTIVITY LOG                                          */         
/*********************************************************************/         
CALL DR32 IAGNAME LOGDSN LOGLOG                                                 
EXIT LOGRC                                                                      
/*REXX****************************************************************/         
DRAUDIT:                                                                        
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME (S) IN INPUT DATASET                       */         
/*                                                                   */         
/* OUTPUT: AUDIT REPORT OF AGGREGATE (S)                             */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC - NONE                             */         
/*********************************************************************/         
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
ERRORS = 0                                                                      
TDSN = 0                                                                        
TAGG = 0                                                                        
LINES = 58                                                                      
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
"EXECIO 0 DISKR INCNTL (OPEN"                                                   
"EXECIO 0 DISKW AGSUMM (OPEN"                                                   
/*********************************************************************/         
/*   WRITE THE SUMMARY ABARS ACTIVITY LOG                            */         
/*********************************************************************/         
"EXECIO 1 DISKR INCNTL"                                                         
DO WHILE (RC = 0)                                                               
   TAGG = TAGG + 1 /* COUNTING TOTAL AGGREGATES */                              
   IF LINES > 56 THEN                                                           
      CALL RPTHEAD                                                              
   PARSE PULL IAGNAME                                                           
   IAGNAME=STRIP(IAGNAME,B)                                                     
   CALL ARAUDIT IAGNAME                                                         
   PARSE VAR RESULT CDSN EDSN                                                   
   PUSH '   ' LEFT(IAGNAME,8) RIGHT(CDSN,7) RIGHT(EDSN,7)                       
   "EXECIO 1 DISKW AGSUMM"                                                      
   LINES = LINES + 1                                                            
   ERRORS = ERRORS + EDSN                                                       
   TDSN = TDSN + CDSN                                                           
   "EXECIO 1 DISKR INCNTL"                                                      
END                                                                             
PUSH "    -------- ------- -------"                                             
"EXECIO 1 DISKW AGSUMM"                                                         
PUSH '0   AGGREGATES:' LEFT(TAGG,7) ' DATASETS: ' TDSN ,                        
     ' ERRORS: ' ERRORS                                                         
"EXECIO 1 DISKW AGSUMM"                                                         
/************************************************************/                  
"EXECIO 0 DISKR INCNTL (FINIS"                                                  
"EXECIO 0 DISKW AGSUMM (FINIS"                                                  
RETURN 0;                                                                       
RPTHEAD:                                                                        
/*********************************************************************/         
/* WRITE REPORT HEADING                                              */         
/*********************************************************************/         
PUSH "1   ABARS ARECOVER AGGREGATE AUDIT SUMMARY REPORT      " ,                
      "              " DATE(USA)                                                
"EXECIO 1 DISKW AGSUMM"                                                         
PUSH "0   AGNAME   DSNS    ERRORS "                                             
"EXECIO 1 DISKW AGSUMM"                                                         
PUSH "    -------- ------- -------"                                             
"EXECIO 1 DISKW AGSUMM"                                                         
LINES = 4                                                                       
RETURN 0;                                                                       
/*REXX****************************************************************/         
DRAUDIT:                                                                        
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME (S) IN INPUT DATASET                       */         
/*                                                                   */         
/* OUTPUT: AUDIT REPORT OF AGGREGATE (S)                             */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC - NONE                             */         
/*********************************************************************/         
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
ERRORS = 0                                                                      
TDSN = 0                                                                        
TAGG = 0                                                                        
LINES = 58                                                                      
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
"EXECIO 0 DISKR INCNTL (OPEN"                                                   
"EXECIO 0 DISKW AGSUMM (OPEN"                                                   
/*********************************************************************/         
/*   WRITE THE SUMMARY ABARS ACTIVITY LOG                            */         
/*********************************************************************/         
"EXECIO 1 DISKR INCNTL"                                                         
DO WHILE (RC = 0)                                                               
   TAGG = TAGG + 1 /* COUNTING TOTAL AGGREGATES */                              
   IF LINES > 56 THEN                                                           
      CALL RPTHEAD                                                              
   PARSE PULL IAGNAME                                                           
   IAGNAME=STRIP(IAGNAME,B)                                                     
   CALL ARAUDIT IAGNAME                                                         
   PARSE VAR RESULT CDSN EDSN                                                   
   PUSH '   ' LEFT(IAGNAME,8) RIGHT(CDSN,7) RIGHT(EDSN,7)                       
   "EXECIO 1 DISKW AGSUMM"                                                      
   LINES = LINES + 1                                                            
   ERRORS = ERRORS + EDSN                                                       
   TDSN = TDSN + CDSN                                                           
   "EXECIO 1 DISKR INCNTL"                                                      
END                                                                             
PUSH "    -------- ------- -------"                                             
"EXECIO 1 DISKW AGSUMM"                                                         
PUSH '0   AGGREGATES:' LEFT(TAGG,7) ' DATASETS: ' TDSN ,                        
     ' ERRORS: ' ERRORS                                                         
"EXECIO 1 DISKW AGSUMM"                                                         
/************************************************************/                  
"EXECIO 0 DISKR INCNTL (FINIS"                                                  
"EXECIO 0 DISKW AGSUMM (FINIS"                                                  
RETURN 0;                                                                       
RPTHEAD:                                                                        
/*********************************************************************/         
/* WRITE REPORT HEADING                                              */         
/*********************************************************************/         
PUSH "1   ABARS ARECOVER AGGREGATE AUDIT SUMMARY REPORT      " ,                
      "              " DATE(USA)                                                
"EXECIO 1 DISKW AGSUMM"                                                         
PUSH "0   AGNAME   DSNS    ERRORS "                                             
"EXECIO 1 DISKW AGSUMM"                                                         
PUSH "    -------- ------- -------"                                             
"EXECIO 1 DISKW AGSUMM"                                                         
LINES = 4                                                                       
RETURN 0;                                                                       
./ ADD NAME=DRAUDIT                                                             
/*REXX****************************************************************/         
DRAUDIT:                                                                        
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME (S) IN INPUT DATASET                       */         
/*                                                                   */         
/* OUTPUT: AUDIT REPORT OF AGGREGATE (S)                             */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC - NONE                             */         
/*********************************************************************/         
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
ERRORS = 0                                                                      
TDSN = 0                                                                        
TAGG = 0                                                                        
LINES = 58                                                                      
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
"EXECIO 0 DISKR INCNTL (OPEN"                                                   
"EXECIO 0 DISKW AGSUMM (OPEN"                                                   
/*********************************************************************/         
/*   WRITE THE SUMMARY ABARS ACTIVITY LOG                            */         
/*********************************************************************/         
"EXECIO 1 DISKR INCNTL"                                                         
DO WHILE (RC = 0)                                                               
   TAGG = TAGG + 1 /* COUNTING TOTAL AGGREGATES */                              
   IF LINES > 56 THEN                                                           
      CALL RPTHEAD                                                              
   PARSE PULL IAGNAME                                                           
   IAGNAME=STRIP(IAGNAME,B)                                                     
   CALL ARAUDIT IAGNAME                                                         
   PARSE VAR RESULT CDSN EDSN                                                   
   PUSH '   ' LEFT(IAGNAME,8) RIGHT(CDSN,7) RIGHT(EDSN,7)                       
   "EXECIO 1 DISKW AGSUMM"                                                      
   LINES = LINES + 1                                                            
   ERRORS = ERRORS + EDSN                                                       
   TDSN = TDSN + CDSN                                                           
   "EXECIO 1 DISKR INCNTL"                                                      
END                                                                             
PUSH "    -------- ------- -------"                                             
"EXECIO 1 DISKW AGSUMM"                                                         
PUSH '0   AGGREGATES:' LEFT(TAGG,7) ' DATASETS: ' TDSN ,                        
     ' ERRORS: ' ERRORS                                                         
"EXECIO 1 DISKW AGSUMM"                                                         
/************************************************************/                  
"EXECIO 0 DISKR INCNTL (FINIS"                                                  
"EXECIO 0 DISKW AGSUMM (FINIS"                                                  
RETURN 0;                                                                       
RPTHEAD:                                                                        
/*********************************************************************/         
/* WRITE REPORT HEADING                                              */         
/*********************************************************************/         
PUSH "1   ABARS ARECOVER AGGREGATE AUDIT SUMMARY REPORT      " ,                
      "              " DATE(USA)                                                
"EXECIO 1 DISKW AGSUMM"                                                         
PUSH "0   AGNAME   DSNS    ERRORS "                                             
"EXECIO 1 DISKW AGSUMM"                                                         
PUSH "    -------- ------- -------"                                             
"EXECIO 1 DISKW AGSUMM"                                                         
LINES = 4                                                                       
RETURN 0;                                                                       
./ ADD NAME=DRBACKUP                                                            
/*REXX****************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME, UNIT TYPE                                 */         
/*                                                                   */         
/*  OUTPUT: MODIFIED INC/EX/ACC/ALL LIST                             */         
/*          RESULT OF ABARS ABACKUP EXECUTION                        */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME TUNIT EXECVER INPUT .                                               
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
  STAT = MSG('OFF')                                                             
/*********************************************************************/         
/* SETUP CONSTANTS                                                   */         
/*********************************************************************/         
CALL DR10                                                                       
PARSE VAR RESULT DCOLDSN ARECPRM THLQ .                                         
/*********************************************************************/         
/* PARSE INPUT PARAMETERS AND FLAG ANY PROBLEMS                      */         
/*********************************************************************/         
  CALL DR11 IAGNAME TUNIT EXECVER INPUT                                         
  IDSN = RESULT                                                                 
  IF RESULT = 16 THEN                                                           
    DO                                                                          
      ENDRC = RESULT                                                            
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* READ DCOLLECT RECORDS AND GET THE ABARS SELECTION DATASET         */         
/*********************************************************************/         
  CALL DR12 IAGNAME DCOLDSN                                                     
  OUTPUT = RESULT                                                               
  IF RESULT = 16 THEN                                                           
    DO                                                                          
      ENDRC = RESULT                                                            
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* COPY INPUT TO SELECTION DATASET                                   */         
/*********************************************************************/         
  CALL DR13 IAGNAME IDSN OUTPUT                                                 
  IF RESULT ^ = 0 THEN                                                          
    DO                                                                          
      ENDRC = RESULT                                                            
      RETURN ENDRC                                                              
    END                                                                         
/*********************************************************************/         
/* RUN ABACKUP WITH VERIFY OPTION                                    */         
/*********************************************************************/         
  "HSEND WAIT ABACKUP" IAGNAME TUNIT "VERIFY"                                   
   ENDRC = RC                                                                   
/*********************************************************************/         
/* LOCATE THE VERIFY LOG                                             */         
/*********************************************************************/         
  CALL DR14 IAGNAME                                                             
  LOGDSN = RESULT                                                               
  IF ENDRC > 0 THEN    /* FROM PREVIOUS VERIFY COMMAND */                       
    DO                                                                          
      SAY "DRBACKUP: AGGREGATE VERIFY FAILED, CHECK REPORT IN" LOGDSN           
      ENDRC = 16                                                                
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* READ THE READ THE LOG AND LOOK FOR DATASETS TO EXCLUDE            */         
/*********************************************************************/         
  CALL DR15 IAGNAME LOGDSN OUTPUT THLQ                                          
  IDSN = RESULT                                                                 
  IF RESULT = 16 THEN                                                           
    DO                                                                          
      ENDRC = RESULT                                                            
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* COPY REVISED INPUT TO SELECTION DATASET                           */         
/*********************************************************************/         
  CALL DR13 IAGNAME IDSN OUTPUT                                                 
  IF RESULT ^ = 0 THEN                                                          
    DO                                                                          
      ENDRC = RESULT                                                            
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* DO THE ABACKUP FROM THE MODIFIED CONTROL DATASET                  */         
/*********************************************************************/         
   STAT = MSG(STAT)                                                             
  "HSEND WAIT ABACKUP" IAGNAME TUNIT EXECVER                                    
   ENDRC = RC                                                                   
QUIT:                                                                           
/*********************************************************************/         
/* CLEAR ABARS CONTROL DATASET #1                                    */         
/*********************************************************************/         
  CALL DR16 IAGNAME OUTPUT                                                      
/*********************************************************************/         
EXIT ENDRC                                                                      
/*REXX****************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME, UNIT TYPE                                 */         
/*                                                                   */         
/*  OUTPUT: LIST OF DATASETS IN THE AGGREGATE                        */         
/*          AND THEIR LOCATION                                       */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME TUNIT EXECVER INPUT .                                               
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
  STAT = MSG('OFF')                                                             
/*********************************************************************/         
/* SETUP CONSTANTS                                                   */         
/*********************************************************************/         
CALL DR10                                                                       
PARSE VAR RESULT DCOLDSN .                                                      
/*********************************************************************/         
/* VERIFY INPUT DATASET EXISTS                                       */         
/*********************************************************************/         
IF INPUT ^= '' THEN                                                             
  DO                                                                            
    PARSE VAR INPUT INPUTX '(' IDSN                                             
    IF LASTPOS(')',IDSN) ^= 0 THEN                                              
      IDSN = DELSTR(IDSN,LASTPOS(')',IDSN),1)                                   
    MSDSN = SYSDSN(IDSN)                                                        
    IF MSDSN ^= 'OK' THEN   /* PROBLEM, FLAG WHAT'S WRONG */                    
      DO                                                                        
        SAY 'DRSCAN: INPUT DATASET' IDSN '...' || MSDSN                         
        RETURN (16)                                                             
      END                                                                       
  END                                                                           
/*********************************************************************/         
/* READ DCOLLECT RECORDS AND GET THE ABARS SELECTION DATASET         */         
/*********************************************************************/         
IF INPUT ^= '' THEN                                                             
  DO                                                                            
    CALL DR12 IAGNAME DCOLDSN                                                   
    OUTPUT = RESULT                                                             
    IF RESULT = 16 THEN                                                         
      DO                                                                        
        ENDRC = RESULT                                                          
        SIGNAL QUIT                                                             
      END                                                                       
  END                                                                           
/*********************************************************************/         
/* COPY INPUT TO SELECTION DATASET                                   */         
/*********************************************************************/         
IF INPUT ^= '' THEN                                                             
  DO                                                                            
    CALL DR13 IAGNAME IDSN OUTPUT                                               
    IF RESULT ^ = 0 THEN                                                        
      DO                                                                        
        ENDRC = RESULT                                                          
        RETURN ENDRC                                                            
      END                                                                       
  END                                                                           
/*********************************************************************/         
/* RUN ABACKUP WITH VERIFY OPTION                                    */         
/*********************************************************************/         
  "HSEND WAIT ABACKUP" IAGNAME TUNIT "VERIFY"                                   
   ENDRC = RC                                                                   
/*********************************************************************/         
/* LOCATE THE VERIFY LOG                                             */         
/*********************************************************************/         
  CALL DR14 IAGNAME                                                             
  LOGDSN = RESULT                                                               
  IF ENDRC > 0 THEN    /* FROM PREVIOUS VERIFY COMMAND */                       
    DO                                                                          
      SAY "DRSCAN: AGGREGATE VERIFY FAILED, CHECK REPORT IN" LOGDSN             
      ENDRC = 16                                                                
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* READ THE READ THE LOG AND LOOK FOR DATASETS TO EXCLUDE            */         
/*********************************************************************/         
  CALL DR51 IAGNAME LOGDSN                                                      
  IF RESULT ^ = 0 THEN                                                          
    DO                                                                          
      ENDRC = RESULT                                                            
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* CLEAR ABARS CONTROL DATASET #1                                    */         
/*********************************************************************/         
QUIT:                                                                           
IF INPUT ^= '' THEN                                                             
  CALL DR16 IAGNAME OUTPUT                                                      
/*********************************************************************/         
EXIT ENDRC                                                                      
./ ADD NAME=DRSCAN                                                              
/*REXX****************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME, UNIT TYPE                                 */         
/*                                                                   */         
/*  OUTPUT: LIST OF DATASETS IN THE AGGREGATE                        */         
/*          AND THEIR LOCATION                                       */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME TUNIT EXECVER INPUT .                                               
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
  STAT = MSG('OFF')                                                             
/*********************************************************************/         
/* SETUP CONSTANTS                                                   */         
/*********************************************************************/         
CALL DR10                                                                       
PARSE VAR RESULT DCOLDSN .                                                      
/*********************************************************************/         
/* VERIFY INPUT DATASET EXISTS                                       */         
/*********************************************************************/         
IF INPUT ^= '' THEN                                                             
  DO                                                                            
    PARSE VAR INPUT INPUTX '(' IDSN                                             
    IF LASTPOS(')',IDSN) ^= 0 THEN                                              
      IDSN = DELSTR(IDSN,LASTPOS(')',IDSN),1)                                   
    MSDSN = SYSDSN(IDSN)                                                        
    IF MSDSN ^= 'OK' THEN   /* PROBLEM, FLAG WHAT'S WRONG */                    
      DO                                                                        
        SAY 'DRSCAN: INPUT DATASET' IDSN '...' || MSDSN                         
        RETURN (16)                                                             
      END                                                                       
  END                                                                           
/*********************************************************************/         
/* READ DCOLLECT RECORDS AND GET THE ABARS SELECTION DATASET         */         
/*********************************************************************/         
IF INPUT ^= '' THEN                                                             
  DO                                                                            
    CALL DR12 IAGNAME DCOLDSN                                                   
    OUTPUT = RESULT                                                             
    IF RESULT = 16 THEN                                                         
      DO                                                                        
        ENDRC = RESULT                                                          
        SIGNAL QUIT                                                             
      END                                                                       
  END                                                                           
/*********************************************************************/         
/* COPY INPUT TO SELECTION DATASET                                   */         
/*********************************************************************/         
IF INPUT ^= '' THEN                                                             
  DO                                                                            
    CALL DR13 IAGNAME IDSN OUTPUT                                               
    IF RESULT ^ = 0 THEN                                                        
      DO                                                                        
        ENDRC = RESULT                                                          
        RETURN ENDRC                                                            
      END                                                                       
  END                                                                           
/*********************************************************************/         
/* RUN ABACKUP WITH VERIFY OPTION                                    */         
/*********************************************************************/         
  "HSEND WAIT ABACKUP" IAGNAME TUNIT "VERIFY"                                   
   ENDRC = RC                                                                   
/*********************************************************************/         
/* LOCATE THE VERIFY LOG                                             */         
/*********************************************************************/         
  CALL DR14 IAGNAME                                                             
  LOGDSN = RESULT                                                               
  IF ENDRC > 0 THEN    /* FROM PREVIOUS VERIFY COMMAND */                       
    DO                                                                          
      SAY "DRSCAN: AGGREGATE VERIFY FAILED, CHECK REPORT IN" LOGDSN             
      ENDRC = 16                                                                
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* READ THE READ THE LOG AND LOOK FOR DATASETS TO EXCLUDE            */         
/*********************************************************************/         
  CALL DR51 IAGNAME LOGDSN                                                      
  IF RESULT ^ = 0 THEN                                                          
    DO                                                                          
      ENDRC = RESULT                                                            
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* CLEAR ABARS CONTROL DATASET #1                                    */         
/*********************************************************************/         
QUIT:                                                                           
IF INPUT ^= '' THEN                                                             
  CALL DR16 IAGNAME OUTPUT                                                      
/*********************************************************************/         
EXIT ENDRC                                                                      
./ ADD NAME=DRSEO                                                               
/*REXX****************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME, UNIT TYPE                                 */         
/*                                                                   */         
/*  OUTPUT: LIST OF DATASETS IN THE AGGREGATE                        */         
/*          AND THEIR LOCATION                                       */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME TUNIT EXECVER INPUT .                                               
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
  STAT = MSG('OFF')                                                             
/*********************************************************************/         
/* SETUP CONSTANTS                                                   */         
/*********************************************************************/         
CALL DR10                                                                       
PARSE VAR RESULT DCOLDSN .                                                      
/*********************************************************************/         
/* VERIFY INPUT DATASET EXISTS                                       */         
/*********************************************************************/         
IF INPUT ^= '' THEN                                                             
  DO                                                                            
    PARSE VAR INPUT INPUTX '(' IDSN                                             
    IF LASTPOS(')',IDSN) ^= 0 THEN                                              
      IDSN = DELSTR(IDSN,LASTPOS(')',IDSN),1)                                   
    MSDSN = SYSDSN(IDSN)                                                        
    IF MSDSN ^= 'OK' THEN   /* PROBLEM, FLAG WHAT'S WRONG */                    
      DO                                                                        
        SAY 'DRSEO: INPUT DATASET' IDSN '...' || MSDSN                          
        RETURN (16)                                                             
      END                                                                       
  END                                                                           
/*********************************************************************/         
/* READ DCOLLECT RECORDS AND GET THE ABARS SELECTION DATASET         */         
/*********************************************************************/         
IF INPUT ^= '' THEN                                                             
  DO                                                                            
    CALL DR12 IAGNAME DCOLDSN                                                   
    OUTPUT = RESULT                                                             
    IF RESULT = 16 THEN                                                         
      DO                                                                        
        ENDRC = RESULT                                                          
        SIGNAL QUIT                                                             
      END                                                                       
  END                                                                           
/*********************************************************************/         
/* COPY INPUT TO SELECTION DATASET                                   */         
/*********************************************************************/         
IF INPUT ^= '' THEN                                                             
  DO                                                                            
    CALL DR13 IAGNAME IDSN OUTPUT                                               
    IF RESULT ^ = 0 THEN                                                        
      DO                                                                        
        ENDRC = RESULT                                                          
        RETURN ENDRC                                                            
      END                                                                       
  END                                                                           
/*********************************************************************/         
/* RUN ABACKUP WITH VERIFY OPTION                                    */         
/*********************************************************************/         
  "HSEND WAIT ABACKUP" IAGNAME TUNIT "VERIFY"                                   
   ENDRC = RC                                                                   
/*********************************************************************/         
/* LOCATE THE VERIFY LOG                                             */         
/*********************************************************************/         
  CALL DR14 IAGNAME                                                             
  LOGDSN = RESULT                                                               
  IF ENDRC > 0 THEN    /* FROM PREVIOUS VERIFY COMMAND */                       
    DO                                                                          
      SAY "DRSEO: AGGREGATE VERIFY FAILED, CHECK REPORT IN" LOGDSN              
      ENDRC = 16                                                                
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* READ THE READ THE LOG AND LOOK FOR DATASETS TO EXCLUDE            */         
/*********************************************************************/         
  CALL DR61 IAGNAME LOGDSN                                                      
  IF RESULT ^ = 0 THEN                                                          
    DO                                                                          
      ENDRC = RESULT                                                            
      SIGNAL QUIT                                                               
    END                                                                         
/*********************************************************************/         
/* CLEAR ABARS CONTROL DATASET #1                                    */         
/*********************************************************************/         
QUIT:                                                                           
IF INPUT ^= '' THEN                                                             
  CALL DR16 IAGNAME OUTPUT                                                      
/*********************************************************************/         
EXIT ENDRC                                                                      
./ ADD NAME=DR10                                                                
/*REXX****************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  OUTPUT: CONSTANTS USED FOR ABARS UTILITIES                       */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
/* UTILITY DATASET ALLOCATION DEFAULTS */                                       
DCOLDSN = "'A10DLH.DCOLLECT.DATA'"                                              
AREC    = "A10DLH.ABARS.ARECOVER.PARMS"                                         
THLQ    = "TEMP."                                                               
LOGLOG  = "A10DLH.ABARS.ARECOVER.LOGS"                                          
RETURN DCOLDSN AREC THLQ LOGLOG                                                 
./ ADD NAME=DR11                                                                
/*REXX*/                                                                        
DR11:                                                                           
ARG AGNAME TUNIT EXECVER INPUT                                                  
/* *********************** */                                                   
/* * SUBROUTINE READPARM * */                                                   
/* *********************** */                                                   
/* ************************************* */                                     
/* * VALIDATES INPUT PARAMETERS       ** */                                     
/* *  AND FAILS EXEC WITH MESSAGES    ** */                                     
/* *  IF PROBLEMS ARE ENCOUNTERED.    ** */                                     
/* ************************************* */                                     
IF AGNAME  = '' | ,                                                             
   TUNIT   = '' | ,                                                             
   EXECVER = '' | ,                                                             
   INPUT   = ''   THEN                                                          
  DO                                                                            
    SAY 'DRBACKUP: 4 REQUIRED PARAMETERS NOT SUPPLIED'                          
    SAY 'DRBACKUP: NEED AGGREGATE NAME, TAPE UNIT, EXECUTE/VERIFY, ',           
        'AND INPUT DSN (FULLY QUALIFIED)'                                       
    RETURN (16);                                                                
  END                                                                           
/* ************************************* */                                     
/* * CHECK EXECUTE/VERIFY OPTION      ** */                                     
/* * AND TEST TO SEE IF IT'S GOOD     ** */                                     
/* * RICH SLEGER SPELLCHECK......     ** */                                     
/* ************************************* */                                     
IF EXECVER = 'EXECUTE' | ,                                                      
   EXECVER = 'VERIFY' THEN                                                      
  NOP                                                                           
ELSE                                                                            
  DO                                                                            
    SAY 'DRBACKUP:' EXECVER ' MUST SPECIFY VERIFY OR EXECUTE'                   
    RETURN (16);                                                                
  END                                                                           
/* ************************************* */                                     
/* * PULL DSN OUT OF INPUT PARAMETER  ** */                                     
/* * AND TEST TO SEE IF IT'S GOOD     ** */                                     
/* ************************************* */                                     
PARSE VAR INPUT INPUTX '(' IDSN                                                 
IF LASTPOS(')',IDSN) ^= 0 THEN                                                  
  IDSN = DELSTR(IDSN,LASTPOS(')',IDSN),1)                                       
MSDSN = SYSDSN(IDSN)                                                            
IF MSDSN ^= 'OK' THEN                                                           
  DO /* PROBLEM  FLAG WHAT'S WRONG */                                           
    SAY 'DRBACKUP: VALID INPUT DATASET REQUIRED'                                
    SAY 'DRBACKUP:' INPUT '...' || MSDSN                                        
    RETURN (16)                                                                 
  END                                                                           
RETURN IDSN;                                                                    
./ ADD NAME=DR12                                                                
/*REXX*/                                                                        
DR12:                                                                           
ARG IAGNAME DCOLDSN                                                             
/* *********************** */                                                   
/* * SUBROUTINE READDCOL * */                                                   
/* *********************** */                                                   
/* ************************************* */                                     
/* * READS THE DCOLLECT RECORDS TO    ** */                                     
/* * ACQUIRE INFORMATION ABOUT THE    ** */                                     
/* * AGGREGATE                        ** */                                     
/* ************************************* */                                     
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
AGNAMEF = 0                                                                     
/*********************************************************************/         
/* DCOLLECT AGGREGATE GROUP RECORD DESCRIPTION (RECTYPE = 'AG')      */         
/*********************************************************************/         
/* OFFSET (DEC) |  LENGTH (BYTES)  | FIELD DESCRIPTION               */         
/*********************************************************************/         
/* 1            |  24              | DCOLLECT HEADER                 */         
/* 1            |  4               |  RDW                            */         
/* 5            |  2               |  RECORD TYPE                    */         
/* 7            |  2               |  VERSION                        */         
/* 9            |  4               |  SMFID                          */         
/* 13           |  4               |  SMF STYLE TIMESTAMP            */         
/* 17           |  4               |  SMF STYLE DATESTAMP            */         
/* 21           |  4               |  RESERVED                       */         
/* 25           |  616             | AG DEFINITION RECORD            */         
/* 25           |  2               |  AG NAME LENGTH                 */         
/* 27           |  30              |  AG NAME                        */         
/* 57           |  8               |  TSO USERID DOING LAST UPDATE   */         
/* 65           |  10              |  DATE OF LAST UPDATE            */         
/* 75           |   2              |  RESERVED                       */         
/* 77           |   8              |  TIME OF LAST UPDATE            */         
/* 85           | 120              |  DESCRIPTION OF AGGREGATE       */         
/* 205          |   1              |  FLAGS                          */         
/*              |                  |       (1... ....) - TOLENQ(YES) */         
/*              |                  |       (.1.. ....) - RETPD(YES)  */         
/*              |                  |       (..1. ....) -*COPIES(YES) */         
/*              |                  |       (...1 1111) - RESERVED    */         
/* 206          |   3              |  RESERVED                       */         
/* 209          |   4              |  RETENTION PERIOD               */         
/* 213          |   30             |  DESTINATION                    */         
/* 243          |   33             |  OUTPUT DSN PREFIX              */         
/* 276          |   1              |  RESERVED                       */         
/* 277          |   44             |  INSTRUCTION DSN                */         
/* 321          |    8             |  INSTRUCTION MEMBER NAME        */         
/* 329          |  260             |  ARRAY OF DSNS (5)              */         
/*              |   44             |           DSN                   */         
/*              |    8             |           MEMBER NAME (IF ANY)  */         
/* 589          |    2             |  MANAGEMENT CLASS NAME LENGTH -**/         
/* 591          |    30            |  MANAGEMENT CLASS NAME -*       */         
/* 621          |    4             |  NUMBER OF COPIES      -*       */         
/* 625          |    16            |  RESERVED                       */         
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
"ALLOCATE FI(INPUT) DA("DCOLDSN") SHR REUSE"                                    
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'DRBACKUP: CANNOT ALLOCATE' DCOLLDSN '.  RC='RC                         
    EXIT RC                                                                     
  END                                                                           
"EXECIO 1 DISKR INPUT"                                                          
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'DRBACKUP: ERROR READING' DCOLLDSN '.  RC='RC                           
    EXIT RC                                                                     
  END                                                                           
DO WHILE RC = 0 & AGNAMEF = 0                                                   
   PARSE PULL DCOLLREC                                                          
   PARSE VAR DCOLLREC 5 RECTYPE 7                                               
   IF RECTYPE = 'AG' THEN /* AGGREGATE RECORD */                                
      DO                                                                        
       PARSE VAR DCOLLREC 25 AGNAMEL 27 AGNAME 57 .                             
       AGGNAME = SUBSTR(AGNAME,1,C2D(AGNAMEL))                                  
       IF IAGNAME = AGGNAME THEN                                                
         DO /* FOUND OUR AGGREGATE */                                           
           AGNAMEF = 1                                                          
            /* GET INPUT DATASET NAMES */                                       
           PARSE VAR DCOLLREC 329 RECTAIL 644                                   
           DO N = 1 TO 5                                                        
             PARSE VAR RECTAIL 1 AGIDSN.N +44 AGIMEM.N +8 RECTAIL               
           END                                                                  
         END                                                                    
     END                                                                        
    "EXECIO 1 DISKR INPUT"                                                      
END                                                                             
"EXECIO 0 DISKR INPUT (FINIS"                                                   
"FREE FI(INPUT)"                                                                
/* *************************** */                                               
/* * DELETE THE LAST RECORD  * */                                               
/* * READ FROM THE QUEUE.    * */                                               
/* * (DIDN'T PROCESS TIL EOF)* */                                               
/* *************************** */                                               
IF QUEUED() = 1 THEN                                                            
  DO                                                                            
    DELSTACK                                                                    
  END                                                                           
/* ******************************* */                                           
/* * CHECK TO SEE IF WE          * */                                           
/* * DIDN'T FIND A MATCH FOR     * */                                           
/* * AGGREGATE NAME (RE-RUN, ... * */                                           
/* * NEED DCOLLECT INFO CURRENT) * */                                           
/* ******************************* */                                           
IF AGNAMEF = 0 THEN                                                             
  DO /* NEED TO FLAG ERROR */                                                   
    SAY 'DRBACKUP:' IAGNAME 'AGGREGATE NOT FOUND IN DCOLLECT DSN',              
         DCOLDSN                                                                
    RETURN (16);                                                                
  END                                                                           
OUTPUT = "'" || STRIP(AGIDSN.1,B) || "(" || STRIP(AGIMEM.1,T) || ")'"           
RETURN OUTPUT;   /* REMOVE FOR PRODUCTION  */                                   
/* ******************************* */                                           
/* * CHECK TO SEE IF THERE ARE   * */                                           
/* * MORE THAN ONE SELECTION DSN * */                                           
/* * DEFINED (ERROR IF THERE IS).* */                                           
/* ******************************* */                                           
DO I = 2 TO 5                                                                   
  IF AGIDSN.I ^= "" THEN                                                        
    DO                                                                          
      SAY 'DRBACKUP:' IAGNAME 'HAS MULTIPLE SELECTION DATASETS DEFINED'         
      RETURN (16);                                                              
    END                                                                         
END                                                                             
OUTPUT = "'" || STRIP(AGIDSN.1,B) || "(" || STRIP(AGIMEM.1,T) || ")'"           
RETURN OUTPUT;                                                                  
./ ADD NAME=DR13                                                                
/*REXX*/                                                                        
DR13:                                                                           
ARG AGNAME IDSN OPUTCTL                                                         
/* *********************** */                                                   
/* * SUBROUTINE COPYRECS * */                                                   
/* *********************** */                                                   
/* ************************************* */                                     
/* * COPIES THE AGGREGATE'S INPUT     ** */                                     
/* *DATASET TO SELECTION DATASET      ** */                                     
/* ************************************* */                                     
/* ************************************* */                                     
/* * CHECK IT TO SEE IF IT EXISTS     ** */                                     
/* ************************************* */                                     
IF IDSN = OPUTCTL THEN   /* PROBLEM, FLAG WHAT'S WRONG */                       
  DO                                                                            
    SAY 'DRBACKUP: SELECTION DATASET AND INPUT DATASET ARE THE SAME'            
    SAY 'DRBACKUP: SELECTION DATASET :' OPUTCTL                                 
    SAY 'DRBACKUP:     INPUT DATASET :' IDSN                                    
    RETURN (16)                                                                 
  END                                                                           
PARSE VAR OPUTCTL ODSN '(' .                                                    
ODSN = ODSN || "'"                                                              
MSDSN = SYSDSN(ODSN)                                                            
IF MSDSN = 'OK' | ,                                                             
   MSDSN = 'UNAVAILABLE DATASET' THEN /* GOOD, CONTINUE */                      
  DO                                                                            
  "ALLOC FI(SYSUT2) DA("OPUTCTL") OLD"                                          
  END                                                                           
ELSE /* SO FAR SO GOOD             */                                           
  DO                                                                            
    SAY 'DRBACKUP: SELECTION DATASET' ODSN '...' || MSDSN                       
    RETURN (16)                                                                 
  END                                                                           
R = 0                                                                           
DO WHILE (RC ^= 0 & R ^= 6)                                                     
  R = R + 1                                                                     
  "WAIT 10"                                                                     
  "ALLOC FI(SYSUT2) DA("OPUTCTL") OLD"                                          
END                                                                             
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'DRBACKUP: RESET OF SELECTION DATASET UNSUCCESSFUL' OPUTCTL             
    RETURN                                                                      
  END                                                                           
/* ************************************* */                                     
/* * DO REMAINING ALLOCATIONS         ** */                                     
/* ************************************* */                                     
"ALLOC FI(SYSUT1) DA("IDSN") SHR REUSE"                                         
"ALLOC FI(SYSIN) DUMMY REUSE"                                                   
"ALLOC FI(SYSPRINT) DUMMY REUSE"                                                
/* ************************************* */                                     
/* * COPY TO SELECTION DATASET        ** */                                     
/* ************************************* */                                     
"CALL 'SYS1.LINKLIB(IEBGENER)'"                                                 
"FREE FI(SYSUT1)"                                                               
"FREE FI(SYSUT2)"                                                               
RETURN (0)                                                                      
./ ADD NAME=DR14                                                                
/*REXX****************************************************************/         
/*  GETLOG SUBROUTINE                                                */         
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*      PASSED THE AGGREGATE NAME, WE WILL USE THE AUTOMATE FUNCTION */         
/*   "GETVAR" TO OBTAIN THE LOG NAME OF THE LAST ABARS COMMAND FOR   */         
/*   THIS AGGREGATE. AUTOMATE IS SCANNING FOR THE OCCURRENCE OF A    */         
/*   "ARC6030I" MESSAGE ON THE CONSOLE AND SETTING THE VARIABLE FOR  */         
/*   US.                                                             */         
/*                                                                   */         
/*   INPUT: AGGREGATE NAME                                           */         
/*                                                                   */         
/*  OUTPUT: LOGDSN FOR THE AGGREGATE                                 */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                    */         
/*                                                                   */         
/****************************************************************@ZRC*/         
DR14:                                                                           
ARG IAGNAME, .                                                                  
STAT = MSG('OFF')   /* SUPPRESS MESSAGES TO THE JOB */                          
VARNAME = "ABARS_" || IAGNAME                                                   
"GETVAR " VALUE(VARNAME) LOGDSN                                                 
LOGDSN = "'" || LOGDSN || "'"                                                   
 /*"DELVAR " VALUE(VARNAME)*/                                                   
RETURN LOGDSN                                                                   
./ ADD NAME=DR14AM                                                              
/*REXX****************************************************************/         
/*  GETLOG SUBROUTINE                                                */         
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*      PASSED THE AGGREGATE NAME, WE WILL USE THE AUTOMATE FUNCTION */         
/*   "GETVAR" TO OBTAIN THE LOG NAME OF THE LAST ABARS COMMAND FOR   */         
/*   THIS AGGREGATE. AUTOMATE IS SCANNING FOR THE OCCURRENCE OF A    */         
/*   "ARC6030I" MESSAGE ON THE CONSOLE AND SETTING THE VARIABLE FOR  */         
/*   US.                                                             */         
/*                                                                   */         
/*   INPUT: AGGREGATE NAME                                           */         
/*                                                                   */         
/*  OUTPUT: LOGDSN FOR THE AGGREGATE                                 */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                    */         
/*                                                                   */         
/****************************************************************@ZRC*/         
DR14:                                                                           
ARG IAGNAME, .                                                                  
STAT = MSG('OFF')   /* SUPPRESS MESSAGES TO THE JOB */                          
VARNAME = "ABARS_" || IAGNAME                                                   
"GETVAR " VALUE(VARNAME) LOGDSN                                                 
LOGDSN = "'" || LOGDSN || "'"                                                   
 /*"DELVAR " VALUE(VARNAME)*/                                                   
RETURN LOGDSN                                                                   
./ ADD NAME=DR14NV                                                              
/*REXX****************************************************************/         
/*  GETLOG SUBROUTINE                                                */         
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*      PASSED THE AGGREGATE NAME, WE WILL USE THE SAME PDS THAT     */         
/*   NETVIEW WRITES TO OBTAIN THE ACTIVITY LOG OF THE MOST RECENT    */         
/*   ABARS COMMAND FOR THIS AGGREGATE.  NETVIEW IS SCANNING FOR      */         
/*   THE OCCURRENCE OF AN "ARC6030I ON THE CONSOLE AND UPDATES THIS  */         
/*   PDS FOR US.                                                 @XRC*/         
/*                                                                   */         
/*   INPUT: AGGREGATE NAME                                           */         
/*                                                                   */         
/*  OUTPUT: LOGDSN FOR THE AGGREGATE                                 */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                    */         
/*                                                                   */         
/****************************************************************@ZRC*/         
DR14:                                                                           
ARG IAGNAME, .                                                                  
STAT = MSG('OFF')   /* SUPPRESS MESSAGES TO THE JOB */                          
"ALLOC FI(INPUT) DA('A10DLH.ABARXREF.PDS(" || IAGNAME || ")') SHR REUSE"        
"EXECIO 1 DISKR INPUT"                                                          
PARSE PULL LOGDSN                                                               
"EXECIO 0 DISKR INPUT (CLOSE"                                                   
"FREE FI(INPUT)"                                                                
LOGDSN = "'" || LOGDSN || "'"                                                   
RETURN LOGDSN                                                                   
./ ADD NAME=DR15                                                                
/*REXX****************************************************************/         
DR15:                                                                           
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ACTIVITY LOG DATASET,                                     */         
/*         ABARS SELECTION DSN #1,                                   */         
/*                                                                   */         
/*  OUTPUT: REVISED AGGREGATE CONTROL CARDS                          */         
/*          (ABARS SELECTION DSN #1)                                 */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME ACTLOG OUTPUT THLQ .                                                
/*********************************************************************/         
/* CONSTANTS AND FLAGS (GLOBAL TO SUBROUTINES)                       */         
/*********************************************************************/         
LOOK = 'OFF'                                                                    
M = 0                                                                           
SMC1 = 0   /* COUNTER FOR THE # OF DATASETS*/                                   
SMC2 = 0   /* COUNTER FOR THE # OF ARCIVE'D DATASETS*/                          
SMC3 = 0   /* COUNTER FOR THE # OF NON-ARCIVE'D DATASETS*/                      
INCLUDE = 'INCLUDE ('                                                           
EXCLUDE = 'EXCLUDE ('                                                           
ACCOMPA = 'ACCOMPANY ('                                                         
ALLOCAT = 'ALLOCATE ('                                                          
II = 0   /* COUNTERS FOR THE # OF LINES PER OCCURRENCE @ZRC*/                   
JJ = 0   /* COUNTERS FOR THE # OF LINES PER OCCURRENCE @ZRC*/                   
KK = 0   /* COUNTERS FOR THE # OF LINES PER OCCURRENCE @ZRC*/                   
LL = 0   /* COUNTERS FOR THE # OF LINES PER OCCURRENCE @ZRC*/                   
TEXT. = ''                                                                      
IDSN = "'" || THLQ || "SELECT." || IAGNAME || "'"                               
/*********************************************************************/         
/* TEXT IS AN INTERNAL DATA STRUCTURE FOR ABARS CONTROL STATEMENTS   */         
/* IT HAS 3 LEVELS OF QUALIFICATION                                  */         
/* TEXT.A.B.C                                                        */         
/*     "A" IS 1 - 4 FOR INCLUDE, EXCLUDE, ALLOCATE, OR ACCOMPANY     */         
/*       "B" IS THE NUMBER OF OCCURRENCES OF THE CONTROL CARD    @ZRC*/         
/*        "C" IS THE NUMBER OF STATEMENTS UNDER "CONTROL"            */         
/*********************************************************************/         
/*********************************************************************/         
/* THE CONTROL STATEMENTS FOLLOW TWO PATHS (PROVIDING ALL EXIST)     */         
/* 1)THE EXCLUDE/INCLUDE STATEMENTS ARE DEALT WITH FROM THE          */         
/*   SUBROUTINES READLOG AND WRITEINC                                */         
/* 2)THE ALLOCATE/ACCOMPANY STATEMENTS ARE DEALT WITH FROM THE       */         
/*   SUBROUTINES ALLOCACC AND WRITEAA                                */         
/* THESE STATEMENTS MERGE IN THE SELECTION DATASET PRIOR TO          */         
/* EXECUTING THE ABACKUP EXECUTE FOR THE AGGREGATE.                  */         
/*********************************************************************/         
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/*TRACE*?R************************************************************/         
  STAT = MSG('OFF')                                                             
CALL READLOG                                                                    
IF RESULT > 0 THEN SIGNAL QUIT                                                  
CALL ALLOCACC                                                                   
IF RESULT > 0 THEN SIGNAL QUIT                                                  
CALL WRITEINC                                                                   
IF RESULT > 0 THEN SIGNAL QUIT                                                  
CALL WRITEAA                                                                    
QUIT:                                                                           
RETURN IDSN;                                                                    
READLOG:                                                                        
/* *********************** */                                                   
/* * SUBROUTINE READLOG  * */                                                   
/* *********************** */                                                   
/* ************************************* */                                     
/* * ALLOCATES THE BACKUP LOG DATASET ** */                                     
/* * THE READS THE BACKUP ACTIVITY    ** */                                     
/* * LOG TO ELIMINATE ARCHIVE DATA    ** */                                     
/* ************************************* */                                     
/*********************************************************************/         
/*   START WITH OPENING AND READING THE ABARS VERIFY ACTIVITY LOG    */         
/*********************************************************************/         
STAT = MSG('OFF')                                                               
"ALLOCATE FI(INPUT) DA("ACTLOG") SHR REUSE"                                     
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'DRBACKUP: ERROR ALLOCATING LOG DSN' ACTLOG '.  RC='RC                  
    RETURN 16;                                                                  
  END                                                                           
/*********************************************************************/         
/*   PARSE THE ABARS ACTIVITY LOG FOR DATASET NAMES                  */         
/*********************************************************************/         
"EXECIO 1 DISKR INPUT"                                                          
DO WHILE RC = 0                                                                 
   PARSE PULL ABAROREC                                                          
   PARSE VAR ABAROREC 2 ABARMSG 10 .                                            
   IF ABARMSG = 'ARC6004I' THEN /* MSG FROM AN EXECUTE LOG (BAD)*/              
      DO                                                                        
        SAY 'DRBACKUP: LOG NOT FROM ABACKUP VERIFY' LOGDSN                      
        SAY 'DRBACKUP: CHECK AUTOMATED OPERATIONS, WRONG LOG' ACTLOG            
        RETURN (16);                                                            
      END                                                                       
   IF ABARMSG = 'ARC6166I' THEN /* START OF DATASET NAMES */                    
     DO /* READ THE NEXT RECORD */                                              
       "EXECIO 1 DISKR INPUT"                                                   
       PARSE PULL ABAROREC                                                      
       PARSE VAR ABAROREC ABART1 ABART2 .                                       
       IF ABART1 = 'INCLUDE/EXCLUDE' | ,                                        
          ABART2 = 'INCLUDE/EXCLUDE' THEN                                       
         LOOK = 'ON'                                                            
       ELSE                                                                     
         LOOK = 'OFF'                                                           
     END                                                                        
   IF ABARMSG = 'ARC6250I' THEN /* MSG PROCEEDING DSNS FOR DFSMSHSM */          
      LOOK = 'OFF'                                                              
   IF ABARMSG = 'ARC6379I' THEN /* DATASET COUNT FIX 9/8/94         */          
      LOOK = 'OFF'              /* DATASET COUNT FIX 9/8/94         */          
   IF ABARMSG = 'ARC6055I' THEN /* MSG PROCEEDING DSNS FOR DFHSM 2.6*/          
      LOOK = 'OFF'                                                              
   IF LOOK = 'ON' THEN                                                          
/*********************************************************************/         
/*   LOOK FOR DATASET NAMES                                          */         
/*********************************************************************/         
     DO                                                                         
       PARSE VAR ABAROREC 2 ABARNULL 4 .                                        
       IF ABARNULL = '  '  THEN  /* IT IS A DATASET NAME */                     
         DO                                                                     
           SMC1 = SMC1 + 1                                                      
           PARSE VAR ABAROREC 4 AGDSN 48 .                                      
           AGDSN = STRIP(AGDSN,T)                                               
           AGGDSN = "'" || AGDSN || "'"                                         
           /* *************************** */                                    
           /* PARSE THE OUTPUT OF LISTCAT */                                    
           /* *************************** */                                    
           CALL OUTTRAP ("CMDOPUT.")                                            
           "LISTC ENTRY("AGGDSN") VOLUME"                                       
           DO J = 1 TO CMDOPUT.0                                                
             PARSE VAR CMDOPUT.J 8 VOLSER 14 .                                  
             IF VOLSER = 'VOLSER' THEN                                          
               DO                                                               
                J = CMDOPUT.0   /* END LISTCAT PROCESS */                       
                 PARSE VAR CMDOPUT.J 26 VOLUME 32 JUNK 52 DEVT 60 .             
                 /* ************************ */                                 
                 /* DO WE WANT THIS DATASET? */                                 
                 /* ************************ */                                 
                 CALL DR151 IAGNAME AGDSN VOLUME DEVT                           
                 WHY = RESULT                                                   
                 IF WHY ^= '' THEN                                              
                   DO                                                           
                     SAY 'DRBACKUP: PROBLEM WITH' AGDSN WHY                     
                     SMC2 = SMC2 + 1                                            
                   END                                                          
                 ELSE                                                           
                   DO                                                           
                     SMC3 = SMC3 + 1                                            
                     INCLDSN.SMC3 = AGDSN                                       
                   END                                                          
               END                                                              
           END                                                                  
           CALL OUTTRAP("OFF")                                                  
         END                                                                    
     END                                                                        
   "EXECIO 1 DISKR INPUT"                                                       
END                                                                             
"EXECIO 0 DISKR INPUT (FINIS"                                                   
"FREE FI(INPUT)"                                                                
/* "DELETE" ACTLOG  */                                                          
RETURN 0;                                                                       
ALLOCACC:                                                                       
/* *********************** */                                                   
/* * SUBROUTINE ALLOCACC * */                                                   
/* *********************** */                                                   
/* **************************** */                                              
/* LOOK FOR ALLOCATE/ACCOMPANY */                                               
/* STATEMENTS IN SELECTION DSN */                                               
/* **************************** */                                              
"ALLOC FI(ABIN) DA("OUTPUT") SHR"                                               
"EXECIO 1 DISKR ABIN"                                                           
IF RC ^= 0 THEN DO                                                              
  SAY 'DRBACKUP: ERROR ALLOCATING SELECTION DATASET' OUTPUT '.  RC='RC          
  EXIT RC                                                                       
END                                                                             
PARSE PULL ABARIN                                                               
DO WHILE RC = 0                                                                 
  PARSE VAR ABARIN KWORD '(' ABARIN                                             
  KWORD = STRIP(KWORD,B)                                                        
  ABARIN = STRIP(ABARIN,T)                                                      
  IF LASTPOS('-',ABARIN) ^= 0 THEN                                              
    ABARIN = DELSTR(ABARIN,LASTPOS('-',ABARIN),1)                               
  SELECT                                                                        
    WHEN ABBREV(INCLUDE,KWORD,1)  THEN                                          
      DO                                                                        
        I = 1                                                                   
        II = II + 1                                                             
        TEXT.I.II.1 = ABARIN                                                    
        CALL MPARSE I II TEXT.I.II.1                                            
      END                                                                       
    WHEN ABBREV(EXCLUDE,KWORD,1)  THEN                                          
      DO                                                                        
        J = 2                                                                   
        JJ = JJ + 1                                                             
        TEXT.J.JJ.1 = ABARIN                                                    
        CALL MPARSE J JJ TEXT.J.JJ.1                                            
      END                                                                       
    WHEN ABBREV(ACCOMPA,KWORD,1)  THEN                                          
      DO                                                                        
        K = 3                                                                   
        KK = KK + 1                                                             
        TEXT.K.KK.1 = ABARIN                                                    
        CALL MPARSE K KK TEXT.K.KK.1                                            
      END                                                                       
    WHEN ABBREV(ALLOCAT,KWORD,1)  THEN                                          
      DO                                                                        
        L = 4                                                                   
        LL = LL + 1                                                             
        TEXT.L.LL.1 = ABARIN                                                    
        CALL MPARSE L LL TEXT.L.LL.1                                            
      END                                                                       
    OTHERWISE /* COULD BE A COMMENT */                                          
      DO                                                                        
        NOP                                                                     
      END                                                                       
  END                                                                           
  "EXECIO 1 DISKR ABIN"                                                         
  PARSE PULL ABARIN                                                             
END                                                                             
"EXECIO 0 DISKR ABIN (FINIS"                                                    
"FREE FI(ABIN)"                                                                 
RETURN 0;                                                                       
WRITEINC:                                                                       
/* *********************** */                                                   
/* * SUBROUTINE WRITEINC * */                                                   
/* *********************** */                                                   
/* **************************** */                                              
/* OPEN CNTL DATASET AND WRITE */                                               
/* DATASETS TO BE INCLUDED     */                                               
/* **************************** */                                              
/* "ALLOC FI(ABOUT) DA("OUTPUT") OLD" */                                        
MSDSN = SYSDSN(IDSN)                                                            
IF MSDSN = 'OK' THEN   /* REUSE DATASET */                                      
   "ALLOC FI(ABOUT) DA("IDSN") OLD"                                             
ELSE /* CREATE A NEW DATASET       */                                           
   "ALLOC FI(ABOUT) DA("IDSN") NEW SPACE(2 1)" ,                                
    " RECFM(F B) LRECL(80) BLKSIZE(0) DSORG(PS)"                                
SAY 'DRBACKUP: CANDIDATE DATASETS FOR BACKUP:' SMC1                             
SAY "DRBACKUP: ARCIVE'D DATASETS EXCLUDED:" SMC2                                
SAY "DRBACKUP: DATASETS INCLUDED:" SMC3                                         
"EXECIO 0 DISKW ABOUT (OPEN"                                                    
PRECEED = ' INCLUDE('                                                           
IF SMC3 > 0 THEN                                                                
  DO J = 1 TO SMC3                                                              
    IF J ^= SMC3  THEN                                                          
      DO                                                                        
        PUSH PRECEED || INCLDSN.J || ','                                        
       "EXECIO 1 DISKW ABOUT"                                                   
      END                                                                       
    ELSE                                                                        
      DO                                                                        
        PUSH PRECEED || INCLDSN.J || ')'                                        
       "EXECIO 1 DISKW ABOUT"                                                   
      END                                                                       
    PRECEED = '         '                                                       
  END                                                                           
ELSE                                                                            
  DO                                                                            
    SAY "DRBACKUP: ALL DATASETS IN AGGREGATE HAVE BEEN ELIMINATED"              
    RETURN (16);                                                                
  END                                                                           
RETURN 0;                                                                       
WRITEAA:                                                                        
/* *********************** */                                                   
/* * SUBROUTINE WRITEAA  * */                                                   
/* *********************** */                                                   
/* **************************** */                                              
/* FOLLOW THIS WITH ALLOCATE/   */                                              
/* ACCOMPANY STATEMENTS         */                                              
/* **************************** */                                              
IF TEXT.3.1.1 ^= '' THEN                                                        
  DO                                                                            
    PUSH ' ' ACCOMPA '-'                                                        
    "EXECIO 1 DISKW ABOUT"                                                      
    DDNAME = 'ABOUT'                                                            
    CALL COMMSTMT 3 DDNAME                                                      
  END                                                                           
IF TEXT.4.1.1 ^= '' THEN                                                        
  DO                                                                            
    PUSH ' ' ALLOCAT '-'                                                        
    "EXECIO 1 DISKW ABOUT"                                                      
    DDNAME = 'ABOUT'                                                            
    CALL COMMSTMT 4 DDNAME                                                      
  END                                                                           
PUSH '  /* DATASET MODIFIED BY DRBACKUP' DATE(USA) TIME() '*/'                  
"EXECIO 1 DISKW ABOUT"                                                          
"EXECIO 0 DISKW ABOUT (FINIS"                                                   
"FREE FI(ABOUT)"                                                                
RETURN 0;                                                                       
MPARSE: PROCEDURE EXPOSE TEXT.                                                  
ARG U V EXCLUDES                                                                
/* *********************** */                                                   
/* * SUBROUTINE MPARSE   * */                                                   
/* *********************** */                                                   
/* ************************************* */                                     
/* * SEPARATES  MERGED INCLUDE/EXCLUDE** */                                     
/* * ALLOCATE/ACCOMPANY STATEMENTS AND** */                                     
/* * SPLITS THEM FOR USE BY DFDSS.    ** */                                     
/* ************************************* */                                     
FILEIORC = 0                                                                    
PAREN = 1                                                                       
W = 1                                                                           
PAREN = PAREN + DR152('(',TEXT.U.V.W) - DR152(')',TEXT.U.V.W)                   
DO WHILE FILEIORC = 0 & PAREN ^= 0                                              
  "EXECIO 1 DISKR ABIN"                                                         
  FILEIORC = RC                                                                 
  W = W + 1                                                                     
  PARSE PULL TEXT.U.V.W                                                         
  IF LASTPOS('-',TEXT.U.W.V) ^= 0 THEN                                          
    TEXT.U.W.V = DELSTR(TEXT.U.W.V,LASTPOS('-',TEXT.U.W.V),1)                   
  PAREN = PAREN + DR152('(',TEXT.U.V.W) - DR152(')',TEXT.U.V.W)                 
END                                                                             
RETURN 0;                                                                       
COMMSTMT: PROCEDURE EXPOSE TEXT.                                                
/* *********************** */                                                   
/* * FUNCTION COMMSTMT   * */                                                   
/* *********************** */                                                   
/* ************************************* */                                     
/* * CREATES CONTROL STATEMENTS       ** */                                     
/* * ACCEPTABLE TO BOTH DF/DSS AND    ** */                                     
/* * ABARS                            ** */                                     
/* ************************************* */                                     
ARG CNTLX DDNAM EXCLX .                                                         
I = 1                                                                           
J. = 1                                                                          
J = 1                                                                           
DO WHILE (TEXT.CNTLX.I.J ^= '')                                                 
  DO WHILE (TEXT.CNTLX.I.J ^= '')                                               
   /* SAY TEXT. CNTLX I J '=' TEXT.CNTLX.I.J  */                                
      J.I = J.I + 1                                                             
      J = J + 1                                                                 
  END                                                                           
  J.I = J.I - 1                                                                 
  J = 1                                                                         
  I = I + 1                                                                     
END                                                                             
I = I - 1                                                                       
DO X = 1 TO I                                                                   
   DO Y = 1 TO J.I                                                              
      LINEX = TEXT.CNTLX.X.Y                                                    
      IF X = I & Y = J.I THEN /* LAST LINE */                                   
        DO                                                                      
          IF EXCLX ^= '' THEN   /* THERE ARE EXCLUDES TOO */                    
            DO                                                                  
              PUSH '   ' LINEX ' - '                                            
              'EXECIO 1 DISKW' DDNAM                                            
            END                                                                 
          ELSE  /* END OF STATEMENTS */                                         
            DO                                                                  
              PUSH '   ' LINEX                                                  
              'EXECIO 1 DISKW' DDNAM                                            
            END                                                                 
        END                                                                     
      ELSE                                                                      
        IF X ^= I & Y = J.I THEN /* END OF INTERMEDIATE */                      
          DO                                                                    
            LINEX = DELSTR(LINEX,LENGTH(LINEX)) /* DELETE EXTRA )*/             
            PUSH '   ' LINEX ' - '                                              
            'EXECIO 1 DISKW' DDNAM                                              
          END                                                                   
        ELSE                                                                    
          DO  /* ITS A LINE WITHOUT CONTINUATION */                             
            PUSH '   ' LINEX ' - '                                              
            'EXECIO 1 DISKW' DDNAM                                              
          END                                                                   
   END                                                                          
RETURN 0;                                                                       
./ ADD NAME=DR151                                                               
/*REXX****************************************************************/         
/*  ELIMDSN SUBROUTINE                                               */         
/*********************************************************************/         
DR151:                                                                          
ARG AGNAME AGGDSN VOLUME DEVT                                                   
ELIMFLAG = ""                                                                   
IF VOLUME = 'ARCIVE' THEN                                                       
  DO                                                                            
    ELIMFLAG = '...ARCHIVED DATASET'                                            
  END                                                                           
RETURN ELIMFLAG                                                                 
./ ADD NAME=DR152                                                               
/*REXX*/                                                                        
DR152:                                                                          
ARG LOOKUPV, ABARIN                                                             
/* *********************** */                                                   
/* * FUNCTION COUNT      * */                                                   
/* *********************** */                                                   
/* ************************************* */                                     
/* * PARSES A LINE OF INPUT AND COUNTS** */                                     
/* * THE # OF OCCURRENCES OF A STRING ** */                                     
/* ********************************@ZRC* */                                     
LASTRP = 1                                                                      
IDX = 0                                                                         
DO WHILE LASTRP ^= 0                                                            
  LASTRP = POS(LOOKUPV,ABARIN,LASTRP)                                           
  IF LASTRP > 0  THEN                                                           
    DO                                                                          
      LASTRP = LASTRP + 1 /* SEARCH STARTING FROM THE NEXT POS */               
      IDX = IDX + 1                                                             
    END                                                                         
END                                                                             
RETURN IDX                                                                      
./ ADD NAME=DR16                                                                
/*REXX*/                                                                        
DR16:                                                                           
ARG AGNAME OUTPUT                                                               
/* *********************** */                                                   
/* * SUBROUTINE CLEARCTL * */                                                   
/* *********************** */                                                   
"ALLOC FI(EXCLOUT) DA("OUTPUT") OLD"                                            
/* ************************************* */                                     
/* * CLEARS THE 1ST SELECTION DATASET.** */                                     
/* * FIRST, LOOP UNTIL WE GET THE     ** */                                     
/* *   SELECTION DATASET ALLOCATED    ** */                                     
/* ************************************* */                                     
R = 0                                                                           
DO WHILE (RC ^= 0 & R ^= 20)                                                    
  R = R + 1                                                                     
  "WAIT 15"                                                                     
  "ALLOC FI(EXCLOUT) DA("OUTPUT") OLD"                                          
END                                                                             
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'DRBACKUP: RESET OF SELECTION DATASET UNSUCCESSFUL' OUTPUT              
    RETURN                                                                      
  END                                                                           
/* ************************************* */                                     
/* * SECOND, RUN OUR RECORDS INTO     ** */                                     
/* *   THE DATASET TO RESET IT        ** */                                     
/* ************************************* */                                     
"EXECIO 0 DISKW EXCLOUT (OPEN"                                                  
PUSH '  /* DATASET CLEARED BY DRBACKUP' DATE(USA) TIME() '*/'                   
"EXECIO 1 DISKW EXCLOUT"                                                        
"EXECIO 0 DISKW EXCLOUT (FINIS"                                                 
"FREE FI(EXCLOUT)"                                                              
RETURN 0;                                                                       
./ ADD NAME=DR21                                                                
/*REXX****************************************************************/         
DR21:                                                                           
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ACTIVITY LOG DATASET,                                     */         
/*                                                                   */         
/* OUTPUT: ARECOVER DATASET STATEMENTS,                              */         
/*         ACTIVITY LOG,                                             */         
/*         DETAIL DSN DATASET                                        */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME TUNIT ACTLOG ARDSN DETPRE .                                         
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
LOOK = 'OFF'                                                                    
DSNLIST = 'OFF'                                                                 
K = 0                                                                           
CS = 0           /* COPY SET, SUPPORT FOR MULTIPLE COPIES */                    
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/** SET UP A REPORTING DSN **********************************/                  
RPTDSN = "'" || DETPRE || "DSNDET." || IAGNAME || "'"                           
MSDSN = SYSDSN(RPTDSN)                                                          
IF MSDSN ^= 'OK' THEN                                                           
  DO                                                                            
   "ALLOC DA("RPTDSN") NEW SPACE(2 1)"    ,                                     
     " RECFM(F B) LRECL(200) BLKSIZE(0) DSORG(PS)"                              
  END                                                                           
"ALLOC FI(DSNDET) DA("RPTDSN") OLD"                                             
/*********************************************************************/         
/*   LOCATE AND READ THE ABARS ACTIVITY LOG                          */         
/*********************************************************************/         
IF ACTLOG = "''" THEN                                                           
  DO                                                                            
    SAY "ABARPOST: NO ABACKUP LOGS AVAILABLE FOR AGGREGATE" IAGNAME             
    RETURN (16);                                                                
  END                                                                           
"ALLOCATE FI(INPUT) DA("ACTLOG") SHR REUSE"                                     
"EXECIO 0 DISKW DSNDET (OPEN"                                                   
"EXECIO 0 DISKW LOG (OPEN"                                                      
/*********************************************************************/         
/*   PARSE THE ABARS ACTIVITY LOG FOR MSGS,DSNS,COND CODES, ETC      */         
/*********************************************************************/         
"EXECIO 1 DISKR INPUT"                                                          
CDSN = 'NO'                                                                     
EXECLOG = 'NO'                                                                  
DO WHILE (RC = 0)                                                               
   PARSE PULL ABAROREC                                                          
   PUSH ABAROREC                                                                
   "EXECIO 1 DISKW LOG"                                                         
   "EXECIO 1 DISKR INPUT"                                                       
   PARSE VAR ABAROREC 2 ABLOGMSG 10                                             
   SELECT                                                                       
     WHEN ABLOGMSG = "ARC6055I" THEN  /* ENDING MSG  */                         
       LOGRC = WORD(ABAROREC,WORDS(ABAROREC))                                   
     WHEN ABLOGMSG = "ARC6061I" THEN  /* CONTROL FILE MESSAGE */                
       DO                             /* VOLSER FOLLOWS       */                
         CDSN = 'YES'                                                           
         CS = CS + 1                                                            
         PARSE VAR ABAROREC 41 CNTLDSN.CS .                                     
       END                                                                      
     WHEN DSNLIST = 'ON' THEN  /* GATHER DETAIL ON DATASETS   */                
       DO                                                                       
         PARSE VAR ABAROREC 24 DSSMSG 31                                        
         IF DSSMSG = 'ADR013I' THEN                                             
           DO                                                                   
             DSNLIST = 'OFF'                                                    
           END                                                                  
         ELSE                                                                   
           DO                                                                   
             CALL DR212 DSSMSG, ABAROREC                                        
             IF RESULT ^= '' THEN                                               
               DO                                                               
                 K = K + 1                                                      
                 DSNLIST.K = '  /*' RESULT '*/'                                 
               END                                                              
           END                                                                  
       END                                                                      
     WHEN ABLOGMSG = "ARC6064I" THEN  /* MIG/TAPE DSN FIX 9/8/94 */             
       DO                                                                       
         PARSE VAR ABAROREC 20 TMDSN .                                          
         K = K + 1                                                              
         DSNLIST.K = '  /*' TMDSN '*/'                                          
         CALL DR213 TMDSN                                                       
       END                                                                      
     WHEN ABLOGMSG = "ARC6004I" THEN  /* ACTIVE EXECUTE LOG */                  
       DO                                                                       
         EXECLOG = 'YES'                                                        
         PARSE VAR ABAROREC 24 DSSMSG 31                                        
         IF DSSMSG = 'ADR454I' THEN                                             
           DSNLIST = 'ON'                                                       
       END                                                                      
     WHEN CDSN = 'YES' THEN  /* LOOK FOR VOLSER OF CNTL DSN */                  
       DO                                                                       
         IF SYSVAR(SYSHSM) = 2060 THEN  /* ITS DFHSM 2.6 */                     
           DO                                                                   
             PARSE VAR ABAROREC CC CNTLVOL.CS .                                 
             IF CC = 0 THEN                                                     
               CDSN = 'FOUND'                                                   
           END                                                                  
         ELSE  /* ITS DFSMS/HSM V1 */                                           
           IF ABLOGMSG = "ARC6060I" THEN /* WANT THE LINE BEFORE */             
             CDSN = 'FOUND'                                                     
           ELSE                                                                 
             DO                                                                 
               PARSE VAR ABAROREC 2 NOPRE 4 .   /* FIX VOLSER 9/8/94 */         
               IF NOPRE = '  ' THEN             /* FIX VOLSER 9/8/94 */         
                 PARSE VAR ABAROREC 4 CNTLVOL.CS .        /*  9/8/94 */         
             END                                                                
       END                                                                      
     OTHERWISE                                                                  
       NOP                                                                      
  END                                                                           
END                                                                             
/************************************************************/                  
"EXECIO 0 DISKR INPUT (FINIS"                                                   
"EXECIO 0 DISKW DSNDET (FINIS"                                                  
"FREE FI(INPUT,DSNDET)"                                                         
/************************************************************/                  
R = 0                                                                           
PARSE VAR ARDSN ARPARMS '(' .                                                   
ARPARMS = ARPARMS || "'"                                                        
MDSN = SYSDSN(ARPARMS)                                                          
IF MDSN ^= 'OK' THEN                                                            
  DO                                                                            
    SAY 'ABARPOST:' ARPARMS '...' || MDSN                                       
    SAY 'ARECOVER PARMS NOT WRITTEN FOR' IAGNAME                                
    RETURN LOGRC;                                                               
  END                                                                           
/************************************************************/                  
/**IF DFHSM2.6, THE LAST DATASET IS THE INSTRUCTION DATASET**/                  
/**FOR AUDITING PURPOSES, THIS DATASET IS UNNECESSARY      **/                  
/************************************************************/                  
IF SYSVAR(SYSHSM) = 2060 THEN  /* ITS DFHSM 2.6 */                              
  DO                                                                            
    DSNLIST.K = ''                                                              
    DSNLIST.0 = K - 1                                                           
  END                                                                           
ELSE                                                                            
  DO                                                                            
/************************************************************/                  
/**IF DFSMS1.1, THE LAST TWO DATASETS ARE              @ZRC**/                  
/**THE INSTRUCTION DATASET AND THE ABACKUP LOG             **/                  
/**FOR AUDITING PURPOSES, THESE DATASETS ARE UNNECESSARY   **/                  
/************************************************************/                  
    DSNLIST.K = ''                                                              
    K = K - 1                                                                   
    DSNLIST.K = ''                                                              
    DSNLIST.0 = K - 1                                                           
  END                                                                           
IF CDSN = 'FOUND' THEN                                                          
  DO                                                                            
    CALL OUTTRAP 'CMDOUTPUT.',999                                               
    IF CS = 1 THEN                                                              
      DO                                                                        
        CALL DR211 IAGNAME TUNIT CNTLDSN.1 CNTLVOL.1 ACTLOG 1                   
        CALL DR211 IAGNAME TUNIT CNTLDSN.1 CNTLVOL.1 ACTLOG 2                   
      END                                                                       
    ELSE                                                                        
      DO                                                                        
        CALL DR211 IAGNAME TUNIT CNTLDSN.1 CNTLVOL.1 ACTLOG 1                   
        CALL DR211 IAGNAME TUNIT CNTLDSN.2 CNTLVOL.2 ACTLOG 2                   
      END                                                                       
    CALL OUTTRAP 'OFF',999                                                      
    "ALLOC FI(AROUT) DA("ARDSN") OLD"                                           
    DO WHILE (RC ^= 0 & R ^= 20)                                                
      R = R + 1                                                                 
      "WAIT 15"                                                                 
      "ALLOC FI(AROUT) DA("ARDSN") OLD"                                         
    END                                                                         
    IF RC ^= 0 THEN                                                             
      DO                                                                        
        SAY "ABARPOST: UNABLE TO ALLOCATE ARECOVER PARMS DATASET" ARDSN         
        RETURN 16;                                                              
      END                                                                       
    "EXECIO * DISKW AROUT (STEM CMDOUTPUT."                                     
    "EXECIO * DISKW AROUT (STEM DSNLIST. FINIS"                                 
    "FREE FI(AROUT)"                                                            
  END                                                                           
/************************************************************/                  
RETURN LOGRC;                                                                   
DR212:                                                                          
/************************************************************/                  
/* REXX SUBROUTINE-DR212                                    */                  
/* TAKES THE DATASETNAMES FROM THE ABACKUP LOG RECORDS      */                  
/* AND WRITES THE DSN ATTRIBUTES TO A FILE FOR LATER REPORT */                  
/************************************************************/                  
ARG DFDSSMSG, ABAROREC                                                          
RETRNDSN = ''                                                                   
IF DFDSSMSG ^= '' THEN                                                          
  RETURN RETRNDSN;                                                              
PARSE VAR ABAROREC 50 DSNAME 94                                                 
PARSE VAR ABAROREC 50 NMFLG  64                                                 
PARSE VAR ABAROREC 50 APFLG  52                                                 
DSNAMEQ = "'" || STRIP(DSNAME,T) || "'"                                         
SELECT                                                                          
 WHEN NMFLG  = 'CLUSTER NAME  '  THEN                                           
   DO                                                                           
     PARSE VAR ABAROREC 65 COMPNAME 110                                         
     PUSH COMPNAME 'CLUSTER'                                                    
    "EXECIO 1 DISKW DSNDET"                                                     
     RETRNDSN = STRIP(COMPNAME,T)                                               
   END                                                                          
 WHEN APFLG = '  ' THEN /* TEXT CONCERNING PATH AND AIX */                      
     NOP                                                                        
 WHEN NMFLG = 'CATALOG NAME  ' THEN                                             
     NOP                                                                        
 WHEN NMFLG = 'COMPONENT NAME' THEN                                             
   DO                                                                           
     PARSE VAR ABAROREC 65 COMPNAME 110                                         
     COMPNAME  = "'" || STRIP(COMPNAME,T) || "'"                                
     X = LISTDSI(COMPNAME)                                                      
     RC = OUTTRAP('CMDOPUT.',999,NOCONCAT)                                      
     "LISTC ENTRY("COMPNAME") ALLOC"                                            
     DO I = 1 TO CMDOPUT.0                                                      
       PARSE VAR CMDOPUT.I 1 PIECE1 6 JUNK 8 PIECE2 21                          
       SELECT                                                                   
         WHEN  PIECE1 = 'DATA' THEN                                             
           COMPTYPE = PIECE1                                                    
         WHEN  PIECE1 = 'INDEX' THEN                                            
           COMPTYPE = PIECE1                                                    
         WHEN  PIECE1 = 'AIX' THEN                                              
           COMPTYPE = PIECE1                                                    
         WHEN  PIECE2 = 'DATASET-OWNER' THEN                                    
           PARSE VAR CMDOPUT.I 53 CREDT 61                                      
         WHEN  PIECE2 = 'RELEASE------' THEN                                    
           PARSE VAR CMDOPUT.I 53 EXPDT 61                                      
         WHEN  PIECE2 = 'SPACE-TYPE---' THEN                                    
           DO                                                                   
             PARSE VAR CMDOPUT.I 24 ALLOTYPE 32                                 
             /* SUPPRESS THE  DASHES ('---') FROM LISTCAT */                    
             X = LASTPOS('-',ALLOTYPE) + 1                                      
             Y = LENGTH(ALLOTYPE)                                               
             ALLOTYPE = SUBSTR(ALLOTYPE,X,Y)                                    
           END                                                                  
         WHEN  PIECE2 = 'SPACE-PRI----' THEN                                    
           DO                                                                   
             PARSE VAR CMDOPUT.I 26 PRISPACE 32                                 
             /* SUPPRESS THE  DASHES ('---') FROM LISTCAT */                    
             X = LASTPOS('-',PRISPACE) + 1                                      
             Y = LENGTH(PRISPACE)                                               
             PRISPACE = SUBSTR(PRISPACE,X,Y)                                    
           END                                                                  
         WHEN  PIECE2 = 'SPACE-SEC----' THEN                                    
           DO                                                                   
             PARSE VAR CMDOPUT.I 26 SECSPACE 32                                 
             /* SUPPRESS THE  DASHES ('---') FROM LISTCAT */                    
             X = LASTPOS('-',SECSPACE) + 1                                      
             Y = LENGTH(SECSPACE)                                               
             SECSPACE = SUBSTR(SECSPACE,X,Y)                                    
           END                                                                  
         WHEN  PIECE2 = 'VOLSER-------' THEN                                    
           DO                                                                   
             PARSE VAR CMDOPUT.I 56 CISIZE 61                                   
             PARSE VAR CMDOPUT.I 80 HIALLO  90                                  
             PARSE VAR CMDOPUT.I 116 EXTENTS 119                                
             /* SUPPRESS THE  DASHES ('---') FROM LISTCAT */                    
             X = LASTPOS('-',CISIZE) + 1                                        
             Y = LENGTH(CISIZE)                                                 
             CISIZE = SUBSTR(CISIZE,X,Y)                                        
             X = LASTPOS('-',HIALLO) + 1                                        
             Y = LENGTH(HIALLO)                                                 
             HIALLO = SUBSTR(HIALLO,X,Y)                                        
             X = LASTPOS('-',EXTENTS) + 1                                       
             Y = LENGTH(EXTENTS)                                                
             EXTENTS = SUBSTR(EXTENTS,X,Y)                                      
           END                                                                  
         WHEN  PIECE2 = 'DEVTYPE------' THEN                                    
           DO                                                                   
             PARSE VAR CMDOPUT.I 56 RECPTRK 61                                  
             PARSE VAR CMDOPUT.I 80 HIUSED  90                                  
             /* SUPPRESS THE  DASHES ('---') FROM LISTCAT */                    
             X = LASTPOS('-',RECPTRK) + 1                                       
             Y = LENGTH(RECPTRK)                                                
             RECPTRK = SUBSTR(RECPTRK,X,Y)                                      
             X = LASTPOS('-',HIUSED) + 1                                        
             Y = LENGTH(HIUSED)                                                 
             HIUSED = SUBSTR(HIUSED,X,Y)                                        
           END                                                                  
         WHEN  PIECE2 = 'VOLFLAG------' THEN                                    
           PARSE VAR CMDOPUT.I 27 MULTI 32                                      
         OTHERWISE                                                              
           NOP                                                                  
       END  /*SELECT*/                                                          
     END                                                                        
     CALL OUTTRAP("OFF")                                                        
     Q = SYSDSNAME 'VSAM    ' SYSUNIT SYSVOLUME SYSDSORG,                       
         ALLOTYPE HIALLO HIUSED PRISPACE SECSPACE EXTENTS,                      
         CREDT SYSREFDATE EXPDT 'V' SYSLRECL,                                   
         CISIZE SYSPASSWORD SYSRACFA SYSUPDATED SYSTRKSCYL,                     
         RECPTRK SYSADIRBLK SYSUDIRBLK MULTI                                    
     PUSH Q                                                                     
     "EXECIO 1 DISKW DSNDET"                                                    
   END                                                                          
 OTHERWISE                                                                      
/***************************************************************/               
/* NON-VSAM DATASET                                            */               
/***************************************************************/               
     DO                                                                         
       X = LISTDSI(DSNAMEQ "NORECALL")                                          
       IF SYSREASON  = 8 THEN /* TAPE DATASET */                                
         Q = DSNAME 'NONVSAM' 'TAPE'                                            
       ELSE                                                                     
         Q = SYSDSNAME 'NONVSAM' SYSUNIT SYSVOLUME SYSDSORG,                    
           SYSUNITS SYSALLOC SYSUSED SYSPRIMARY SYSSECONDS SYSEXTENTS,          
           SYSCREATE SYSREFDATE SYSEXDATE SYSRECFM SYSLRECL,                    
           SYSBLKSIZE SYSPASSWORD SYSRACFA SYSUPDATED SYSTRKSCYL,               
           SYSBLKSTRK SYSADIRBLK SYSUDIRBLK                                     
        PUSH Q                                                                  
       "EXECIO 1 DISKW DSNDET"                                                  
       RETRNDSN = SYSDSNAME                                                     
     END                                                                        
END /* SELECT */                                                                
RETURN RETRNDSN;                                                                
DR213:                                                                          
/************************************************************/                  
/* REXX SUBROUTINE-DR213                                    */                  
/* TAKES THE DATASETNAME  FROM THE ABACKUP LOG RECORDS      */                  
/* AND WRITES THE DSN ATTRIBUTES TO A FILE FOR LATER REPORT */                  
/* (TAPE AND MIGRATED DATASETS ONLY)                        */                  
/************************************************************/                  
ARG DSNAME                                                                      
RETRNDSN = ''                                                                   
DSNAMEQ = "'" || STRIP(DSNAME,T) || "'"                                         
/***************************************************************/               
/* NON-VSAM DATASET                                            */               
/***************************************************************/               
X = LISTDSI(DSNAMEQ "NORECALL")                                                 
IF SYSREASON  = 8 THEN /* TAPE DATASET */                                       
  Q = DSNAME 'NONVSAM' 'TAPE'                                                   
ELSE                                                                            
  IF SYSREASON  = 9 THEN /* TAPE DATASET */                                     
    Q = DSNAME 'NONVSAM' 'DASD' 'MIGRAT'                                        
    ELSE                                                                        
      IF SYSREASON  = 25 THEN /* TAPE DATASET */                                
        Q = DSNAME 'NONVSAM' 'TAPE' 'MIGRAT'                                    
      ELSE                                                                      
        Q = SYSDSNAME '-ERROR-'                                                 
 PUSH Q                                                                         
"EXECIO 1 DISKW DSNDET"                                                         
RETRNDSN = SYSDSNAME                                                            
RETURN RETRNDSN;                                                                
./ ADD NAME=DR211                                                               
/*REXX                                                  @XRC*/                  
DR211:                                                                          
ARG IAGNAME TUNIT CNTLDSN CNTLVOL LOGDSN I .                                    
/************************************************************/                  
/* REXX SUBROUTINE-GENAREC                                  */                  
/* CODES THE ARECOVER STATEMENTS (VALID FOR DFHSM 2.6)      */                  
/* FOR THIS AGGREGATE                                       */                  
/************************************************************/                  
/************************************************************/                  
/* REXX SUBROUTINE-GENAREC                                  */                  
/* CODES THE ARECOVER STATEMENTS (VALID FOR DFSMSHSM 1.1)   */                  
/* FOR THIS AGGREGATE AS COMMENTS                           */                  
/************************************************************/                  
IF I = 1 THEN                                                                   
  DO                                                                            
    SAY " HSEND WAIT ARECOVER "CNTLDSN"-"                                       
    SAY " VOLUMES("CNTLVOL") " TUNIT " REPLACE EXECUTE"                         
  END                                                                           
 ELSE                                                                           
  DO                                                                            
    SAY " /*HSEND WAIT ARECOVER-*/"                                             
    SAY " /*DATASETNAME("CNTLDSN") VOLUMES("CNTLVOL")-*/"                       
    SAY " /*" TUNIT " DSCONFLICT(REPLACE) EXECUTE *DFSMSHSM11*/"                
    SAY " /* " LOGDSN "*/"                                                      
   END                                                                          
RETURN 0                                                                        
./ ADD NAME=DR22                                                                
DR22:                                                                           
ARG IAGNAME DETPRE .                                                            
STAT = MSG('OFF')                                                               
RPTDSN = "'" || DETPRE || "DSNDET." || IAGNAME || "'"                           
"ALLOC FI(DSNDET) DA("RPTDSN") OLD"                                             
"EXECIO 1 DISKR DSNDET"                                                         
LINES = 58                                                                      
PAGE = 1                                                                        
DO WHILE (RC = 0)                                                               
   IF LINES > 57 THEN                                                           
     DO                                                                         
       CALL DR221                                                               
     END                                                                        
   PARSE PULL ,                                                                 
         SYSDSNAME SYSTYP SYSUNIT SYSVOLUME SYSDSORG SYSUNITS SYSALLOC,         
         SYSUSED SYSPRIMARY SYSSECONDS SYSEXTENTS SYSCREATE,                    
         SYSREFDATE SYSEXDATE SYSRECFM SYSLRECL SYSBLKSIZE,                     
         SYSPASSWORD SYSRACFA SYSUPDATED SYSTRKSCYL SYSBLKSTRK,                 
         SYSADIRBLK SYSUDIRBLK                                                  
   PUSH " " ,                                                                   
        LEFT(SYSDSNAME,44),                                                     
        SYSUNIT,                                                                
        LEFT(SYSVOLUME,6),                                                      
        LEFT(SYSTYP,7),                                                         
        RIGHT(SYSDSORG,5),                                                      
        LEFT(SYSUNITS,8),                                                       
        RIGHT(SYSPRIMARY,5),                                                    
        RIGHT(SYSSECONDS,5),                                                    
        RIGHT(SYSEXTENTS,3),                                                    
        SYSCREATE,                                                              
        RIGHT(SYSEXDATE,8),                                                     
        LEFT(SYSRECFM,5),                                                       
        RIGHT(SYSBLKSIZE,7)                                                     
   "EXECIO 1 DISKW LOG"                                                         
   "EXECIO 1 DISKR DSNDET"                                                      
   LINES = LINES + 1                                                            
END                                                                             
"EXECIO 0 DISKW LOG   (FINIS"                                                   
"EXECIO 0 DISKR DSNDET (FINIS"                                                  
"FREE FI(DSNDET)"                                                               
"DELETE "RPTDSN                                                                 
RETURN 0;                                                                       
DR221:                                                                          
/************************************************************/                  
/* REXX SUBROUTINE-DR221                                    */                  
/* REPORT HEADING ROUTINE                                   */                  
/************************************************************/                  
PUSH "1        ABARS DSN DETAIL REPORT FOR AGGREGATE:" ,                        
      IAGNAME "      " DATE(USA) "   PAGE:" PAGE                                
"EXECIO 1 DISKW LOG"                                                            
PAGE = PAGE + 1                                                                 
PUSH "0  DATASET NAME                               ",                          
     "UNIT VOLSER DSNTYPE DSORG ALLOC   ",                                      
     "PRI   SEC   EXT CREDT    EXPDT   ",                                       
     "RECFM BLKSIZE"                                                            
"EXECIO 1 DISKW LOG"                                                            
PUSH "  -------------------------------------------- " || ,                     
     "---- ------ ------- ----- -------- ----- ----- " || ,                     
     "--- -------- -------- ----- -------"                                      
"EXECIO 1 DISKW LOG"                                                            
LINES = 4                                                                       
RETURN 0;                                                                       
./ ADD NAME=DR31                                                                
/*REXX****************************************************************/         
DR31:                                                                           
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ARECOVER PARMS DATASET                                    */         
/*                                                                   */         
/* OUTPUT: ARECOVER STATEMENT EXECUTION,                             */         
/*         ACTIVITY LOG,                                             */         
/*         LOG OF ARECOVER LOGS FOR AUDIT PURPOSES                   */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME ARDSN .                                                             
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/*********************************************************************/         
/* FIND OUT WHICH RELEASE OF DFHSM IS AVAILABLE                      */         
/*********************************************************************/         
 DFHSM = SYSVAR(SYSHSM)                                                         
/****DFHSM 2.6 IS 2060 ***********************************************/         
/****DFSMSHSM 1.1 IS 1010 ********************************************/         
/*********************************************************************/         
/*   LOCATE AND READ THE ABARS ARECOVER PARMS DATASET                */         
/*********************************************************************/         
R = 0                                                                           
IF ARDSN = "''" THEN                                                            
  DO                                                                            
    SAY "ARECPROC: NO ARECOVER PARMS DATASET FOR AGGREGATE" IAGNAME             
    RETURN (16);                                                                
  END                                                                           
"ALLOCATE FI(INPUT) DA("ARDSN") SHR"                                            
DO WHILE (RC ^= 0 & R ^= 20)                                                    
  R = R + 1                                                                     
  "WAIT 15"                                                                     
  "ALLOC FI(INPUT) DA("ARDSN") SHR"                                             
END                                                                             
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'ARECPROC: CHECK SYSLOG; CONTENTION FOR PARMS DSN' ARDSN                
    RETURN (16);                                                                
  END                                                                           
/*********************************************************************/         
/*   PARSE THE ABARS ARECOVER PARMS DATASET FOR CONTROL DSN & VOLSER */         
/*********************************************************************/         
"EXECIO * DISKR INPUT (FINIS"                                                   
"FREE FI(INPUT)"                                                                
PARSE PULL H1 H2 H3 H4                                                          
PARSE PULL H5 H6 H7 H8 H9                                                       
DELSTACK                                                                        
PARSE VAR H4 CDSN '-' .                                                         
IF DFHSM ^= 2060 THEN                                                           
  DO                                                                            
    CDSN = 'DATASETNAME(' || CDSN || ')'                                        
    IF H7 = 'REPLACE' THEN                                                      
      H7 = 'DSCONFLICT(REPLACE)'                                                
  END                                                                           
"HSEND WAIT ARECOVER" CDSN H5 H6 H7 H8                                          
SAY "HSEND WAIT ARECOVER" CDSN ,                                                
    H5 H6 H7 H8                                                                 
RETURN RC;                                                                      
./ ADD NAME=DR31                                                                
/*REXX****************************************************************/         
DR31:                                                                           
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ARECOVER PARMS DATASET                                    */         
/*                                                                   */         
/* OUTPUT: ARECOVER STATEMENT EXECUTION,                             */         
/*         ACTIVITY LOG,                                             */         
/*         LOG OF ARECOVER LOGS FOR AUDIT PURPOSES                   */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME ARDSN .                                                             
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/*********************************************************************/         
/* FIND OUT WHICH RELEASE OF DFHSM IS AVAILABLE                      */         
/*********************************************************************/         
 DFHSM = SYSVAR(SYSHSM)                                                         
/****DFHSM 2.6 IS 2060 ***********************************************/         
/****DFSMSHSM 1.1 IS 1010 ********************************************/         
/*********************************************************************/         
/*   LOCATE AND READ THE ABARS ARECOVER PARMS DATASET                */         
/*********************************************************************/         
R = 0                                                                           
IF ARDSN = "''" THEN                                                            
  DO                                                                            
    SAY "ARECPROC: NO ARECOVER PARMS DATASET FOR AGGREGATE" IAGNAME             
    RETURN (16);                                                                
  END                                                                           
"ALLOCATE FI(INPUT) DA("ARDSN") SHR"                                            
DO WHILE (RC ^= 0 & R ^= 20)                                                    
  R = R + 1                                                                     
  "WAIT 15"                                                                     
  "ALLOC FI(INPUT) DA("ARDSN") SHR"                                             
END                                                                             
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'ARECPROC: CHECK SYSLOG; CONTENTION FOR PARMS DSN' ARDSN                
    RETURN (16);                                                                
  END                                                                           
/*********************************************************************/         
/*   PARSE THE ABARS ARECOVER PARMS DATASET FOR CONTROL DSN & VOLSER */         
/*********************************************************************/         
"EXECIO * DISKR INPUT (FINIS"                                                   
"FREE FI(INPUT)"                                                                
PARSE PULL H1 H2 H3 H4                                                          
PARSE PULL H5 H6 H7 H8 H9                                                       
DELSTACK                                                                        
PARSE VAR H4 CDSN '-' .                                                         
IF DFHSM ^= 2060 THEN                                                           
  DO                                                                            
    CDSN = 'DATASETNAME(' || CDSN || ')'                                        
    IF H7 = 'REPLACE' THEN                                                      
      H7 = 'DSCONFLICT(REPLACE)'                                                
  END                                                                           
"HSEND WAIT ARECOVER" CDSN H5 H6 H7 H8                                          
SAY "HSEND WAIT ARECOVER" CDSN ,                                                
    H5 H6 H7 H8                                                                 
RETURN RC;                                                                      
./ ADD NAME=DR32                                                                
/*REXX****************************************************************/         
DR32:                                                                           
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ACTIVITY LOG DATASET,                                     */         
/*                                                                   */         
/* OUTPUT: ARECOVER DATASET STATEMENTS,                              */         
/*         ACTIVITY LOG,                                             */         
/*         DETAIL DSN DATASET                                        */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME ACTLOG LOGLOG .                                                     
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
RCLOOK = 'OFF'                                                                  
/*********************************************************************/         
/*   LOCATE AND READ THE ABARS ACTIVITY LOG                          */         
/*********************************************************************/         
IF ACTLOG = "''" THEN                                                           
  DO                                                                            
    SAY "ARECPROC: NO ARECOVER LOGS AVAILABLE FOR AGGREGATE" IAGNAME            
    RETURN (16);                                                                
  END                                                                           
"ALLOCATE FI(INPUT) DA("ACTLOG") SHR REUSE"                                     
/*********************************************************************/         
"EXECIO 0 DISKW LOG (OPEN"                                                      
/*********************************************************************/         
/*   WRITE THE ABARS ACTIVITY LOG                                    */         
/*********************************************************************/         
"EXECIO 1 DISKR INPUT"                                                          
DO WHILE (RC = 0)                                                               
   PARSE PULL ABAROREC                                                          
   PARSE VAR ABAROREC 2 ARLOGMSG 10                                             
   PUSH ABAROREC                                                                
   "EXECIO 1 DISKW LOG"                                                         
   IF ARLOGMSG = "ARC6103I" THEN  /* ENDING MSG  */                             
       RCLOOK = 'ON'                                                            
   IF RCLOOK = 'ON' THEN  /* ENDING MSG  */                                     
       LOGRC = WORD(ABAROREC,WORDS(ABAROREC))                                   
   "EXECIO 1 DISKR INPUT"                                                       
END                                                                             
/************************************************************/                  
"EXECIO 0 DISKR INPUT (FINIS"                                                   
"EXECIO 0 DISKW LOG (FINIS"                                                     
"FREE FI(INPUT)"                                                                
/** SET UP THE LOG OF LOGS **********************************/                  
R = 0                                                                           
MSDSN = SYSDSN(LOGLOG)                                                          
IF MSDSN ^= 'OK' THEN                                                           
  DO                                                                            
   "ALLOC DA("LOGLOG") NEW SPACE(2 1)"    ,                                     
     " RECFM(F B) LRECL(80) BLKSIZE(0) DSORG(PS)"                               
  END                                                                           
"ALLOC FI(LOGOLOG) DA("LOGLOG") MOD"                                            
DO WHILE (RC ^= 0 & R ^= 20)                                                    
  R = R + 1                                                                     
  "WAIT 15"                                                                     
  "ALLOC FI(LOGOLOG) DA("LOGLOG") MOD"                                          
END                                                                             
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'ARECPROC: MOD TO LOG OF LOGS DATASET UNSUCCESSFUL' LOGLOG              
    RETURN 16;                                                                  
  END                                                                           
"EXECIO 0 DISKW LOGOLOG (OPEN"                                                  
PUSH IAGNAME ' ' ACTLOG                                                         
"EXECIO 1 DISKW LOGOLOG (FINIS"                                                 
"FREE FI(LOGOLOG)"                                                              
RETURN 0;                                                                       
./ ADD NAME=DR41                                                                
DR41:                                                                           
/*REXX****************************************************************/         
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ARECOVER PARMS DATASET,                                   */         
/*         LOG OF LOGS                                               */         
/*                                                                   */         
/* OUTPUT: ARECOVER AUDIT OF DATASETS IN THE AGGREGATE               */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
ARG IAGNAME LOGLOG ARDSN .                                                      
LINES = 58                                                                      
PAGE = 1                                                                        
CALL DR411 IAGNAME LOGLOG                                                       
CALL DR412 IAGNAME ARDSN                                                        
OK = RESULT                                                                     
RETURN OK;                                                                      
DR411:                                                                          
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ARECOVER PARMS DATASET,                                   */         
/*         LOG OF LOGS                                               */         
/*                                                                   */         
/* OUTPUT: ARECOVER AUDIT OF DATASETS IN THE AGGREGATE               */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*               COPYRIGHT (C) 1993.  ALL RIGHTS RESERVED.           */         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME LOGLOG .                                                            
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/*********************************************************************/         
/* SEE HOW MANY TIMES ARECOVER HAS RAN                               */         
/*********************************************************************/         
R = 0                                                                           
"ALLOC FI(LOGOLOG) DA('"LOGLOG"') SHR"                                          
DO WHILE (RC ^= 0 & R ^= 20)                                                    
  R = R + 1                                                                     
  "WAIT 15"                                                                     
  "ALLOC FI(LOGOLOG) DA('"LOGLOG"') SHR"                                        
END                                                                             
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'DRBACKUP: ALLOCATION OF LOGS DATASET UNSUCCESSFUL' LOGLOG              
    RETURN                                                                      
  END                                                                           
"EXECIO 1 DISKR LOGOLOG"                                                        
I = 0                                                                           
DO WHILE (RC = 0)                                                               
  PARSE PULL AGNAME LOGDSN .                                                    
  IF IAGNAME = AGNAME THEN                                                      
    DO                                                                          
      I = I + 1                                                                 
      LD.I = LOGDSN                                                             
    END                                                                         
  "EXECIO 1 DISKR LOGOLOG"                                                      
END                                                                             
"EXECIO 1 DISKR LOGOLOG (FINIS"                                                 
"FREE FI(LOGOLOG)"                                                              
/******************************************************/                        
/** SET UP REPORT FILE AND HEADINGS                  **/                        
/******************************************************/                        
"EXECIO 0 DISKW AGDET (OPEN"                                                    
IF LINES > 57 THEN                                                              
  DO                                                                            
    CALL DR4111                                                                 
  END                                                                           
/******************************************************/                        
IF I = 0 THEN                                                                   
  DO                                                                            
     PUSH '    NO ARECOVER COMMANDS EXECUTED FOR AGGREGATE'                     
     "EXECIO 1 DISKW AGDET"                                                     
     PUSH '    EXPECT ALL DATASETS TO BE IN ERROR'                              
     "EXECIO 1 DISKW AGDET"                                                     
  END                                                                           
ELSE                                                                            
  DO K = 1 TO I                                                                 
    IF LINES > 57 THEN                                                          
      DO                                                                        
        CALL DR4111                                                             
      END                                                                       
     PUSH ' ' LEFT(K,3) LD.K                                                    
     "EXECIO 1 DISKW AGDET"                                                     
     LINES = LINES + 1                                                          
  END                                                                           
PUSH '    --------------------------------------------'                         
"EXECIO 1 DISKW AGDET"                                                          
PUSH '    ARECOVER FOR AGGREGATE' IAGNAME ' RAN ' I 'TIMES'                     
"EXECIO 1 DISKW AGDET"                                                          
PUSH '0   --------------------------------------------'                         
"EXECIO 1 DISKW AGDET"                                                          
LINES = LINES + 4                                                               
RETURN 0;                                                                       
/*REXX****************************************************************/         
DR412:                                                                          
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ARECOVER PARMS DATASET,                                   */         
/*         LOG OF LOGS                                               */         
/*                                                                   */         
/* OUTPUT: ARECOVER AUDIT OF DATASETS IN THE AGGREGATE               */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME ARDSN .                                                             
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
OK = 'OK'                                                                       
CDSN = 0                                                                        
EDSN = 0                                                                        
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/*********************************************************************/         
/*   LOCATE AND READ THE ABARS ARECOVER PARMS DATASET                */         
/*********************************************************************/         
IF ARDSN = "''" THEN                                                            
  DO                                                                            
    SAY "ARAUDIT: NO ARECOVER PARMS DATASET FOR AGGREGATE" IAGNAME              
    RETURN (16);                                                                
  END                                                                           
"ALLOCATE FI(INPUT) DA("ARDSN") SHR REUSE"                                      
/*********************************************************************/         
/*   PASS OVER THE FIRST 6 RECORDS (ARECPROC AND DOCUMENTATION)      */         
/*********************************************************************/         
"EXECIO 6 DISKR INPUT"                                                          
DELSTACK                                                                        
/*********************************************************************/         
"EXECIO 1 DISKR INPUT"                                                          
/*********************************************************************/         
/*   PROCESS THE REMAINING RECORDS                                   */         
/*********************************************************************/         
PUSH "0    DSN                                         ERRORS         "         
"EXECIO 1 DISKW AGDET"                                                          
PUSH "    -------------------------------------------- ---------------"         
"EXECIO 1 DISKW AGDET"                                                          
/*********************************************************************/         
DO WHILE (RC = 0)                                                               
  IF LINES > 57 THEN                                                            
      CALL DR4112                                                               
  PARSE PULL JUNK1 DSN JUNK2                                                    
  DSNAME = "'" || DSN || "'"                                                    
  X = LISTDSI(DSNAME "NORECALL")                                                
  SELECT                                                                        
  WHEN SYSREASON  = 0 THEN /* NORMAL COMPLETION */                              
    REASON = 'OK'                                                               
  WHEN SYSREASON  = 5 THEN /* DATASET NOT FOUND */                              
    REASON = 'DSN NOT CATALOGED'                                                
  WHEN SYSREASON  = 8 THEN /* TAPE DATASET */                                   
    REASON = 'OK'                                                               
  WHEN SYSREASON  = 9 THEN /* MIGRATED DATASET- DASD */                         
    REASON = 'OK'                                                               
  WHEN SYSREASON  = 12 THEN /* VSAM DATASET */                                  
    REASON = 'OK'                                                               
  WHEN SYSREASON  = 19 THEN /* MULTI VOLUME DATASET */                          
    REASON = 'OK'                                                               
  WHEN SYSREASON  = 22 THEN /* VOLUME NOT MOUNTED */                            
    REASON = 'VOLUME' SYSVOLUME 'OFFLINE'                                       
  WHEN SYSREASON  = 24 THEN /* DANGLING CATALOG POINTER */                      
      REASON = 'DSN NOT FOUND'                                                  
  WHEN SYSREASON  = 25 THEN /* MIGRATED DATASET- TAPE */                        
    REASON = 'OK'                                                               
  OTHERWISE                                                                     
    REASON = SYSREASON                                                          
  END /* SELECT */                                                              
  CDSN = CDSN + 1                                                               
  IF REASON ^= 'OK' THEN                                                        
    DO                                                                          
      PUSH '   ' LEFT(DSN,44) LEFT(REASON,20)                                   
     "EXECIO 1 DISKW AGDET"                                                     
      OK = 'ERROR'                                                              
     LINES = LINES + 1                                                          
     EDSN = EDSN + 1                                                            
  END                                                                           
"EXECIO 1 DISKR INPUT"                                                          
END                                                                             
IF OK = 'OK' THEN                                                               
    DO                                                                          
      PUSH '   NO ERRORS FOUND'                                                 
     "EXECIO 1 DISKW AGDET"                                                     
  END                                                                           
"EXECIO 0 DISKR INPUT (FINIS"                                                   
"FREE FI(INPUT)"                                                                
RETURN CDSN EDSN;                                                               
DR4111:                                                                         
/************************************************************/                  
/* REXX SUBROUTINE-DR4111                                   */                  
/* REPORT HEADING ROUTINE FOR AUDIT DETAIL                  */                  
/************************************************************/                  
PUSH "1        ABARS ARECOVER AUDIT DETAIL REPORT FOR AGGREGATE:" ,             
      IAGNAME "      " DATE(USA) "   PAGE:" PAGE                                
"EXECIO 1 DISKW AGDET"                                                          
PAGE = PAGE + 1                                                                 
PUSH "0    ACCUMULATED LOGS                           "                         
"EXECIO 1 DISKW AGDET"                                                          
PUSH "    -------------------------------------------- "                        
"EXECIO 1 DISKW AGDET"                                                          
LINES = 4                                                                       
RETURN 0;                                                                       
DR4112:                                                                         
/************************************************************/                  
/* REXX SUBROUTINE-DR4112                                   */                  
/* REPORT HEADING ROUTINE FOR AUDIT DETAIL                  */                  
/************************************************************/                  
PUSH "1        ABARS ARECOVER AUDIT DETAIL REPORT FOR AGGREGATE:" ,             
      IAGNAME "      " DATE(USA) "   PAGE:" PAGE                                
"EXECIO 1 DISKW AGDET"                                                          
PAGE = PAGE + 1                                                                 
PUSH "0    DSN                                         ERRORS         "         
"EXECIO 1 DISKW AGDET"                                                          
PUSH "    -------------------------------------------- " ,                      
     "--------------------"                                                     
"EXECIO 1 DISKW AGDET"                                                          
LINES = 4                                                                       
RETURN 0;                                                                       
./ ADD NAME=DR51                                                                
/*REXX****************************************************************/         
DR51:                                                                           
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ACTIVITY LOG DATASET,                                     */         
/*                                                                   */         
/*  OUTPUT: REPORT OF DATASET LOCATION FOR AGGREGATE DEVELOPMENT     */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME ACTLOG                                                              
/*********************************************************************/         
/* CONSTANTS AND FLAGS (GLOBAL TO SUBROUTINES)                       */         
/*********************************************************************/         
LOOK = 'OFF'                                                                    
M = 0                                                                           
SMC1 = 0   /* COUNTER FOR THE # OF DATASETS*/                                   
SMC2 = 0   /* COUNTER FOR THE # OF ARCIVE'D DATASETS*/                          
SMC3 = 0   /* COUNTER FOR THE # OF NON-ARCIVE'D DATASETS*/                      
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/* ************************************* */                                     
/* * ALLOCATES THE ABACKUP LOG DATASET** */                                     
/* * THE READS THE ABACKUP ACTIVITY   ** */                                     
/* * LOG TO LOCATE THE DATASETS       ** */                                     
/* ************************************* */                                     
/*********************************************************************/         
/*   START WITH OPENING AND READING THE ABARS VERIFY ACTIVITY LOG    */         
/*********************************************************************/         
STAT = MSG('OFF')                                                               
"ALLOCATE FI(INPUT) DA("ACTLOG") SHR REUSE"                                     
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'DRSCAN: ERROR ALLOCATING LOG DSN' ACTLOG '.  RC='RC                    
    RETURN 16;                                                                  
  END                                                                           
"EXECIO 0 DISKW ABRPT (OPEN"                                                    
/*********************************************************************/         
/*   PARSE THE ABARS ACTIVITY LOG FOR DATASET NAMES                  */         
/*********************************************************************/         
"EXECIO 1 DISKR INPUT"                                                          
DO WHILE RC = 0                                                                 
   PARSE PULL ABAROREC                                                          
   PARSE VAR ABAROREC 2 ABARMSG 10 .                                            
   IF ABARMSG = 'ARC6004I' THEN /* MSG FROM AN EXECUTE LOG (BAD)*/              
      DO                                                                        
        SAY 'DRSCAN: LOG NOT FROM ABACKUP VERIFY' LOGDSN                        
        SAY 'DRSCAN: CHECK AUTOMATED OPERATIONS, WRONG LOG' ACTLOG              
        RETURN (16);                                                            
      END                                                                       
   IF ABARMSG = 'ARC6166I' THEN /* START OF DATASET NAMES */                    
     DO /* READ THE NEXT RECORD */                                              
       "EXECIO 1 DISKR INPUT"                                                   
       PARSE PULL ABAROREC                                                      
       PARSE VAR ABAROREC ABART1 ABART2 .                                       
       IF ABART1 = 'INCLUDE/EXCLUDE' | ,                                        
          ABART2 = 'INCLUDE/EXCLUDE' THEN                                       
         LOOK = 'ON'                                                            
       ELSE                                                                     
         LOOK = 'OFF'                                                           
     END                                                                        
   IF ABARMSG = 'ARC6250I' THEN /* MSG PROCEEDING DSNS FOR DFSMSHSM */          
      LOOK = 'OFF'                                                              
   IF ABARMSG = 'ARC6055I' THEN /* MSG PROCEEDING DSNS FOR DFHSM 2.6*/          
      LOOK = 'OFF'                                                              
   IF LOOK = 'ON' THEN                                                          
/*********************************************************************/         
/*   LOOK FOR DATASET NAMES                                          */         
/*********************************************************************/         
     DO                                                                         
       PARSE VAR ABAROREC 2 ABARNULL 4 .                                        
       IF ABARNULL = '  '  THEN  /* IT IS A DATASET NAME */                     
         DO                                                                     
           SMC1 = SMC1 + 1                                                      
           PARSE VAR ABAROREC 4 AGDSN 48 .                                      
           AGDSN = STRIP(AGDSN,T)                                               
           AGGDSN = "'" || AGDSN || "'"                                         
           /* *************************** */                                    
           /* PARSE THE OUTPUT OF LISTCAT */                                    
           /* *************************** */                                    
           CALL OUTTRAP ("CMDOPUT.")                                            
           "LISTC ENTRY("AGGDSN") VOLUME"                                       
           DO J = 1 TO CMDOPUT.0                                                
             PARSE VAR CMDOPUT.J 8 VOLSER 14 .                                  
             IF VOLSER = 'VOLSER' THEN                                          
               DO                                                               
                J = CMDOPUT.0   /* END LISTCAT PROCESS */                       
                 PARSE VAR CMDOPUT.J 26 VOLUME 32 JUNK 52 DEVT 60 .             
                 /* ************************ */                                 
                 /* DO WE WANT THIS DATASET? */                                 
                 /* ************************ */                                 
                 CALL DR151 AGDSN VOLUME DEVT                                   
                 WHY = RESULT                                                   
                 IF WHY ^= '' THEN                                              
                   DO                                                           
                     PUSH '  ' LEFT(IAGNAME,8) LEFT(AGDSN,44) WHY               
                     "EXECIO 1 DISKW ABRPT"                                     
                     SMC2 = SMC2 + 1                                            
                   END                                                          
                 ELSE                                                           
                   DO                                                           
                     SMC3 = SMC3 + 1                                            
                     CALL INTDSN AGDSN                                          
                     WHERE = RESULT                                             
                     PUSH '  ' LEFT(IAGNAME,8) LEFT(AGDSN,44) WHERE             
                     "EXECIO 1 DISKW ABRPT"                                     
                   END                                                          
               END                                                              
           END                                                                  
           CALL OUTTRAP("OFF")                                                  
         END                                                                    
     END                                                                        
   "EXECIO 1 DISKR INPUT"                                                       
END                                                                             
PUSH '  DRSCAN: CANDIDATE DATASETS FOR BACKUP:' SMC1                            
"EXECIO 1 DISKW ABRPT"                                                          
PUSH "  DRSCAN: ARCHIVED DATASET EXCLUDED:" SMC2                                
"EXECIO 1 DISKW ABRPT"                                                          
PUSH '  DRSCAN: DATASETS INCLUDED:' SMC3                                        
"EXECIO 1 DISKW ABRPT"                                                          
"EXECIO 0 DISKR INPUT (FINIS"                                                   
"EXECIO 0 DISKW ABRPT (FINIS"                                                   
"FREE FI(INPUT)"                                                                
/* "DELETE" ACTLOG  */                                                          
RETURN 0;                                                                       
INTDSN:                                                                         
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ARECOVER PARMS DATASET,                                   */         
/*         LOG OF LOGS                                               */         
/*                                                                   */         
/* OUTPUT: ARECOVER AUDIT OF DATASETS IN THE AGGREGATE               */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
ARG AGDSN .                                                                     
  DSNAME = "'" || AGDSN || "'"                                                  
  X = LISTDSI(DSNAME "NORECALL")                                                
  SELECT                                                                        
  WHEN SYSREASON  = 0 THEN /* NORMAL COMPLETION */                              
    REASON = 'DSN ON DASD'                                                      
  WHEN SYSREASON  = 5 THEN /* DATASET NOT FOUND */                              
    REASON = '...DSN NOT CATALOGED'                                             
  WHEN SYSREASON  = 8 THEN /* TAPE DATASET */                                   
    REASON = '...TAPE DATASET'                                                  
  WHEN SYSREASON  = 9 THEN /* MIGRATED DATASET- DASD */                         
    REASON = '...DSN MIGRATED TO DASD'                                          
  WHEN SYSREASON  = 12 THEN /* VSAM DATASET */                                  
    REASON = 'VSAM DSN ON DASD'                                                 
  WHEN SYSREASON  = 19 THEN /* MULTI VOLUME DATASET */                          
    REASON = '...MULTI-VOLUME DSN'                                              
  WHEN SYSREASON  = 24 THEN /* DANGLING CATALOG POINTER */                      
      REASON = '...DSN NOT FOUND'                                               
  WHEN SYSREASON  = 25 THEN /* MIGRATED DATASET- TAPE */                        
    REASON = '...DSN MIGRATED TO TAPE'                                          
  OTHERWISE                                                                     
    REASON = SYSREASON                                                          
  END /* SELECT */                                                              
RETURN REASON;                                                                  
./ ADD NAME=DR61                                                                
/*REXX****************************************************************/         
DR61:                                                                           
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ACTIVITY LOG DATASET,                                     */         
/*                                                                   */         
/*  OUTPUT: REPORT OF DATASET LOCATION FOR AGGREGATE DEVELOPMENT     */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
ARG IAGNAME ACTLOG                                                              
/*********************************************************************/         
/* CONSTANTS AND FLAGS (GLOBAL TO SUBROUTINES)                       */         
/*********************************************************************/         
LOOK = 'OFF'                                                                    
M = 0                                                                           
SMC1 = 0   /* COUNTER FOR THE # OF DATASETS*/                                   
SMC2 = 0   /* COUNTER FOR THE # OF ARCIVE'D DATASETS*/                          
SMC3 = 0   /* COUNTER FOR THE # OF NON-ARCIVE'D DATASETS*/                      
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/* ************************************* */                                     
/* * ALLOCATES THE ABACKUP LOG DATASET** */                                     
/* * THE READS THE ABACKUP ACTIVITY   ** */                                     
/* * LOG TO LOCATE THE DATASETS       ** */                                     
/* ************************************* */                                     
/*********************************************************************/         
/*   START WITH OPENING AND READING THE ABARS VERIFY ACTIVITY LOG    */         
/*********************************************************************/         
STAT = MSG('OFF')                                                               
"ALLOCATE FI(INPUT) DA("ACTLOG") SHR REUSE"                                     
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'DRSEO: ERROR ALLOCATING LOG DSN' ACTLOG '.  RC='RC                     
    RETURN 16;                                                                  
  END                                                                           
"EXECIO 0 DISKW ABRPT (OPEN"                                                    
/*********************************************************************/         
/*   PARSE THE ABARS ACTIVITY LOG FOR DATASET NAMES                  */         
/*********************************************************************/         
"EXECIO 1 DISKR INPUT"                                                          
DO WHILE RC = 0                                                                 
   PARSE PULL ABAROREC                                                          
   PARSE VAR ABAROREC 2 ABARMSG 10 .                                            
   IF ABARMSG = 'ARC6004I' THEN /* MSG FROM AN EXECUTE LOG (BAD)*/              
      DO                                                                        
        SAY 'DRSEO: LOG NOT FROM ABACKUP VERIFY' LOGDSN                         
        SAY 'DRSEO: CHECK AUTOMATED OPERATIONS, WRONG LOG' ACTLOG               
        RETURN (16);                                                            
      END                                                                       
   IF ABARMSG = 'ARC6166I' THEN /* START OF DATASET NAMES */                    
     DO /* READ THE NEXT RECORD */                                              
       "EXECIO 1 DISKR INPUT"                                                   
       PARSE PULL ABAROREC                                                      
       PARSE VAR ABAROREC ABART1 ABART2 .                                       
       IF ABART1 = 'INCLUDE/EXCLUDE' | ,                                        
          ABART2 = 'INCLUDE/EXCLUDE' THEN                                       
         LOOK = 'ON'                                                            
       ELSE                                                                     
         LOOK = 'OFF'                                                           
     END                                                                        
   IF ABARMSG = 'ARC6250I' THEN /* MSG PROCEEDING DSNS FOR DFSMSHSM */          
      LOOK = 'OFF'                                                              
   IF ABARMSG = 'ARC6055I' THEN /* MSG PROCEEDING DSNS FOR DFHSM 2.6*/          
      LOOK = 'OFF'                                                              
   IF LOOK = 'ON' THEN                                                          
/*********************************************************************/         
/*   LOOK FOR DATASET NAMES                                          */         
/*********************************************************************/         
     DO                                                                         
       PARSE VAR ABAROREC 2 ABARNULL 4 .                                        
       IF ABARNULL = '  '  THEN  /* IT IS A DATASET NAME */                     
         DO                                                                     
           SMC1 = SMC1 + 1                                                      
           PARSE VAR ABAROREC 4 AGDSN 48 .                                      
           AGDSN = STRIP(AGDSN,T)                                               
           AGGDSN = "'" || AGDSN || "'"                                         
           /* *************************** */                                    
           /* PARSE THE OUTPUT OF LISTCAT */                                    
           /* *************************** */                                    
           CALL OUTTRAP ("CMDOPUT.")                                            
           "LISTC ENTRY("AGGDSN") VOLUME"                                       
           DO J = 1 TO CMDOPUT.0                                                
             PARSE VAR CMDOPUT.J 8 VOLSER 14 .                                  
             IF VOLSER = 'VOLSER' THEN                                          
               DO                                                               
                J = CMDOPUT.0   /* END LISTCAT PROCESS */                       
                 PARSE VAR CMDOPUT.J 26 VOLUME 32 JUNK 52 DEVT 60 .             
                 /* ************************ */                                 
                 /* DO WE WANT THIS DATASET? */                                 
                 /* ************************ */                                 
                 CALL DR151 AGDSN VOLUME DEVT                                   
                 WHY = RESULT                                                   
                 IF WHY ^= '' THEN                                              
                   DO                                                           
                     PUSH '  ' LEFT(IAGNAME,8) LEFT(AGDSN,44) WHY               
                     "EXECIO 1 DISKW ABRPT"                                     
                     SMC2 = SMC2 + 1                                            
                   END                                                          
                 ELSE                                                           
                   DO                                                           
                     SMC3 = SMC3 + 1                                            
                     CALL INTDSN AGDSN                                          
                     WHERE = RESULT                                             
                     IF WHERE ^= '' THEN                                        
                       DO                                                       
                         PUSH '  ' LEFT(IAGNAME,8) LEFT(AGDSN,44) ,             
                               WHERE                                            
                         "EXECIO 1 DISKW ABRPT"                                 
                       END                                                      
                   END                                                          
               END                                                              
           END                                                                  
           CALL OUTTRAP("OFF")                                                  
         END                                                                    
     END                                                                        
   "EXECIO 1 DISKR INPUT"                                                       
END                                                                             
PUSH '  DRSCAN: CANDIDATE DATASETS FOR BACKUP:' SMC1                            
"EXECIO 1 DISKW ABRPT"                                                          
PUSH "  DRSCAN: ARCHIVED DATASET EXCLUDED:" SMC2                                
"EXECIO 1 DISKW ABRPT"                                                          
PUSH '  DRSCAN: DATASETS INCLUDED:' SMC3                                        
"EXECIO 1 DISKW ABRPT"                                                          
"EXECIO 0 DISKR INPUT (FINIS"                                                   
"EXECIO 0 DISKW ABRPT (FINIS"                                                   
"FREE FI(INPUT)"                                                                
/* "DELETE" ACTLOG  */                                                          
RETURN 0;                                                                       
INTDSN:                                                                         
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ARECOVER PARMS DATASET,                                   */         
/*         LOG OF LOGS                                               */         
/*                                                                   */         
/* OUTPUT: ARECOVER AUDIT OF DATASETS IN THE AGGREGATE               */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1993,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
ARG AGDSN .                                                                     
  DSNAME = "'" || AGDSN || "'"                                                  
  X = LISTDSI(DSNAME "NORECALL")                                                
  SELECT                                                                        
  WHEN SYSREASON  = 0 THEN /* NORMAL COMPLETION */                              
    REASON = ''                                                                 
  WHEN SYSREASON  = 5 THEN /* DATASET NOT FOUND */                              
    REASON = '...DSN NOT CATALOGED'                                             
  WHEN SYSREASON  = 8 THEN /* TAPE DATASET */                                   
    REASON = '...TAPE DATASET'                                                  
  WHEN SYSREASON  = 9 THEN /* MIGRATED DATASET- DASD */                         
    REASON = '...DSN MIGRATED TO DASD'                                          
  WHEN SYSREASON  = 12 THEN /* VSAM DATASET */                                  
    REASON = ''                                                                 
  WHEN SYSREASON  = 19 THEN /* MULTI VOLUME DATASET */                          
    REASON = '...MULTI-VOLUME DSN'                                              
  WHEN SYSREASON  = 24 THEN /* DANGLING CATALOG POINTER */                      
      REASON = '...DSN NOT FOUND'                                               
  WHEN SYSREASON  = 25 THEN /* MIGRATED DATASET- TAPE */                        
    REASON = '...DSN MIGRATED TO TAPE'                                          
  OTHERWISE                                                                     
    REASON = SYSREASON                                                          
  END /* SELECT */                                                              
RETURN REASON;                                                                  
./ ADD NAME=DR70                                                                
/*REXX*/                                                                        
DR70:                                                                           
ARG AGNAME APDSN .                                                              
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         AGGREGATE PARMS DATASET                                   */         
/*                                                                   */         
/* OUTPUT: ARECSNGL PARMS VALIDATION                                 */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1995,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* *********************** */                                                   
/* * SUBROUTINE READPARM * */                                                   
/* *********************** */                                                   
/* ************************************* */                                     
/* * VALIDATES INPUT PARAMETERS       ** */                                     
/* *  AND FAILS EXEC WITH MESSAGES    ** */                                     
/* *  IF PROBLEMS ARE ENCOUNTERED.    ** */                                     
/* ************************************* */                                     
IF AGNAME  = '' THEN                                                            
  DO                                                                            
    SAY 'ARECSNGL: 1 REQUIRED PARAMETER NOT SUPPLIED'                           
    SAY 'ARECSNGL: NEED AGGREGATE NAME'                                         
    RETURN (16);                                                                
  END                                                                           
/* ************************************* */                                     
/* * INSURE WE HAVE AN AGGREGATE      ** */                                     
/* * PARM MEMBER                      ** */                                     
/* ************************************* */                                     
MSDSN = SYSDSN(APDSN)                                                           
IF MSDSN ^= 'OK' THEN                                                           
  DO /* PROBLEM  FLAG WHAT'S WRONG */                                           
    SAY 'ARECSNGL: VALID AGGREGATE PARAMETER DATASET REQUIRED'                  
    SAY 'ARECSNGL:' APDSN '...' || MSDSN                                        
    RETURN (16)                                                                 
  END                                                                           
RETURN 0;                                                                       
./ ADD NAME=DR71                                                                
DR71:                                                                           
/*REXX****************************************************************/         
/*********************************************************************/         
/*  FUNCTION: SETUP RESTART DATASET FOR SUBSET AGGREGATE RESTORE     */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ARECOVER PARMS DATASET,                                   */         
/*         INPUTDSN                                                  */         
/*         TEMPORARY HIGH LEVEL QUALIFIER                            */         
/*                                                                   */         
/* OUTPUT: ARECOVER RESTART DATASET                                  */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/* COPYRIGHT IBM CORP. 1995,2008                                 @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/*TRACE ?R*/                                                                    
ARG IAGNAME ARDSN THLQ .                                                        
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/*********************************************************************/         
/* READ THE INPUT DSN                                                */         
/*********************************************************************/         
STAT = MSG('OFF')                                                               
R = 0                                                                           
"EXECIO 1 DISKR INDSN"                                                          
I = 0                                                                           
DO WHILE (RC = 0)                                                               
  I = I + 1                                                                     
  PARSE PULL RESTDSN.I .                                                        
  LEN.I = LASTPOS('*',RESTDSN.I)                                                
  IF LEN.I = 0 THEN                                                             
     LEN.I = LENGTH(RESTDSN.I)                                                  
  ELSE                                                                          
     LEN.I = LEN.I - 1                                                          
  "EXECIO 1 DISKR INDSN"                                                        
END                                                                             
"EXECIO 1 DISKR INDSN (FINIS"                                                   
"FREE FI(INDSN)"                                                                
/*********************************************************************/         
/*   LOCATE AND READ THE ABARS ARECOVER PARMS DATASET                */         
/*********************************************************************/         
"ALLOCATE FI(INPUT) DA("ARDSN") SHR REUSE"                                      
/*********************************************************************/         
/*   PASS OVER THE FIRST 5 RECORDS (ARECPROC AND DOCUMENTATION),     */         
/*   DERIVE THE ABARS RESTART DSN, ALLOCATE AND OPEN THE RESTART DSN */         
/*********************************************************************/         
"EXECIO 5 DISKR INPUT"                                                          
DELSTACK                                                                        
"EXECIO 1 DISKR INPUT"                                                          
PARSE PULL JUNK1 DSN JUNK2                                                      
PARSE VAR DSN . VALUE(IAGNAME) DSNSUFF                                          
RSTRTDSN = DR711(IAGNAME THLQ) || IAGNAME || '.RESTART' || DSNSUFF              
"ALLOC DA('" || RSTRTDSN || ") NEW SPACE(2 1)"    ,                             
     " RECFM(F B) LRECL(80) BLKSIZE(0) DSORG(PS)"                               
"ALLOC FI(RESTART) DA('"RSTRTDSN") OLD"                                         
"EXECIO 0 DISKW RESTART (OPEN"                                                  
PUSH 'RESTART DATA SET'                                                         
"EXECIO 1 DISKW RESTART"                                                        
/*********************************************************************/         
"EXECIO 1 DISKR INPUT"                                                          
/*********************************************************************/         
/*   PROCESS THE REMAINING RECORDS FROM PARMS DATASET                */         
/*********************************************************************/         
/*********************************************************************/         
DO WHILE (RC = 0)                                                               
  PARSE PULL JUNK1 DSN JUNK2                                                    
  OMIT='N'                                                                      
  DO J=1 TO I BY 1                                                              
    IF SUBSTR(RESTDSN.J,1,LEN.J) = SUBSTR(DSN,1,LEN.J) THEN                     
       OMIT = 'Y'                                                               
  END                                                                           
  IF OMIT = 'N' THEN                                                            
    DO                                                                          
      PUSH DSN                                                                  
      "EXECIO 1 DISKW RESTART"                                                  
    END                                                                         
  "EXECIO 1 DISKR INPUT"                                                        
END                                                                             
"EXECIO 0 DISKR INPUT (FINIS"                                                   
"EXECIO 0 DISKW RESTART (FINIS"                                                 
"FREE FI(INPUT)"                                                                
"FREE FI(RESTART)"                                                              
RETURN 0;                                                                       
./ ADD NAME=DR711                                                               
/*REXX****************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  OUTPUT: DFSMS/HSM PREFIX                                         */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1995,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
GETHSMID:                                                                       
ARG IAGNAME THLQ .                                                              
/*********************************************************************/         
PRENAME = THLQ || IAGNAME                                                       
STAT = MSG('OFF')                                                               
"HSEND WAIT DISPLAY .MCVT.+C0 LENGTHS(7) ODS(" || PRENAME || ".MCVT)"           
"ALLOCATE FI(DDX) DA('" || PRENAME || ".MCVT') SHR"                             
"EXECIO 1 DISKR DDX"                                                            
PARSE PULL JUNK1                                                                
"EXECIO 1 DISKR DDX"                                                            
PARSE PULL HEXADDR HEXVAL1 HEXVAL2 .                                            
"EXECIO 0 DISKR DDX (FINIS"                                                     
"FREE FI(DDX)"                                                                  
"DELETE '" || PRENAME || ".MCVT'"                                               
HEXVAL =  HEXVAL1 || HEXVAL2                                                    
HUIDLEN = X2D(SUBSTR(HEXVAL,15,2))                                              
CHARVAL = SUBSTR(X2C(HEXVAL),1,HUIDLEN) || '.'                                  
RETURN CHARVAL                                                                  
./ ADD NAME=DR72                                                                
/*REXX****************************************************************/         
DR72:                                                                           
/*********************************************************************/         
/*  FUNCTION:                                                        */         
/*                                                                   */         
/*  INPUT: AGGREGATE NAME,                                           */         
/*         ARECOVER PARMS DATASET                                    */         
/*                                                                   */         
/* OUTPUT: ARECOVER STATEMENT EXECUTION,                             */         
/*         ACTIVITY LOG,                                             */         
/*         LOG OF ARECOVER LOGS FOR AUDIT PURPOSES                   */         
/*                                                                   */         
/*                                                                   */         
/*                                                                   */         
/*  COPYRIGHT IBM CORP. 1995,2008                                @ZRC*/         
/*                                                                   */         
/*********************************************************************/         
/* PARAMETERS PASSED TO THIS EXEC                                    */         
/*********************************************************************/         
/*TRACE ?R*/                                                                    
ARG IAGNAME ARDSN .                                                             
/*********************************************************************/         
/* CONSTANTS AND FLAGS                                               */         
/*********************************************************************/         
/*********************************************************************/         
/* FUNCTION STARTS HERE                                              */         
/*********************************************************************/         
/*********************************************************************/         
/* FIND OUT WHICH RELEASE OF DFHSM IS AVAILABLE                      */         
/*********************************************************************/         
 DFHSM = SYSVAR(SYSHSM)                                                         
/****DFHSM 2.6 IS 2060 ***********************************************/         
/****DFSMSHSM 1.1 IS 1010 ********************************************/         
/*********************************************************************/         
/*   LOCATE AND READ THE ABARS ARECOVER PARMS DATASET                */         
/*********************************************************************/         
R = 0                                                                           
IF ARDSN = "''" THEN                                                            
  DO                                                                            
    SAY "ARECSNGL: NO ARECOVER PARMS DATASET FOR AGGREGATE" IAGNAME             
    RETURN (16);                                                                
  END                                                                           
"ALLOCATE FI(INPUT) DA("ARDSN") SHR"                                            
DO WHILE (RC ^= 0 & R ^= 20)                                                    
  R = R + 1                                                                     
  "WAIT 15"                                                                     
  "ALLOC FI(INPUT) DA("ARDSN") SHR"                                             
END                                                                             
IF RC ^= 0 THEN                                                                 
  DO                                                                            
    SAY 'ARECSNGL: CHECK SYSLOG; CONTENTION FOR PARMS DSN' ARDSN                
    RETURN (16);                                                                
  END                                                                           
/*********************************************************************/         
/*   PARSE THE ABARS ARECOVER PARMS DATASET FOR CONTROL DSN & VOLSER */         
/*   USE SECOND SET OF CNTL DSN & VOLSER                             */         
/*********************************************************************/         
"EXECIO 3 DISKR INPUT "                                                         
DELSTACK                                                                        
"EXECIO 1 DISKR INPUT "                                                         
PARSE PULL 'DATASETNAME(' CDSN ')' H5 '-' .                                     
"EXECIO 1 DISKR INPUT "                                                         
PARSE PULL J1 H6 'DSCONFLICT(' H7 ') ' H8 .                                     
"EXECIO * DISKR INPUT (FINIS"                                                   
"FREE FI(INPUT)"                                                                
DELSTACK                                                                        
IF DFHSM ^= 2060 THEN                                                           
  DO                                                                            
    CDSN = 'DATASETNAME(' || CDSN || ')'                                        
    IF H7 = 'REPLACE' THEN                                                      
      H7 = 'DSCONFLICT(REPLACE)'                                                
  END                                                                           
"HSEND WAIT ARECOVER" CDSN H5 H6 H7 H8                                          
SAY "HSEND WAIT ARECOVER" CDSN ,                                                
    H5 H6 H7 H8                                                                 
RETURN RC;                                                                      
./ ADD NAME=GENMASK                                                             
/* REXX */                                                                      
/*******************************************************************/           
/* GENMASK -                                                       */           
/*    SYNTAX:   GENMASK INPUT.DATA.SET                             */           
/*                                                                 */           
/* THIS REXX EXEC WILL READ IN A FILTER LIST, AND GENERATE         */           
/* AN SUBPROGRAM THAT CAN BE INCORPORATED INTO ANY                 */           
/* DFSMSHSM EXIT, SUCH AS THE ARCMDEXT EXIT.                       */           
/*                                                                 */           
/* THE SUBPROGRAM WILL BE GENERATED IN ASSEMBLER.                  */           
/*******************************************************************/           
/*                                                                 */           
/* THE FORMAT OF THE INPUT FILE IS A SET OF MASKS, ONE MASK        */           
/* PER LINE:                                                       */           
/*                                                                 */           
/*    <MASK NUMBER> MASK <MASK VALUE>                              */           
/*                                                                 */           
/* MASK NUMBER: OPTIONAL, RANGING FROM 1-9999.  IN NO MASK         */           
/*      NUMBER SPECIFIED, WILL BE ASSIGNED ONE AUTOMATICALLY.      */           
/*      THE MASK NUMBERS MUST BE IN ASCENDING ORDER.               */           
/*                                                                 */           
/* MASK: REQUIRED, 1-44 CHARACTERS, REPRESENTING DOT-SEPARATED     */           
/*       QUALIFIERS.  EACH QUALIFIER CAN BE 1-8 VALID DATA SET     */           
/*       CHARACTERS, OR 0-7 VALID DATA SET CHARACTERS FOLLOWED     */           
/*       BY AN ASTERISK (*).  MASK VALUES OF ** AND % ARE NOT      */           
/*       SUPPORTED AT THIS TIME.                                   */           
/*                                                                 */           
/*       VALID:                    INVALID:                        */           
/*       PEARSON.*.*.*.OUTPUT      PEARSON.**.OUTPUT               */           
/*       PEARSON.GDG.G*            PEARSON.GDG.G%%V%%%%            */           
/*       PEARSON.TEST*.OUTLIST     PEARSON.TEST7.*LIST             */           
/*                                                                 */           
/*                                                                 */           
/* MASK VALUE: OPTIONAL, 0-999999999, WILL BE RETURNED WHEN A      */           
/*       DATA SET NAME MATCHES THE ASSOCIATED MASK.  IF NOT        */           
/*       SPECIFIED, A VALUE OF ZERO WILL BE RETURNED.              */           
/*                                                                 */           
/*                                                                 */           
/*******************************************************************/           
/*                                                                 */           
/* THE OUTPUT FILE CREATED WILL BE:    INPUT.DATA.SET.ASM          */           
/*                                                                 */           
/* IF ERRORS FOUND, THE OUTPUT WILL CONTAIN A LIST OF ERROR        */           
/* MESSAGES.  IF NO ERRORS FOUND, THE OUTPUT WILL CONTAIN THE      */           
/* ASSEMBLER SOURCE CODE GENERATED.                                */           
/*                                                                 */           
/*******************************************************************/           
/*                                                                 */           
/* FIRST PASS OF THE FILTER MASKS CHECKS FOR VALID VALUES.  THE    */           
/* FOLLOWING RETURN CODES ARE USED TO DENOTE ERRORS:               */           
/*                                                                 */           
/*     02 - MASK NUMBER IS NOT IN ASCENDING ORDER                  */           
/*     04 - MASK NUMBER EXCEEDS 1-9999 RANGE                       */           
/*     08 - MASK VALUE IS NON-INTEGER, OR EXCEEDS 999999999        */           
/*     10 - MASK EXCEEDS 44 CHARACTERS IN LENGTH                   */           
/*     12 - LAST CHARACTER IN MASK IS A DOT (.)                    */           
/*     16 - TWO CONSECUTIVE DOTS FOUND (EMPTY QUALIFIER)           */           
/*     20 - QUALIFIER EXCEEDS 8 CHARACTERS IN LENGTH               */           
/*     24 - MORE THAN ONE ASTERISK (*) FOUND IN QUALIFIER          */           
/*     28 - CHARACTERS FOUND AFTER ASTERISK (*) IN QUALIFIER       */           
/*                                                                 */           
/* TO HELP FIX MASK ERRORS, THE POSITION OF THE ERRONEOUS          */           
/* CHARACTER IS PROVIDED WITH THE ERROR MESSAGE.                   */           
/*                                                                 */           
/*******************************************************************/           
/*                                                                 */           
/* THE RESULTING SUBPROGRAM CAN BE INVOKED AS FOLLOWS:             */           
/*                                                                 */           
/*       BAL R14,FILTER                                            */           
/*                                                                 */           
/* ON INPUT, THE FOLLOWING REGISTERS MUST BE SPECIFIED:            */           
/*                                                                 */           
/*       REGISTER 1 POINTS TO A 16 BYTE AREA                       */           
/*         0(R1) 4-BYTE POINTER TO 44-CHARACTER DATA SET NAME      */           
/*         4(R1) 4-BYTE POINTER TO 4-BYTE MASK NUMBER              */           
/*         8(R1) 4-BYTE POINTER TO 4-BYTE MASK VALUE               */           
/*        12(R1) 4-BYTE POINTER TO 80-BYTE WORKING STORAGE AREA    */           
/*                                                                 */           
/*       REGISTER 13 POINTS TO A VALID 72-BYTE STANDARD SAVE AREA. */           
/*                                                                 */           
/* ON OUTPUT, THE FOLLOWING FIELDS ARE SET:                        */           
/*                                                                 */           
/*       IF NO MATCH FOUND, MASK NUMBER AND MASK VALUE BOTH ZERO.  */           
/*                                                                 */           
/*       IF MATCH FOUND, MASK NUMBER AND MASK VALUE ASSOCIATED     */           
/*          WITH THE FIRST MASK FOUND TO MATCH INPUT DATA SET      */           
/*                                                                 */           
/*******************************************************************/           
NUMERIC DIGITS 11                                                               
PARSE ARG DSN OPS                                                               
ERRORS = 0                                                                      
LASTMASK = 0                                                                    
NUMMASK = 0                                                                     
OUTPUT.0 = 0                                                                    
PLX = POS('PLX',OPS)                                                            
HLQS = ''; HCOUNT = 0; HLQVAL. = 0; HLQNUM. = 0                                 
DONECOUNT = "0001"; DONELIMIT = 50; MAXTEXT = 0                                 
VALUE. = 0; LOVAL=999999; HIVAL=-1                                              
CALL ANALYZE_DATA                                                               
IF ERRORS=0 THEN CALL GENERATE_CODE                                             
CALL WRITE_RESULTS                                                              
EXIT                                                                            
/*******************************************************************/           
/* ANALYZE_DATA                                                    */           
/*    READ AND PROCESS EACH RECORD OF THE INPUT FILE               */           
/*******************************************************************/           
ANALYZE_DATA:                                                                   
ALLOC_OCDS = "DA("DSN")"                                                        
'ALLOC 'ALLOC_OCDS' FI(XDATA) SHR REUSE'                                        
IF RC=0 THEN DO                                                                 
SAY 'DATA SET='DSN ' SUCCESSFULLY OPENED'                                       
"EXECIO * DISKR XDATA ( STEM" X.                                                
   DO M=1 TO X.0                                                                
      CALL PARSE_MASK                                                           
   END                                                                          
"EXECIO 0 DISKR XDATA ( FINIS"                                                  
SAY 'LINES PROCESSED = 'X.0                                                     
IF ERRORS>0 THEN CALL WRITE 'WARNING: 'ERRORS' ERRORS FOUND'                    
END                                                                             
ELSE SAY 'UNABLE TO OPEN DSN='DSN'.  SYNTAX: GENMASK DSN'                       
'FREE FI(XDATA)'                                                                
/* DETERMINE COMMON HIGH LEVEL QUALIFIERS */                                    
HLQMULT = ''                                                                    
QX = HLQS                                                                       
DO WHILE (QX \= '')                                                             
PARSE VAR QX "<"HLQ">" QX                                                       
IF HLQVAL.HLQ > 1 THEN DO                                                       
                                                                                
      HLQMULT = HLQMULT"<"HLQ">"                                                
      HCOUNT = HCOUNT + 1                                                       
      HLQNUM.HLQ = HCOUNT                                                       
   END                                                                          
END                                                                             
RETURN                                                                          
/*******************************************************************/           
PARSE_MASK:                                                                     
   PARSE VAR X.M MASKN MASK MASKV .                                             
   IF DATATYPE(MASKN,'WHOLE')=0 THEN DO                                         
      MASKV = MASK                                                              
      MASK = MASKN                                                              
      MASKN = LASTMASK + 1                                                      
      END                                                                       
   ELSE                                                                         
      MASKN = MASKN + 0                                                         
   IF MASKV='' THEN MASKV=0                                                     
   IF MASKN>0 & MASKN<= LASTMASK THEN DO                                        
     CALL WRITE "LINE "M": RC=02 INVALID MASK NUMBER ("MASKN")"                 
      ERRORS = ERRORS + 1                                                       
      END                                                                       
   ELSE IF MASKN=0 | MASKN>9999 THEN DO                                         
     CALL WRITE "LINE "M": RC=04 INVALID MASK NUMBER ("MASKN")"                 
      ERRORS = ERRORS + 1                                                       
      END                                                                       
   ELSE LASTMASK = MASKN                                                        
   IF DATATYPE(MASKV,'WHOLE')=0 | MASKV>999999999 THEN DO                       
     CALL WRITE "LINE "M": RC=08 INVALID MASK VALUE ("MASKV")"                  
      ERRORS = ERRORS + 1                                                       
      END                                                                       
   IF LENGTH(MASK)>44 THEN DO                                                   
     CALL WRITE "LINE "M": RC=10 INVALID MASK (",                               
             LEFT(MASK,30)") POSITION="LENGTH(MASK)                             
      ERRORS = ERRORS + 1                                                       
      END                                                                       
   SIZE=0; NUMSTAR=0; RC=0                                                      
DO N=1 TO LENGTH(MASK) WHILE(RC=0)                                              
   CHAR=SUBSTR(MASK,N,1)                                                        
   SELECT;                                                                      
      WHEN(CHAR='.') THEN DO                                                    
         IF N=LENGTH(MASK) THEN RC=12                                           
         ELSE IF SIZE<1 THEN RC=16                                              
         ELSE IF SIZE>8 THEN RC=20                                              
         SIZE=0                                                                 
         NUMSTAR=0                                                              
         END                                                                    
      WHEN(CHAR='*') THEN DO                                                    
         IF NUMSTAR>0 THEN RC=24                                                
         NUMSTAR=NUMSTAR+1                                                      
         SIZE=SIZE+1                                                            
         END                                                                    
      OTHERWISE DO                                                              
         IF NUMSTAR>0 THEN RC=28                                                
         SIZE=SIZE+1                                                            
         END                                                                    
   END                                                                          
   IF RC>0 THEN DO                                                              
     CALL WRITE "LINE "M": RC="RC" INVALID MASK (",                             
             LEFT(MASK,30)") POSITION="N                                        
      ERRORS = ERRORS + 1                                                       
      END                                                                       
END                                                                             
NUMMASK = NUMMASK + 1                                                           
MNUM.NUMMASK = RIGHT(MASKN,4,'0')                                               
MTEXT.NUMMASK = MASK                                                            
MVAL.NUMMASK = MASKV+0                                                          
IF MVAL.NUMMASK <=99999 THEN DO                                                 
VAL = MVAL.NUMMASK                                                              
VALUE.VAL=VALUE.VAL+1                                                           
IF VAL<LOVAL THEN LOVAL=VAL                                                     
IF VAL>HIVAL THEN HIVAL=VAL                                                     
END                                                                             
KDOT=POS('.',MASK)                                                              
KSTAR=POS('*',MASK)                                                             
IF KDOT>1 & (KSTAR=0 | KSTAR>KDOT) THEN DO                                      
   HLQ = LEFT(MASK,KDOT-1)                                                      
   HLQVAL.HLQ=HLQVAL.HLQ+1                                                      
   IF HLQVAL.HLQ=1 THEN DO                                                      
      HLQS = HLQS"<"HLQ">"                                                      
      END                                                                       
END                                                                             
RETURN                                                                          
/*******************************************************************/           
GENERATE_CODE:                                                                  
QX=HLQS                                                                         
DO WHILE QX\=''                                                                 
   PARSE VAR QX "<"HX">" QX                                                     
   END                                                                          
COMMENT_TAG = COPIES("*",71)                                                    
TCOUNT = 0; TC.0 = 0                                                            
CALL FRONT_MATTER                                                               
DO Q=1 TO NUMMASK                                                               
MASK = STRIP(MTEXT.Q)                                                           
CALL COMMENT "MASK "MNUM.Q MASK "VALUE="MVAL.Q                                  
NUMSTAR=0                                                                       
NUMDOT=0                                                                        
MASK = STRIP(MASK)                                                              
LENMASK=LENGTH(MASK)                                                            
STARTER = "IF"                                                                  
DO N=1 TO LENMASK                                                               
   CHAR=SUBSTR(MASK,N,1)                                                        
   IF CHAR='*' THEN DO                                                          
      NUMSTAR=NUMSTAR+1                                                         
      STAR.NUMSTAR=N                                                            
      END                                                                       
   IF CHAR='.' THEN DO                                                          
      NUMDOT=NUMDOT+1                                                           
      DOT.NUMDOT=N                                                              
      END                                                                       
END                                                                             
IF PLX THEN DO                                                                  
   IF Q>1 THEN CALL WRITE "ELSE"                                                
END                                                                             
ELSE CALL WRITE "MASK"MNUM.Q" DS    0H"                                         
HLQ=''                                                                          
KDOT = POS('.',MASK)                                                            
IF KDOT>1 THEN DO                                                               
   HLQ=LEFT(MASK,KDOT-1)                                                        
   IF HLQVAL.HLQ<2 THEN HLQ=''                                                  
END                                                                             
SELECT;                                                                         
/* FULLY QUALIFIED */                                                           
WHEN NUMSTAR=0 THEN DO                                                          
   IF LENGTH(MASK)<44 THEN MASK=MASK||' '                                       
   IF HLQ='' THEN CALL DATA_SET_POSITION 1,MASK                                 
   ELSE DO                                                                      
      CALL DATA_SET_POSITION 1,HLQ||'.'                                         
      KLEN = LENGTH(HLQ)+2                                                      
      CALL DATA_SET_POSITION KLEN,SUBSTR(MASK,KLEN)                             
   END                                                                          
   CALL SET_VALUES                                                              
END                                                                             
/* NO HARD CHARACTERS: *.*.*.*             */                                   
WHEN (NUMSTAR+NUMDOT)=LENMASK THEN DO                                           
   CALL NUMBER_QUALIFIERS                                                       
   CALL SET_VALUES                                                              
      END                                                                       
OTHERWISE DO                                                                    
   CALL NUMBER_QUALIFIERS                                                       
   DO R=1 TO NUMSTAR                                                            
   IF R= 1 & STAR.1>1 THEN DO                                                   
      KLEN = LENGTH(HLQ)+2                                                      
      IF HLQ='' | (STAR.1=KLEN) THEN DO                                         
        CALL DATA_SET_POSITION 1,LEFT(MASK,STAR.1-1)                            
        END                                                                     
      ELSE DO                                                                   
        CALL DATA_SET_POSITION 1,HLQ||'.'                                       
        CALL DATA_SET_POSITION KLEN,SUBSTR(MASK,KLEN,STAR.1-KLEN)               
        END                                                                     
      END                                                                       
   IF R<NUMSTAR THEN DO                                                         
      RX=R+1                                                                    
      SECTION=SUBSTR(MASK,(STAR.R)+1,(STAR.RX)-(STAR.R)-1)                      
      DJ=0                                                                      
      DO  J=1 TO NUMDOT WHILE(DJ=0)                                             
          IF DOT.J>STAR.R THEN DJ=J                                             
          END                                                                   
      IF SECTION\='.' THEN ,                                                    
         CALL DATA_SET_POSITION "DOT("DJ")",SECTION                             
      END                                                                       
   IF R=NUMSTAR & STAR.R<LENMASK THEN DO                                        
      K=LENMASK-STAR.R;                                                         
      DK="LASTPOS-"||(K-1)                                                      
      CALL DATA_SET_POSITION DK,RIGHT(MASK,K)                                   
      END                                                                       
   END                                                                          
   CALL SET_VALUES                                                              
   END                                                                          
END                                                                             
SAY "Q= "Q                                                                      
IF Q<NUMMASK & (Q//DONELIMIT)=0 THEN DO                                         
   CALL COMMENT "END OF SECTION "DONECOUNT                                      
   CALL WRITE "         B     STEP"DONECOUNT                                    
   CALL TEXT_CONSTANTS                                                          
   CALL WRITE "STEP"DONECOUNT" DS    0H"                                        
   CALL WRITE "         BALR  P9,0"                                             
   CALL WRITE "         USING *,P9"                                             
   DONECOUNT = RIGHT(DONECOUNT+1,4,'0')                                         
   END                                                                          
END                                                                             
CALL BACK_MATTER                                                                
RETURN                                                                          
COMMENT:                                                                        
  CALL WRITE COMMENT_TAG                                                        
  CALL WRITE "* "ARG(1)                                                         
  CALL WRITE COMMENT_TAG                                                        
RETURN                                                                          
NUMBER_QUALIFIERS:                                                              
NQ= NUMDOT+1                                                                    
IF PLX THEN DO                                                                  
  CALL WRITE STARTER" NUMQUAL="NQ                                               
  IF STARTER="IF" THEN STARTER="   &"                                           
END                                                                             
ELSE DO                                                                         
  CALL WRITE "         LA    P7,"NQ                                             
  CALL WRITE "         CR    NUMQUAL,P7"                                        
  CALL WRITE "         BNE   NEXT"MNUM.Q                                        
END                                                                             
RETURN                                                                          
DATA_SET_POSITION:                                                              
   STARTPOS = ARG(1)                                                            
   TEXTVALUE = ARG(2)                                                           
   TEXTLEN = LENGTH(TEXTVALUE)                                                  
IF PLX THEN DO                                                                  
  CALL WRITE STARTER" DSN("STARTPOS"::"TEXTLEN")='"TEXTVALUE"'"                 
  IF STARTER="IF" THEN STARTER="   &"                                           
END                                                                             
ELSE DO                                                                         
   DSNREG = "DSN"                                                               
  IF STARTPOS=1 & POS('.',TEXTVALUE)=TEXTLEN THEN DO                            
     HLQ=LEFT(TEXTVALUE,TEXTLEN-1)                                              
     TCO = "CQ"||RIGHT(HLQNUM.HLQ,6,"0")                                        
     END                                                                        
  ELSE DO                                                                       
     UN=0                                                                       
     DO U=1 TO TCOUNT                                                           
        IF TC.U=TEXTVALUE THEN UN=U                                             
     END                                                                        
     IF UN=0 THEN DO                                                            
        TCOUNT = TCOUNT + 1                                                     
        TC.TCOUNT = TEXTVALUE                                                   
        UN=TCOUNT                                                               
        END                                                                     
     TCO = "CT"||RIGHT(UN+MAXTEXT,6,"0")                                        
     END                                                                        
  IF LEFT(STARTPOS,3)='DOT' THEN DO                                             
  PARSE VAR STARTPOS "DOT("DOTPOS")" .                                          
  CALL WRITE "         L     P8,"||(12+(DOTPOS*4))||"(,WORK)"                   
  DSNREG = "P8"                                                                 
  NEWPOS = "0"                                                                  
  END                                                                           
  ELSE IF LEFT(STARTPOS,3)='LAS' THEN DO                                        
  PARSE VAR STARTPOS "LASTPOS-"LP  .                                            
  CALL WRITE "         LR    P8,DSN"                                            
  CALL WRITE "         ALR   P8,LASTPOS"                                        
  CALL WRITE "         LA    P6,"LP+1                                           
  CALL WRITE "         SLR   P8,P6"                                             
  DSNREG = "P8"                                                                 
  NEWPOS = "0"                                                                  
  END                                                                           
  ELSE NEWPOS = STARTPOS-1                                                      
  CALL WRITE "         CLC   "NEWPOS"("TEXTLEN","DSNREG"),"TCO                  
  CALL WRITE "         BNE   NEXT"MNUM.Q                                        
END                                                                             
RETURN                                                                          
SET_VALUES:                                                                     
IF PLX THEN DO                                                                  
  SETTINGS = "MASK="MNUM.Q";"                                                   
  IF MVAL.Q > 0 THEN SETTINGS=SETTINGS||" VALUE="MVAL.Q";"                      
  CALL WRITE "   THEN BEGIN; "SETTINGS" END;"                                   
END                                                                             
ELSE DO                                                                         
  CALL WRITE "         LA    MASK,"MNUM.Q                                       
  THISVAL=MVAL.Q                                                                
  IF VALUE.THISVAL > 1 THEN DO                                                  
     CALL WRITE "         B     SET"RIGHT(THISVAL,5,'0')                        
  END                                                                           
  ELSE DO                                                                       
  IF MVAL.Q > 0 THEN DO                                                         
     CALL WRITE "         LA    VALUE,"MVAL.Q                                   
     END                                                                        
  CALL WRITE "         B     DONE"                                              
  END                                                                           
  CALL WRITE "NEXT"MNUM.Q" DS    0H"                                            
END                                                                             
RETURN                                                                          
/*******************************************************************/           
WRITE:                                                                          
N=OUTPUT.0 + 1                                                                  
LINE=ARG(1)                                                                     
IF PLX THEN DO                                                                  
   IF LEFT(LINE,1)="*" THEN LINE=" /"||LEFT(LINE,66)||"*/"                      
   ELSE IF LEFT(LINE,1)\=" " THEN LINE=" "||LEFT(LINE,71)                       
END                                                                             
OUTPUT.N = LINE                                                                 
OUTPUT.0 = N                                                                    
RETURN                                                                          
/*******************************************************************/           
WRITE_RESULTS:                                                                  
EXT='.ASM'                                                                      
IF PLX THEN EXT='.PLX'                                                          
IF LEFT(DSN,1)="'" THEN DO                                                      
   PARSE VAR DSN "'" BASE "'" .                                                 
   OUTDSN = "'"BASE||EXT"'"                                                     
   END                                                                          
ELSE OUTDSN = DSN||EXT                                                          
IF SYSDSN(OUTDSN) = 'OK' THEN OPS='OLD REUSE'                                   
   ELSE OPS="NEW CATALOG TRACKS SPACE(1 1) ",                                   
        "RECFM(F B) LRECL(80) DSORG(PS)"                                        
"ALLOC FI(OUTDATA) DA("OUTDSN") "OPS                                            
'EXECIO 'OUTPUT.0' DISKW OUTDATA ( FINIS STEM' OUTPUT.                          
'FREE FI(OUTDATA)'                                                              
SAY "DSN= "OUTDSN" CREATED."                                                    
RETURN                                                                          
FRONT_MATTER:                                                                   
CALL WRITE COMMENT_TAG                                                          
CALL WRITE "*        SUBPROGRAM FILTER"                                         
CALL WRITE "*        GENERATED:   "DATE()                                       
DSNQ = DSN                                                                      
IF LEFT(DSN,1)="'" THEN PARSE VAR DSN "'" DSNQ "'"                              
CALL WRITE "*        FILTER LIST: "DSNQ                                         
CALL WRITE "* "                                                                 
CALL WRITE "* INPUT = PARAMETER LIST ITEMS USED ARE:"                           
CALL WRITE "*     R1 POINTS TO A PARAMETER LIST     "                           
CALL WRITE "*        0(R1) IS @ OF DATA SET NAME,   "                           
CALL WRITE "*              LEFT-JUSTIFIED WITH BLANKS "                         
CALL WRITE "*        4(R1) IS @ OF WORK AREA, 200 BYTES "                       
CALL WRITE "*                                           "                       
CALL WRITE "* EXIT-NORMAL = WORK AREA CONTAINS RESULTS: "                       
CALL WRITE "*        0(WORKAREA) IS MASK NUMBER,        "                       
CALL WRITE "*                    ZERO IF NO MATCH FOUND "                       
CALL WRITE "*        4(WORKAREA) IS VALUE FOR MASK,     "                       
CALL WRITE "*                    ZERO IF NO MATCH FOUND "                       
CALL WRITE COMMENT_TAG                                                          
IF PLX THEN DO                                                                  
CALL WRITE "FILTER: PROCEDURE(DSN,WORKAREA);     "                              
CALL WRITE "                                     "                              
CALL WRITE "DECLARE                              "                              
CALL WRITE "  DSN CHAR(44),                      "                              
CALL WRITE "  1 WORKSPACE CHAR(200),             "                              
CALL WRITE "    3 MASK FIXED(31),                "                              
CALL WRITE "    3 VALUE FIXED(31),               "                              
CALL WRITE "    3 NUMQUAL FIXED(31),             "                              
CALL WRITE "    3 LASTPOS FIXED(31),             "                              
CALL WRITE "    3 DOT(1:20) FIXED(31),           "                              
CALL WRITE "  N FIXED(31);                       "                              
CALL WRITE "WORKAREA=''B;                        "                              
CALL WRITE "NUMQUAL=1;                           "                              
CALL WRITE "DO N=1 TO 44;                        "                              
CALL WRITE " IF DSN(N)^=' ' THEN LASTPOS=N;      "                              
CALL WRITE " IF DSN(N)='.' THEN DO;              "                              
CALL WRITE "    DOT(NUMQUAL)=N;                  "                              
CALL WRITE "    NUMQUAL=NUMQUAL+1;               "                              
CALL WRITE "    END;                             "                              
CALL WRITE "END;                                 "                              
END                                                                             
ELSE DO                                                                         
CALL WRITE "FILTER   DS    0H            "                                      
CALL WRITE "         STM   P14,P12,12(P13)  "                                   
CALL WRITE "         BALR  P12,0            "                                   
CALL WRITE "         USING *,P12            "                                   
CALL COMMENT "       INITIALIZE VARIABLES"                                      
CALL WRITE "         LM    DSN,WORK,0(PARMS)     "                              
CALL WRITE "         XC    0(200,WORK),0(WORK)   "                              
CALL WRITE "         USING WORKAREA,WORK         "                              
CALL WRITE "         LM    MASK,LASTPOS,0(WORK)  "                              
CALL WRITE "         LA    P7,MAXLEN             "                              
CALL WRITE "FILTER01 LR    P6,DSN                "                              
CALL WRITE "         ALR   P6,LASTPOS            "                              
CALL WRITE "         CLI   0(P6),BLANK           "                              
CALL WRITE "         BC    B'1100',FILTER03      "                              
CALL WRITE "         CLI   0(P6),PERIOD          "                              
CALL WRITE "         BNE   FILTER02              "                              
CALL WRITE "         LR    P8,NUMQUAL            "                              
CALL WRITE "         SLA   P8,2                  "                              
CALL WRITE "         ST    P6,DOT(P8)            "                              
CALL WRITE "         LA    NUMQUAL,1(NUMQUAL)    "                              
CALL WRITE "FILTER02 LA    LASTPOS,1(LASTPOS)    "                              
CALL WRITE "         CLR   LASTPOS,P7            "                              
CALL WRITE "         BM    FILTER01              "                              
CALL WRITE "FILTER03 LA    NUMQUAL,1(NUMQUAL)    "                              
CALL WRITE "         B     START"                                               
CALL COMMENT "   SAVE RESULTS                    "                              
IF HIVAL>0 THEN DO Q=LOVAL TO HIVAL                                             
      IF VALUE.Q>1 THEN DO                                                      
      CALL WRITE "SET"RIGHT(Q,5,'0')" LA    VALUE,"Q                            
      IF Q<HIVAL THEN DO                                                        
        CALL WRITE "         B     DONE"                                        
        END                                                                     
      END                                                                       
END                                                                             
CALL WRITE "DONE     STM   MASK,VALUE,WORKAREA "                                
CALL COMMENT "   RETURN REGISTERS BACK TO ORIGINAL VALUES"                      
CALL WRITE "         LM    P14,P12,12(P13)        "                             
CALL WRITE "         BR    P14                  "                               
CALL COMMENT "   COMMON HIGH LEVEL QUALIFIERS   "                               
HLQUALS = HLQS                                                                  
DO WHILE(HLQUALS\='')                                                           
   PARSE VAR HLQUALS '<'HLQ'>' HLQUALS                                          
   IF HLQVAL.HLQ > 1 THEN DO                                                    
     CJ="CQ"RIGHT(HLQNUM.HLQ,6,'0')                                             
     CALL WRITE CJ" DC    CL"LENGTH(HLQ)+1"'"HLQ".'"                            
   END                                                                          
END                                                                             
CALL WRITE "START    DS    0H "                                                 
CALL WRITE "         BALR  P9,0                   "                             
CALL WRITE "         USING *,P9                   "                             
END                                                                             
RETURN                                                                          
BACK_MATTER:                                                                    
IF PLX THEN DO                                                                  
CALL WRITE "  END FILTER;  "                                                    
END                                                                             
ELSE DO                                                                         
CALL WRITE "         B     DONE"                                                
CALL TEXT_CONSTANTS                                                             
CALL COMMENT "   LOCAL REGISTER VARIABLES   "                                   
CALL WRITE "PARMS    EQU   1             "                                      
CALL WRITE "DSN      EQU   10            "                                      
CALL WRITE "WORK     EQU   11            "                                      
CALL WRITE "MASK     EQU   2             "                                      
CALL WRITE "VALUE    EQU   3             "                                      
CALL WRITE "NUMQUAL  EQU   4             "                                      
CALL WRITE "LASTPOS  EQU   5             "                                      
CALL COMMENT "       IMMEDIATE CONSTANTS       "                                
CALL WRITE "MAXLEN   EQU   44            "                                      
CALL WRITE "BLANK    EQU   C' '          "                                      
CALL WRITE "PERIOD   EQU   C'.'          "                                      
CALL COMMENT "       GENERAL PURPOSE REGISTERS "                                
CALL WRITE "P6       EQU   6             "                                      
CALL WRITE "P7       EQU   7             "                                      
CALL WRITE "P8       EQU   8             "                                      
CALL WRITE "P9       EQU   9             "                                      
CALL WRITE "P12      EQU   12            "                                      
CALL WRITE "P13      EQU   13            "                                      
CALL WRITE "P14      EQU   14            "                                      
CALL COMMENT "       DATA CONTROL SECTION      "                                
CALL WRITE "WORKAREA DSECT                     "                                
CALL WRITE "         DS    0CL200              "                                
CALL WRITE "         DS    F       MASK NUMBER "                                
CALL WRITE "         DS    F       MASK VALUE  "                                
CALL WRITE "         DS    F                   "                                
CALL WRITE "         DS    F                   "                                
CALL WRITE "DOT      DS    20C                 "                                
CALL WRITE "         END                       "                                
END                                                                             
RETURN                                                                          
TEXT_CONSTANTS:                                                                 
CALL COMMENT "   CHARACTER TEXT CONSTANTS   "                                   
DO J=1 TO TCOUNT                                                                
   FR=0; MD=0; EQ=0                                                             
   DO P=1 TO J-1                                                                
      IF POS(TC.J,TC.P)>1 THEN MD=P                                             
      IF POS(TC.J,TC.P)=1 THEN FR=P                                             
      IF TC.J = TC.P THEN EQ=P                                                  
   END                                                                          
   CJ="CT"RIGHT(J+MAXTEXT,6,'0')                                                
   IF EQ>0 THEN CALL WRITE CJ" EQU   CT"RIGHT(EQ+MAXTEXT,6,'0')                 
   ELSE IF FR>0 THEN DO                                                         
        FJ=RIGHT(TC.FR+MAXTEXT,6,"0")                                           
        CALL WRITE CJ" EQU   CT"FJ","LENGTH(TC.FR)",C'C'"                       
        END                                                                     
   ELSE IF MD>0 THEN DO                                                         
        ML=LENGTH(TC.J)                                                         
        MO=POS(TC.J,TC.MD)-1                                                    
        MJ=RIGHT(MD+MAXTEXT,6,'0')                                              
        CALL WRITE CJ" EQU   CT"||MJ"+"MO","ML",C'C'"                           
        END                                                                     
   ELSE CALL WRITE CJ" DC    CL"LENGTH(TC.J)"'"TC.J"'"                          
END                                                                             
MAXTEXT = MAXTEXT + TCOUNT                                                      
TCOUNT = 0                                                                      
RETURN                                                                          
./ ADD NAME=QUERYSET                                                            
   /* REXX                                               @XRC*/                 
   /**********************************************************/                 
   /*                                                        */                 
   /* QUERYSET - THIS SAMPLE REXX EXEC DEMONSTRATES THE  @XRC*/                 
   /*            4-BYTE CONSOLE ID AND CART SUPPORT          */                 
   /*            (COMMAND AND RESPONSE TOKEN) IN DFSMSHSM.   */                 
   /*                                                        */                 
   /*            THIS EXEC ISSUES A QUERY SETSYS VIA THE     */                 
   /*            EXTENDED CONSOLE CONTROL, AND THE RESULTS   */                 
   /*            ARE RETURNED IN VARIABLES THAT CAN THEN     */                 
   /*            BE PARSED OR SCANNED FOR SPECIFIC VALUES.   */                 
   /*                                                        */                 
   /*            VARIABLES: HSMID IS THE SYS1.PROCLIB(HSMID) */                 
   /*            USED TO START DFSMSHSM WITH ON THIS SYSTEM. */                 
   /*                                                        */                 
   /**********************************************************/                 
      HSMID = 'HSMM'                                                            
      MDISP=SYSVAR(SOLDISP)                                                     
      "CONSPROF SOLDISPLAY(NO)"                                                 
      "CONSOLE ACTIVATE"                                                        
      ADDRESS CONSOLE "CART HSM"                                                
                                                                                
      J = 0                                                                     
      N = 0                                                                     
      MSGHSM = 0                                                                
                                                                                
      ADDRESS CONSOLE "F "HSMID",Q SETSYS"                                      
      DO WHILE MSGHSM = 0                        /* 11 */                       
         MSGHSM = GETMSG('RESP.','SOL','HSM',,22)                               
         IF MSGHSM = 0 THEN DO                   /* 10 */                       
             N = N+1                                                            
             DO I = 1 TO RESP.0                 /* 9 */                         
                K = I+J                                                         
                WTO.K = RESP.I                                                  
             END                                /* 9 */                         
           J = J+RESP.0                                                         
       END                                     /* 10 */                         
                                                                                
     END                                        /* 11 */                        
                                                                                
     "CONSOLE DEACTIVATE"                                                       
     "CONSPROF SOLDISPLAY("MDISP")"                                             
     COUNT=J                                                                    
     SAY "LINE-COUNT = "COUNT                                                   
     DO I = 1 TO COUNT                                                          
     SAY "LINE"I" = "WTO.I                                                      
     END                                                                        
./ ADD NAME=SCANBLOG                                                            
/* REXX                                                  @XRC*/                 
   /**********************************************************/                 
   /*                                                        */                 
   /* SCANBLOG - THIS SAMPLE REXX EXEC CAN SCAN SEVERAL      */                 
   /*            DAYS' WORTH OF BACKUP ACTIVITY LOGS AND     */                 
   /*            SUMMARIZE THE RESULTS.                  @XRC*/                 
   /*                                                        */                 
   /**********************************************************/                 
OUTDSN = "'HSMACT.SCAN.BAKLOG'"                                                 
NOTIME= '**:**:**'                                                              
NUMREC = 1000                                                                   
NUM = 0                                                                         
MSGS = ''                                                                       
   /* THIS IS SEVEN DAYS CONTIGUOUS ACTIVITY */                                 
    D.1  = "'HSMACT.HB.BAKLOG.D98089.T160139'"                                  
    D.2  = "'HSMACT.HB.BAKLOG.D98089.T185134'"                                  
    D.3  = "'HSMACT.HB.BAKLOG.D98090.T164202'"                                  
    D.4  = "'HSMACT.HB.BAKLOG.D98090.T184203'"                                  
    D.5  = "'HSMACT.HB.BAKLOG.D98091.T165216'"                                  
    D.6  = "'HSMACT.HB.BAKLOG.D98091.T185533'"                                  
    D.7  = "'HSMACT.HB.BAKLOG.D98092.T170123'"                                  
    D.8 = "'HSMACT.HB.BAKLOG.D98092.T180208'"                                   
    D.9 = "'HSMACT.HB.BAKLOG.D98093.T164227'"                                   
    D.10 = "'HSMACT.HB.BAKLOG.D98093.T172520'"                                  
    D.11 = "'HSMACT.HB.BAKLOG.D98094.T170020'"                                  
    D.12 = "'HSMACT.HB.BAKLOG.D98094.T171135'"                                  
    D.13 = "'HSMACT.HB.BAKLOG.D98095.T044203'"                                  
    D.14 = "'HSMACT.HB.BAKLOG.D98095.T131935'"                                  
D.0 = 14                                                                        
Y.0 = 0                                                                         
DO N=1 TO 4; DIST.N=0; END                                                      
EBV = ''; ECD=''; EMB= ''; EBM = ''; EVO=''; EBU=''                             
"FREE F(IN)"                                                                    
"FREE F(OUT)"                                                                   
"DELETE "OUTDSN                                                                 
OPS = "NEW CATALOG SPACE(1 1) TRACKS RECFM(F B) LRECL(80)"                      
"ALLOC F(OUT) DA("OUTDSN") "OPS                                                 
"MAKEBUF"                                                                       
DO Q = 1 TO D.0                                                                 
"ALLOC F(IN) DA("D.Q") SHR REUSE"                                               
CALL SENDOUT "DATA SET ANALYZED: "D.Q                                           
"EXECIO "NUMREC" DISKR IN (STEM "X.                                             
DO WHILE X.0>0                                                                  
   NUM = NUM + X.0                                                              
   DO N=1 TO X.0                                                                
     CALL ANALYZE                                                               
   END                                                                          
   "EXECIO "NUMREC" DISKR IN (STEM "X.                                          
END                                                                             
"EXECIO 0 DISKR IN (FINIS"                                                      
"FREE F(IN)"                                                                    
END                                                                             
"DROPBUF"                                                                       
                                                                                
CALL SENDOUT "NUMBER OF LINES READ: "NUM                                        
/*                                                                              
DO WHILE MSGS \= ''                                                             
   PARSE VAR MSGS MSG MSGS                                                      
   CALL SENDOUT "NUMBER OF "MSG" ... "MSGCOUNT.MSG                              
END */                                                                          
DO WHILE EBV \= ''                                                              
   PARSE VAR EBV EDAY EBV                                                       
   CALL SENDOUT "EXPIRE BV  "EDAY XBV.EDAY.START XBV.EDAY.END ,                 
                                XBV.EDAY.NUMDS                                  
   END                                                                          
DO WHILE ECD \= ''                                                              
   PARSE VAR ECD EDAY ECD                                                       
   CALL SENDOUT "CDS BACKUP "EDAY XCD.EDAY.START XCD.EDAY.END                   
   END                                                                          
DO WHILE EMB \= ''                                                              
   PARSE VAR EMB EDAY EMB                                                       
   CALL SENDOUT "MOVE BVERS "EDAY XMB.EDAY.START XMB.EDAY.END ,                 
                                XMB.EDAY.NUMDS                                  
   END                                                                          
DO WHILE EBM \= ''                                                              
   PARSE VAR EBM EDAY EBM                                                       
   CALL SENDOUT "BACK MIGDS "EDAY XBM.EDAY.START XBM.EDAY.END ,                 
                                XBM.EDAY.NUMDS                                  
   END                                                                          
DO WHILE EVO \= ''                                                              
   PARSE VAR EVO EDAY EVO                                                       
   CALL SENDOUT "VOL BACKUP "EDAY XVO.EDAY.START XVO.EDAY.END ,                 
                                XVO.EDAY.NUMDS                                  
   END                                                                          
DO WHILE EBU  \= ''                                                             
   PARSE VAR EBU EDAY  EBU                                                      
   CALL SENDOUT "PROCESSING "EDAY "EXPIRE=" XBU.EDAY.EXPBV ,                    
                                  "BACKUP=" XBU.EDAY.BACKUP  ,                  
                                  "TRACKS=" XBU.EDAY.TRACKS ,                   
                                  "FAILED=" XBU.EDAY.FAIL                       
   END                                                                          
CALL SENDOUT "DATA SET SIZE DISTRIBUTION:"                                      
   CALL SENDOUT "NUMBER OF DATA SETS (0.0 - 0.5 MB) "FORMAT(DIST.1,8)           
   CALL SENDOUT "NUMBER OF DATA SETS (0.6 - 2.0 MB) "FORMAT(DIST.2,8)           
   CALL SENDOUT "NUMBER OF DATA SETS (2.1 -  20 MB) "FORMAT(DIST.3,8)           
   CALL SENDOUT "NUMBER OF DATA SETS (20.1 MB OVER) "FORMAT(DIST.4,8)           
"EXECIO "Y.0" DISKW OUT (FINIS STEM "Y.                                         
"FREE F(OUT)"                                                                   
EXIT 0                                                                          
                                                                                
ANALYZE:                                                                        
   MSG = SUBSTR(X.N,2,8)                                                        
   IF LEFT(MSG,3)='ARC' THEN DO                                                 
      IF POS(MSG,MSGS)=0 THEN DO                                                
         MSGCOUNT.MSG = 0                                                       
         MSGS = MSGS MSG                                                        
         END                                                                    
      MSGCOUNT.MSG = MSGCOUNT.MSG + 1                                           
      IF MSG='ARC0680I' | MSG='ARC0681I' THEN CALL EXPBV                        
      IF MSG='ARC0740I' | MSG='ARC0741I' THEN CALL CDSB                         
      IF MSG='ARC0718I' | MSG='ARC0719I' THEN CALL MBV                          
      IF MSG='ARC0735I' | MSG='ARC0736I' THEN CALL BMDS                         
      IF MSG='ARC0722I' | MSG='ARC0723I' THEN CALL VOLBV                        
      IF MSG='ARC0734I' THEN CALL DATASET                                       
   END                                                                          
   ELSE IF POS('BACKUP LOG',X.N)>0 THEN DO                                      
      PARSE VAR X.N 'DATE ' TOD ' '                                             
      IF POS(TOD,EBU)=0 THEN DO                                                 
         EBU = EBU TOD                                                          
         XBU.TOD.EXPBV   = 0                                                    
         XBU.TOD.BACKUP  = 0                                                    
         XBU.TOD.TRACKS  = 0                                                    
         XBU.TOD.FAIL    = 0                                                    
      END                                                                       
   END                                                                          
RETURN                                                                          
SENDOUT:                                                                        
   SAY ARG(1)                                                                   
   K=Y.0 + 1                                                                    
   Y.K = ARG(1)                                                                 
   Y.0 = K                                                                      
RETURN                                                                          
EXPBV:                                                                          
   PARSE VAR X.N ' ON ' DAY ','                                                 
   IF POS(DAY,EBV)=0 THEN DO                                                    
      EBV = EBV DAY                                                             
      XBV.DAY.START = NOTIME                                                    
      XBV.DAY.END = NOTIME                                                      
      XBV.DAY.NUMDS = 0                                                         
      END                                                                       
   IF MSG = 'ARC0680I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM1 ' ON '                                           
      XBV.DAY.START = TIM1                                                      
      PARSE VAR DAY '19' TOD                                                    
      IF POS(TOD,EBU)=0 THEN DO                                                 
         EBU = EBU TOD                                                          
         XBU.TOD.EXPBV   = 0                                                    
         XBU.TOD.BACKUP  = 0                                                    
         XBU.TOD.TRACKS  = 0                                                    
         XBU.TOD.FAIL    = 0                                                    
      END                                                                       
      END                                                                       
   IF MSG = 'ARC0681I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM2 ' ON ' . 'EXPIRED=' ND ','                       
      XBV.DAY.END   = TIM2                                                      
      XBV.DAY.NUMDS = ND                                                        
      END                                                                       
RETURN                                                                          
CDSB:                                                                           
   PARSE VAR X.N ' ON ' DAY ','                                                 
   IF POS(DAY,ECD)=0 THEN DO                                                    
      ECD = ECD DAY                                                             
      XCD.DAY.START = NOTIME                                                    
      XCD.DAY.END = NOTIME                                                      
      END                                                                       
   IF MSG = 'ARC0740I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM1 ' ON '                                           
      XCD.DAY.START = TIM1                                                      
      END                                                                       
   IF MSG = 'ARC0741I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM2 ' ON ' . 'EXPIRED=' ND ','                       
      XCD.DAY.END   = TIM2                                                      
      END                                                                       
RETURN                                                                          
MBV:                                                                            
   IF MSG = 'ARC0718I' THEN DO                                                  
   PARSE VAR X.N 'AT ' TIM1 ' ON ' DAY ' SYSTEM'                                
   IF POS(DAY,EMB)=0 THEN DO                                                    
      EMB = EMB DAY                                                             
      XMB.DAY.START = NOTIME                                                    
      XMB.DAY.END = NOTIME                                                      
      XMB.DAY.NUMDS = 0                                                         
      MBDAY = DAY                                                               
      END                                                                       
      XMB.DAY.START = TIM1                                                      
      END                                                                       
   IF MSG = 'ARC0719I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM2 ',' ND ' BACKUP'                                 
      XMB.MBDAY.END   = TIM2                                                    
      XMB.MBDAY.NUMDS = ND                                                      
      END                                                                       
RETURN                                                                          
BMDS:                                                                           
   IF MSG = 'ARC0735I' THEN DO                                                  
   PARSE VAR X.N 'AT ' TIM1 ' ON ' DAY ' SYSTEM'                                
   IF POS(DAY,EBM)=0 THEN DO                                                    
      EBM = EBM DAY                                                             
      XBM.DAY.START = NOTIME                                                    
      XBM.DAY.END = NOTIME                                                      
      XBM.DAY.NUMDS = 0                                                         
      BMDAY = DAY                                                               
      END                                                                       
      XBM.DAY.START = TIM1                                                      
      END                                                                       
   IF MSG = 'ARC0736I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM2 ', ' ND ' DATA'                                  
      XBM.BMDAY.END   = TIM2                                                    
      XBM.BMDAY.NUMDS = ND                                                      
      END                                                                       
RETURN                                                                          
VOLBV:                                                                          
   IF MSG = 'ARC0722I' THEN DO                                                  
   PARSE VAR X.N 'AT ' TIM1 ' ON ' DAY ' SYSTEM'                                
   IF POS(DAY,EVO)=0 THEN DO                                                    
      EVO = EVO DAY                                                             
      XVO.DAY.START = TIM1                                                      
      XVO.DAY.END = NOTIME                                                      
      XVO.DAY.NUMDS = 0                                                         
      VODAY = DAY                                                               
      END                                                                       
      END                                                                       
   IF MSG = 'ARC0723I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM2 ', ' ND ' DATA'                                  
      XVO.VODAY.END   = TIM2                                                    
      XVO.VODAY.NUMDS = XVO.VODAY.NUMDS + ND                                    
      END                                                                       
RETURN                                                                          
DATASET:                                                                        
   PARSE VAR X.N 'ACTION=' ACT ' FR' . 'TRACKS=' TR 'RC=' RCD ','               
   IF ACT = 'EXBACKV' THEN DO                                                   
      XBU.TOD.EXPBV = XBU.TOD.EXPBV + 1                                         
      END                                                                       
   IF ACT = 'BACK-UP' THEN DO                                                   
      IF RCD = 0 & POS('***',TR)=0 THEN DO                                      
         XBU.TOD.BACKUP = XBU.TOD.BACKUP + 1                                    
         XBU.TOD.TRACKS = XBU.TOD.TRACKS + TR                                   
         IF TR<=10 THEN DIST.1 = DIST.1 + 1                                     
         ELSE IF TR<=40 THEN DIST.2 = DIST.2 + 1                                
         ELSE IF TR<=400 THEN DIST.3 = DIST.3 + 1                               
         ELSE DIST.4 = DIST.4 + 1                                               
      END                                                                       
      ELSE XBU.TOD.FAIL = XBU.TOD.FAIL + 1                                      
   END                                                                          
RETURN                                                                          
./ ADD NAME=SCANMLOG                                                            
/* REXX                                                  @XRC*/                 
   /**********************************************************/                 
   /*                                                        */                 
   /* SCANMLOG - THIS SAMPLE REXX EXEC CAN SCAN SEVERAL      */                 
   /*            DAYS' WORTH OF MIGRATION ACTIVITY LOGS AND  */                 
   /*            SUMMARIZE THE RESULTS.                  @XRC*/                 
   /*                                                        */                 
   /**********************************************************/                 
OUTDSN = "'HSMACT.SCAN.MIGLOG'"                                                 
NOTIME= '**:**:**'                                                              
NUMREC = 1000                                                                   
NUM = 0                                                                         
MSGS = ''                                                                       
   /* THIS IS SEVEN DAYS CONTIGUOUS ACTIVITY */                                 
    D.1  = "'HSMACT.HB.MIGLOG.D98089.T002634'"                                  
    D.2  = "'HSMACT.HB.MIGLOG.D98089.T024418'"                                  
    D.3  = "'HSMACT.HB.MIGLOG.D98089.T031115'"                                  
    D.4  = "'HSMACT.HB.MIGLOG.D98089.T040727'"                                  
    D.5  = "'HSMACT.HB.MIGLOG.D98089.T052616'"                                  
    D.6  = "'HSMACT.HB.MIGLOG.D98089.T061418'"                                  
    D.7  = "'HSMACT.HB.MIGLOG.D98089.T074632'"                                  
    D.8  = "'HSMACT.HB.MIGLOG.D98089.T083043'"                                  
    D.9  = "'HSMACT.HB.MIGLOG.D98089.T095556'"                                  
    D.10 = "'HSMACT.HB.MIGLOG.D98089.T105234'"                                  
    D.11 = "'HSMACT.HB.MIGLOG.D98089.T111738'"                                  
    D.12 = "'HSMACT.HB.MIGLOG.D98089.T121912'"                                  
    D.13 = "'HSMACT.HB.MIGLOG.D98089.T134842'"                                  
    D.14 = "'HSMACT.HB.MIGLOG.D98089.T142938'"                                  
    D.15 = "'HSMACT.HB.MIGLOG.D98089.T160343'"                                  
    D.16 = "'HSMACT.HB.MIGLOG.D98089.T162354'"                                  
    D.17 = "'HSMACT.HB.MIGLOG.D98089.T171745'"                                  
    D.18 = "'HSMACT.HB.MIGLOG.D98089.T183515'"                                  
    D.19 = "'HSMACT.HB.MIGLOG.D98089.T192810'"                                  
    D.20 = "'HSMACT.HB.MIGLOG.D98089.T202034'"                                  
    D.21 = "'HSMACT.HB.MIGLOG.D98089.T211813'"                                  
    D.22 = "'HSMACT.HB.MIGLOG.D98089.T223324'"                                  
    D.23 = "'HSMACT.HB.MIGLOG.D98089.T231654'"                                  
    D.24 = "'HSMACT.HB.MIGLOG.D98090.T005827'"                                  
D.0 = 24                                                                        
Y.0 = 0                                                                         
DO N=1 TO 4; DIST.N=0; END                                                      
EBV = ''; ECD=''; EMB= ''; EBM = ''; EVO=''; EBU=''; ACTS=''                    
FCO = ''                                                                        
"FREE F(IN)"                                                                    
"FREE F(OUT)"                                                                   
"DELETE "OUTDSN                                                                 
OPS = "NEW CATALOG SPACE(1 1) TRACKS RECFM(F B) LRECL(80)"                      
"ALLOC F(OUT) DA("OUTDSN") "OPS                                                 
"MAKEBUF"                                                                       
DO Q = 1 TO D.0                                                                 
"ALLOC F(IN) DA("D.Q") SHR REUSE"                                               
CALL SENDOUT "DATA SET ANALYZED: "D.Q                                           
"EXECIO "NUMREC" DISKR IN (STEM "X.                                             
DO WHILE X.0>0                                                                  
   NUM = NUM + X.0                                                              
   DO N=1 TO X.0                                                                
     CALL ANALYZE                                                               
   END                                                                          
   "EXECIO "NUMREC" DISKR IN (STEM "X.                                          
END                                                                             
"EXECIO 0 DISKR IN (FINIS"                                                      
"FREE F(IN)"                                                                    
END                                                                             
"DROPBUF"                                                                       
                                                                                
CALL SENDOUT "NUMBER OF LINES READ: "NUM                                        
DO WHILE MSGS \= ''                                                             
   PARSE VAR MSGS MSG MSGS                                                      
   CALL SENDOUT "NUMBER OF "MSG" ... "MSGCOUNT.MSG                              
END                                                                             
DO WHILE EBV \= ''                                                              
   PARSE VAR EBV EDAY EBV                                                       
   CALL SENDOUT "MIG CLEAN  "EDAY XBV.EDAY.START XBV.EDAY.END ,                 
                                XBV.EDAY.NUMDS                                  
   END                                                                          
DO WHILE ECD \= ''                                                              
   PARSE VAR ECD EDAY ECD                                                       
   CALL SENDOUT "SUB MOVE   "EDAY XCD.EDAY.START XCD.EDAY.END ,                 
                                XCD.EDAY.NUMDS XCD.EDAY.TRACKS                  
   END                                                                          
DO WHILE EMB \= ''                                                              
   PARSE VAR EMB EDAY EMB                                                       
   CALL SENDOUT "PSM        "EDAY XMB.EDAY.START XMB.EDAY.END                   
   END                                                                          
DO WHILE EBM \= ''                                                              
   PARSE VAR EBM EDAY EBM                                                       
   CALL SENDOUT "BACK MIGDS "EDAY XBM.EDAY.START XBM.EDAY.END ,                 
                                XBM.EDAY.NUMDS                                  
   END                                                                          
DO WHILE FCO \= ''                                                              
   PARSE VAR FCO XRC  FCO                                                       
   CALL SENDOUT "RETURN CODES "XRC XCO.XRC                                      
   END                                                                          
DO WHILE EBU  \= ''                                                             
   PARSE VAR EBU EDAY  EBU                                                      
   CALL SENDOUT "PROCESSING "EDAY "MIGRATE=" XBU.EDAY.MIGRAT,                   
                                  "TRACKS=" XBU.EDAY.TRACKS ,                   
                                  "FAILED=" XBU.EDAY.FAIL                       
   CALL SENDOUT "PROCESSING "EDAY "EXPIRE=" XBU.EDAY.EXP     ,                  
                                  "DELETE=" XBU.EDAY.DEL     ,                  
                                  "SCRATCH=" XBU.EDAY.SCR                       
   END                                                                          
CALL SENDOUT FCO                                                                
CALL SENDOUT "DATA SET SIZE DISTRIBUTION:"                                      
   CALL SENDOUT "NUMBER OF DATA SETS (0.0 - 0.5 MB) "FORMAT(DIST.1,8)           
   CALL SENDOUT "NUMBER OF DATA SETS (0.6 - 2.0 MB) "FORMAT(DIST.2,8)           
   CALL SENDOUT "NUMBER OF DATA SETS (2.1 -  20 MB) "FORMAT(DIST.3,8)           
   CALL SENDOUT "NUMBER OF DATA SETS (20.1 MB OVER) "FORMAT(DIST.4,8)           
"EXECIO "Y.0" DISKW OUT (FINIS STEM "Y.                                         
"FREE F(OUT)"                                                                   
EXIT 0                                                                          
                                                                                
ANALYZE:                                                                        
   MSG = SUBSTR(X.N,2,8)                                                        
   IF LEFT(MSG,3)='ARC' THEN DO                                                 
      IF POS(MSG,MSGS)=0 THEN DO                                                
         MSGCOUNT.MSG = 0                                                       
         MSGS = MSGS MSG                                                        
         END                                                                    
      MSGCOUNT.MSG = MSGCOUNT.MSG + 1                                           
      IF MSG='ARC0526I' | MSG='ARC0527I' THEN CALL MCL                          
      IF MSG='ARC0530I' | MSG='ARC0531I' THEN CALL MSUB                         
      IF MSG='ARC0520I' | MSG='ARC0521I' THEN CALL PSM                          
      IF MSG='ARC0734I' THEN CALL DATASET                                       
   END                                                                          
   ELSE IF POS('MIGRATION LOG',X.N)>0 THEN DO                                   
      PARSE VAR X.N 'TIME ' TIM ',  DATE ' TOD ' '                              
      IF POS(TOD,EBU)=0 THEN DO                                                 
         EBU = EBU TOD                                                          
         XBU.TOD.SPMC    = 0                                                    
         XBU.TOD.EXP     = 0                                                    
         XBU.TOD.DEL     = 0                                                    
         XBU.TOD.SCR     = 0                                                    
         XBU.TOD.MIGRAT  = 0                                                    
         XBU.TOD.TRACKS  = 0                                                    
         XBU.TOD.FAIL    = 0                                                    
      END                                                                       
      IF PSMEND = 1 THEN DO                                                     
         XMB.MBDAY.END = TIM                                                    
         PSMEND = 0                                                             
         END                                                                    
   END                                                                          
RETURN                                                                          
SENDOUT:                                                                        
   SAY ARG(1)                                                                   
   K=Y.0 + 1                                                                    
   Y.K = ARG(1)                                                                 
   Y.0 = K                                                                      
RETURN                                                                          
MCL:                                                                            
   IF MSG = 'ARC0526I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM1 ' ON ' DAY ','                                   
      IF POS(DAY,EBV)=0 THEN EBV = EBV DAY                                      
      MCDAY = DAY                                                               
      XBV.MCDAY.START = TIM1                                                    
      XBV.MCDAY.END   = NOTIME                                                  
      XBV.MCDAY.NUMDS = 0                                                       
      END                                                                       
   IF MSG = 'ARC0527I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM2 ',' ND 'MCDS'                                    
      XBV.MCDAY.END   = TIM2                                                    
      XBV.MCDAY.NUMDS = ND                                                      
      END                                                                       
RETURN                                                                          
MSUB:                                                                           
   IF MSG = 'ARC0530I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM1 ' ON ' DAY ' SYSTEM'                             
   IF POS(DAY,ECD)=0 THEN DO                                                    
      ECD = ECD DAY                                                             
      SUBDAY = DAY                                                              
      XCD.SUBDAY.START = TIM1                                                   
      XCD.SUBDAY.END = NOTIME                                                   
      XCD.SUBDAY.NUMDS = 0                                                      
      XCD.SUBDAY.TRACKS = 0                                                     
      END                                                                       
      END                                                                       
   IF MSG = 'ARC0531I' THEN DO                                                  
      PARSE VAR X.N ',' ND 'DATA' . ',' TR 'TRACKS' . 'TIME ' TIM2 ' '          
      XCD.SUBDAY.END   = TIM2                                                   
      XCD.SUBDAY.NUMDS = ND                                                     
      XCD.SUBDAY.TRACKS = TR                                                    
      END                                                                       
RETURN                                                                          
PSM:                                                                            
   IF MSG = 'ARC0520I' THEN DO                                                  
   IF POS(DAY,EMB)=0 THEN DO                                                    
      EMB = EMB DAY                                                             
      XMB.DAY.START = TIM                                                       
      MBDAY = DAY                                                               
      END                                                                       
      END                                                                       
   IF MSG = 'ARC0521I' THEN DO                                                  
      PSMEND = 1                                                                
      END                                                                       
RETURN                                                                          
BMDS:                                                                           
   IF MSG = 'ARC0735I' THEN DO                                                  
   PARSE VAR X.N 'AT ' TIM1 ' ON ' DAY ' SYSTEM'                                
   IF POS(DAY,EBM)=0 THEN DO                                                    
      EBM = EBM DAY                                                             
      XBM.DAY.START = NOTIME                                                    
      XBM.DAY.END = NOTIME                                                      
      XBM.DAY.NUMDS = 0                                                         
      BMDAY = DAY                                                               
      END                                                                       
      XBM.DAY.START = TIM1                                                      
      END                                                                       
   IF MSG = 'ARC0736I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM2 ', ' ND ' DATA'                                  
      XBM.BMDAY.END   = TIM2                                                    
      XBM.BMDAY.NUMDS = ND                                                      
      END                                                                       
RETURN                                                                          
VOLBV:                                                                          
   IF MSG = 'ARC0722I' THEN DO                                                  
   PARSE VAR X.N 'AT ' TIM1 ' ON ' DAY ' SYSTEM'                                
   IF POS(DAY,EVO)=0 THEN DO                                                    
      EVO = EVO DAY                                                             
      XVO.DAY.START = TIM1                                                      
      XVO.DAY.END = NOTIME                                                      
      XVO.DAY.NUMDS = 0                                                         
      VODAY = DAY                                                               
      END                                                                       
      END                                                                       
   IF MSG = 'ARC0723I' THEN DO                                                  
      PARSE VAR X.N 'AT ' TIM2 ', ' ND ' DATA'                                  
      XVO.VODAY.END   = TIM2                                                    
      XVO.VODAY.NUMDS = XVO.VODAY.NUMDS + ND                                    
      END                                                                       
RETURN                                                                          
DATASET:                                                                        
   PARSE VAR X.N 'ACTION=' ACT ' FR' . 'TRACKS=' TR 'RC=' RCD ','               
   IF POS(ACT,ACTS)=0 THEN ACTS = ACTS ACT                                      
   IF ACT = 'SPCMGMT' THEN DO                                                   
      IF RCD = 0 THEN SAY X.N                                                   
      XBU.TOD.FAIL  = XBU.TOD.FAIL  + 1                                         
      CALL FAILURE                                                              
      END                                                                       
   IF ACT = 'EXPIRED' THEN DO                                                   
      XBU.TOD.EXP   = XBU.TOD.EXP   + 1                                         
      END                                                                       
   IF ACT = 'DELETED' THEN DO                                                   
      XBU.TOD.DEL   = XBU.TOD.DEL   + 1                                         
      END                                                                       
   IF ACT = 'SCRATCH' THEN DO                                                   
      XBU.TOD.SCR   = XBU.TOD.SCR   + 1                                         
      END                                                                       
   IF ACT = 'MIGRATE' THEN DO                                                   
      IF RCD = 0 & POS('***',TR)=0 THEN DO                                      
         XBU.TOD.MIGRAT = XBU.TOD.MIGRAT + 1                                    
         XBU.TOD.TRACKS = XBU.TOD.TRACKS + TR                                   
         IF TR<=10 THEN DIST.1 = DIST.1 + 1                                     
         ELSE IF TR<=40 THEN DIST.2 = DIST.2 + 1                                
         ELSE IF TR<=400 THEN DIST.3 = DIST.3 + 1                               
         ELSE DIST.4 = DIST.4 + 1                                               
      END                                                                       
      ELSE DO                                                                   
           XBU.TOD.FAIL = XBU.TOD.FAIL + 1                                      
           CALL FAILURE                                                         
           END                                                                  
   END                                                                          
RETURN                                                                          
FAILURE:                                                                        
   XRC = RIGHT(RCD+0,3,'0')                                                     
   IF POS(XRC,FCO)=0 THEN DO                                                    
      FCO = FCO XRC                                                             
      XCO.XRC = 0                                                               
      END                                                                       
   XCO.XRC = XCO.XRC + 1                                                        
RETURN                                                                          
./ ADD NAME=SCANFSR                                                             
/* REXX                                                  @XRC*/                 
   /**********************************************************/                 
   /*                                                        */                 
   /* SCANFSR  - THIS SAMPLE REXX EXEC SCANS THE FSR DATA    */                 
   /*            EXTRACTED FROM SMF (VIA IFASMFDP PROGRAM)   */                 
   /*            AND SUMMARIZED BY FSR TYPE AND MANAGEMENT   */                 
   /*            CLASS.                                      */                 
   /*                                                        */                 
   /*            VARIABLES: SET FSRID TO THE SMF ID FOR      */                 
   /*            FSR RECORDS, WHICH IS ONE MORE THAN THE     */                 
   /*            VALUE SPECIFIED FOR DSR/VSR RECORDS.        */                 
   /*            IF SETSYS SMFID(240) IS SPECIFIED, USE 241. */                 
   /*                                                        */                 
   /*            SET THE INPUT AND OUTPUT DATA SET NAMES     */                 
   /*            ACCORDINGLY.  SINCE REXX CANNOT PROCESS     */                 
   /*            VARIABLE-BLOCKED SPAN FILE I/O, THIS EXEC   */                 
   /*            WILL REPRO THE DATA TO A VB FILE FOR USE.   */                 
   /*                                                    @XRC*/                 
   /**********************************************************/                 
FSRID = 241                                                                     
INDSN = "'HSMSMF.FSRDATA'"                                                      
OUTDSN = "'HSMSMF.FSRDATA.REPORT'"                                              
NOTIME= '**:**:**'                                                              
NUMREC = 1000                                                                   
NUM = 0; Y.0 = 0                                                                
TYPES = ''                                                                      
MGMT = ''                                                                       
MGMTB= ''                                                                       
"FREE F(IN)"                                                                    
"FREE F(OUT)"                                                                   
IF SYSDSN(OUTDSN)='OK' THEN "DELETE "OUTDSN                                     
OPS = "NEW CATALOG SPACE(1 1) TRACKS RECFM(F B) LRECL(80)"                      
"ALLOC F(OUT) DA("OUTDSN") "OPS                                                 
"MAKEBUF"                                                                       
   X = LISTDSI(INDSN)                                                           
   SAY "RECFM = "SYSRECFM                                                       
   IF SYSRECFM = 'VBS' THEN DO                                                  
      "ALLOC F(IN) DA("INDSN") SHR REUSE"                                       
      PARSE VAR INDSN "'" HLQ "." DA "'"                                        
      TEMPDSN = "'"HLQ"."DA||"."VB"'";                                          
      IF SYSDSN(TEMPDSN)='OK' THEN DO                                           
         INDSN = TEMPDSN                                                        
         END                                                                    
      ELSE DO                                                                   
         OPS = "LIKE("INDSN") RECFM(V B) LRECL(332)"                            
         "ALLOC F(TEMP) DA("TEMPDSN") "OPS                                      
         "REPRO INFILE(IN) OUTFILE(TEMP)"                                       
         "FREE FI(IN)"; "FREE FI(TEMP)"                                         
         INDSN = TEMPDSN                                                        
         END                                                                    
      END                                                                       
"ALLOC F(IN) DA("INDSN") SHR REUSE"                                             
CALL SENDOUT "DATA SET ANALYZED: "INDSN                                         
"EXECIO "NUMREC" DISKR IN (STEM "X.                                             
DO WHILE X.0>0                                                                  
   NUM = NUM + X.0                                                              
   DO N=1 TO X.0                                                                
     CALL ANALYZE                                                               
   END                                                                          
   "EXECIO "NUMREC" DISKR IN (STEM "X.                                          
END                                                                             
"EXECIO 0 DISKR IN (FINIS"                                                      
"FREE F(IN)"                                                                    
"DROPBUF"                                                                       
                                                                                
CALL SENDOUT "NUMBER OF LINES READ: "NUM                                        
DO WHILE TYPES \= ''                                                            
   PARSE VAR TYPES TYPE TYPES                                                   
   CALL SENDOUT "FSR TYPE=("TYPE") ... "XTYPE.TYPE                              
   END                                                                          
CALL SENDOUT " "                                                                
CALL SENDOUT "FSR COUNTS BY MANAGEMENT CLASS (TYPES 01 - 05)"                   
DO WHILE MGMT  \= ''                                                            
   PARSE VAR MGMT MC MGMT                                                       
   COLUMNS = FORMAT(XMC.MC.001,6) FORMAT(XMC.MC.002,6)                          
   COLUMNS = COLUMNS FORMAT(XMC.MC.003,6) FORMAT(XMC.MC.004,6)                  
   COLUMNS = COLUMNS FORMAT(XMC.MC.005,6)                                       
   CALL SENDOUT "MANAGEMENT CLASS "MC COLUMNS                                   
   END                                                                          
                                                                                
CALL SENDOUT " "                                                                
CALL SENDOUT "FSR COUNTS BY MANAGEMENT CLASS (TYPE  07)"                        
DO WHILE MGMTB \= ''                                                            
   PARSE VAR MGMTB MC MGMTB                                                     
   COLUMNS = FORMAT(XMC.MC.007,6)                                               
   CALL SENDOUT "MANAGEMENT CLASS "MC COLUMNS                                   
   END                                                                          
                                                                                
"EXECIO "Y.0" DISKW OUT (FINIS STEM "Y.                                         
"FREE F(OUT)"                                                                   
EXIT 0                                                                          
                                                                                
ANALYZE:                                                                        
    SMFTYPE = C2D(SUBSTR(X.N,2,1))                                              
      IF SMFTYPE = FSRID   THEN DO                                              
         FSRTYPE = RIGHT(C2D(SUBSTR(X.N,39,1)),3,'0')                           
         IF POS(FSRTYPE,TYPES)=0 THEN DO                                        
            TYPES = TYPES FSRTYPE                                               
            XTYPE.FSRTYPE = 0                                                   
            END                                                                 
         IF LEFT(XTYPE.FSRTYPE,1)='X' THEN SAY FSRTYPE XTYPE.FSRTYPE            
         XTYPE.FSRTYPE = XTYPE.FSRTYPE + 1                                      
         IF FSRTYPE>=1 & FSRTYPE<=5 THEN CALL MIGREC                            
         IF FSRTYPE =7  THEN CALL BACKUP                                        
         END                                                                    
RETURN                                                                          
SENDOUT:                                                                        
   SAY ARG(1)                                                                   
   K=Y.0 + 1                                                                    
   Y.K = ARG(1)                                                                 
   Y.0 = K                                                                      
RETURN                                                                          
MIGREC:                                                                         
   MC= STRIP(SUBSTR(X.N,211,8))                                                 
   MC = LEFT(MC,9,'.')                                                          
   IF POS(MC,MGMT)=0 THEN DO                                                    
      MGMT = MGMT MC                                                            
      XMC.MC.001 = 0                                                            
      XMC.MC.002 = 0                                                            
      XMC.MC.003 = 0                                                            
      XMC.MC.004 = 0                                                            
      XMC.MC.005 = 0                                                            
      END                                                                       
   IF POS(FSRTYPE,' 001 002 003 004 005 ')=0 THEN SAY FSRTYPE                   
   IF LEFT(XMC.MC.FSRTYPE,1)="X" THEN SAY XMC.MC.FSRTYPE                        
   XMC.MC.FSRTYPE = XMC.MC.FSRTYPE + 1                                          
RETURN                                                                          
BACKUP:                                                                         
   MC= STRIP(SUBSTR(X.N,211,8))                                                 
   MC = LEFT(MC,9,'.')                                                          
   IF POS(MC,MGMTB)=0 THEN DO                                                   
      MGMTB = MGMTB MC                                                          
      XMC.MC.007 = 0                                                            
      END                                                                       
   XMC.MC.FSRTYPE = XMC.MC.FSRTYPE + 1                                          
RETURN                                                                          
./ ADD NAME=FSRSTAT                                                             
/* REXX                                                        @XRC*/           
PARSE ARG INDSN OPS                                                             
/*******************************************************************/           
/*                                                                 */           
/*  FSRSTAT:  THIS SAMPLE REXX PROGRAM READS FSR DATA AND PRESENTS */           
/*            STATISTICAL RESULTS.  IN SOME CASES, THE DATA IS     */           
/*            PRESENTED AS A HISTOGRAM, TO GROUP DATA IN CERTAIN   */           
/*            CATEGORIES FOR FURTHER ANALYSIS.                     */           
/*                                                                 */           
/*            METHOD OF INVOCATION:                                */           
/*                                                                 */           
/*               FSRSTAT  'MY.FSR.DATA.VB' FSRID(241)              */           
/*                                                                 */           
/*            NOTE: SMF DATA COLLECTED BY IFASMFDP IS SAVED IN     */           
/*            VARIABLE-BLOCKED-SPANNED (VBS) FORMAT.  THIS MUST    */           
/*            BE CONVERTED TO VARIABLE-BLOCKED USING DFSORT OR     */           
/*            IDCAMS REPRO, TO BE PROCESSED BY THIS REXX PROGRAM.  */           
/*            ANY LRECL 332 OR LARGER IS ACCEPTABLE.               */           
/*                                                                 */           
/*            THE FSR TYPE IS DEFINED BY SETSYS SMFID(NNN) IN THE  */           
/*            SYS1.PARMLIB(ARCCMDXX) MEMBER.  THE FSR TYPE IS      */           
/*            NNN+1, SO IF SETSYS SMFID(240) IS SPECIFIED, USE     */           
/*            FSRID(241) TO REPRESENT THE FSR RECORDS.             */           
/*                                                                 */           
/*******************************************************************/           
IF POS('FSRID(',OPS)>0 THEN DO                                                  
   PARSE VAR OPS FRONT 'FSRID(' FSRID ')' BACK                                  
   OPS = FRONT BACK                                                             
   END                                                                          
ELSE FSRID = 241                                                                
CALL OPENFILES                                                                  
TOTCPU = 0                                                                      
INC. = 0                                                                        
"EXECIO "NUMREC" DISKR IN (STEM "X.                                             
DO WHILE X.0>0; NUM=NUM+X.0                                                     
   DO N=1 TO X.0; CALL ANALYZE; END                                             
   "EXECIO "NUMREC" DISKR IN (STEM "X.                                          
   IF (NUM//10000)=0 THEN SAY "PROCESSING ... "NUM (TOTCPU%100)                 
END                                                                             
                                                                                
/*******************************************************************/           
/*                                                                 */           
/*  THE STATISTICAL RESULTS ARE BASED ON THE RECORDS PROVIDED AS   */           
/*  INPUT.  SOME MAY NOT MAKE SENSE IF THE FSR RECORDS REPRESENT   */           
/*  A MULTITUDE OF FUNCTIONS.                                      */           
/*                                                                 */           
/*  USE DFSORT, OR SIMILAR SORT PRODUCT, TO SELECT JUST THOSE FSR  */           
/*  RECORDS THAT APPLY TO A CERTAIN FUNCTION, OR MEET SOME SPECIAL */           
/*  CRITERIA.                                                      */           
/*                                                                 */           
/*  NOTE: THE USE OF ____NONE REPRESENTS EITHER (A) THE DATA SET   */           
/*  IS NOT SMS-MANAGED, OR (B) IS SMS-MANAGED, BUT IS NOT ASSIGNED */           
/*  AN EXPLICIT MANAGEMENT CLASS.                                  */           
/*******************************************************************/           
NONE = "____NONE"                                                               
CALL SENDOUT "DATA SET ANALYZED: "INDSN                                         
CALL SENDOUT "NUMBER OF LINES READ: "NUM                                        
IF NUM>0 THEN DO                                                                
CALL SENDOUT " "                                                                
CALL SHOWCOUNT "FSR RECORDS BY TYPE ", XTYPE, KEY, UP                           
CALL SHOWPERCENT "FSR RECORDS BY HOST ", XHOST, KEY, UP                         
END                                                                             
IF NAF=1 THEN DO                                                                
CALL SHOWPERCENT "FSR RECORDS BY RETURN CODE ", XCODE, COUNT, DOWN              
CALL SHOWCOUNT "FSR RECORDS BY DATE",XDATE, KEY, UP                             
CALL SHOWHIST    "FSR RECORDS BY HOUR", XHOUR                                   
CALL SHOWHIST    "FSR RECORDS BY SIZE (KB)", XSIZE                              
CALL SHOWPERCENT "BY REQUEST (MOUNTED/TSO/USER/WAIT)", XREQ, KEY, UP            
CALL SHOWPERCENT "BY REQUEST (1=EXTENT REDUCTION)"   , XEXT, KEY, UP            
CALL SHOWPERCENT "BY REQUEST (1=PIGGY BACK)"         , XPGB, KEY, UP            
CALL SHOWPERCENT "BY REQUEST (1=TAPE TAKEAWAY)", XTAWAY, KEY, UP                
CALL SHOWHIST    "FSR RECORDS BY AGE (DAYS) ", XAGE                             
CALL SHOWHIST    "BY TIME COMPLETED (SECONDS)", XTIME                           
CALL SHOWPERCENT "FSR RECORDS BY MANAGEMENT CLASS ", XMC, COUNT, DOWN           
CALL SHOWPERCENT "FSR RECORDS BY GDG ", XLLQ,KEY,UP                             
CALL SENDOUT "TOTAL CPU SECONDS "TOTCPU%100                                     
/*                                                                              
CALL SHOWPERCENT "FSR RECORDS BY HLQ ", XHLQ,KEY,UP                             
CALL SHOWCOUNT "FSR RECORDS BY JOB (FIRST N CHARS)", XJOB,COUNT,DOWN            
CALL SHOWCOUNT "FSR RECORDS BY USER (FIRST N CHARS)", XUID,COUNT,DOWN           
CALL SHOWCOUNT "FSR RECORDS BY FKB  ", XFKB , KEY, UP                           
*/                                                                              
END                                                                             
CALL CLOSEFILES                                                                 
EXIT 0                                                                          
OPENFILES:                                                                      
PARSE VAR INDSN "'" BASE "'" ;OUTDSN = "'"BASE".FSRSTAT'"                       
NUMREC = 5000; NUM = 0; Y.0 = 0; "FREE F(IN)"; "FREE FI(OUT)"                   
IF SYSDSN(OUTDSN)='OK' THEN OPS = "OLD"; ELSE ,                                 
   OPS = "NEW CATALOG SPACE(1 1) TRACKS RECFM(F B) LRECL(80)"                   
"ALLOC F(OUT) DA("OUTDSN") "OPS ; "MAKEBUF"                                     
"ALLOC F(IN) DA("INDSN") SHR REUSE"                                             
RETURN                                                                          
CLOSEFILES:                                                                     
"EXECIO 0 DISKR IN (FINIS"; "FREE FI(IN)"; "DROPBUF"                            
"EXECIO "Y.0" DISKW OUT (FINIS STEM "Y. ; "FREE F(OUT)"                         
RETURN                                                                          
ANALYZE:                                                                        
SMFTYPE = C2D(SUBSTR(X.N,2,1))                                                  
IF SMFTYPE = FSRID   THEN DO                                                    
   FSRTYPE = RIGHT(C2D(SUBSTR(X.N,39,1)),3,'0')                                 
   FSRSID = SUBSTR(X.N,11,4)                                                    
  CALL KEYCOUNT XTYPE,FSRTYPE; CALL KEYCOUNT XHOST,FSRSID                       
   IF FSRTYPE\='015' & FSRTYPE\='016' THEN DO                                   
   FSRDSN = SUBSTR(X.N,41,44)                                                   
   CALL GETMC; NAF=1                                                            
   LQ=LASTPOS('.',FSRDSN); LLQ=SUBSTR(FSRDSN,LQ+1,LQ+9)                         
   LLQ = UNDERLINE(LLQ," ","_"); LLQ=LEFT(LLQ,2)"_"                             
   IF LLQ>="G0_" & LLQ<="G9_" THEN LLQ = "GDG"; ELSE LLQ="NON"                  
   QQ = SUBSTR(X.N,105,4)                                                       
   Q2 = 0; IF C2X(LEFT(QQ,1))='00' THEN Q2=C2D(QQ)                              
   FSRRC   = RIGHT(Q2,4,'0')                                                    
   FSRDATR = C2X(SUBSTR(X.N,133,4)); FSRTIMR = C2X(SUBSTR(X.N,137,4))           
   FSRTIMS = C2X(SUBSTR(X.N,141,4)); FSRTIME = C2X(SUBSTR(X.N,145,4))           
   FSRTIMA = C2X(SUBSTR(X.N,149,4)); TIMEQ = STAMP(FSRTIMR,FSRTIMS)             
   TIMEM = STAMP(FSRTIMS,FSRTIMA);   TIMEP = STAMP(FSRTIMA,FSRTIME)             
  TIMET = STAMP(FSRTIMR,FSRTIME);                                               
  FSRFLAGS = BITSTR(SUBSTR(X.N,40,1))                                           
  FSRFKB = SUBSTR(FSRFLAGS,4,1)                                                 
  READKB  = C2D(SUBSTR(X.N,161,3)); WRITEKB = C2D(SUBSTR(X.N,165,3))            
  MOVEKB = READKB + WRITEKB                                                     
  IF FSRFKB="0" THEN MOVEKB = MOVEKB % 4                                        
  IF FSRFKB="1" THEN MOVEKB = MOVEKB * 256                                      
  FSRTVOL = SUBSTR(X.N,85,6); TOVOL = LEFT(FSRTVOL,2)"_"                        
  FSRFLG2 = BITSTR(SUBSTR(X.N,175,1)); REQ=LEFT(FSRFLG2,4)                      
  FSRFLG3 = BITSTR(SUBSTR(X.N,176,1)); EXT=SUBSTR(FSRFLG3,4,1)                  
  FSRFLG4 = BITSTR(SUBSTR(X.N,128,1)); PGB=SUBSTR(FSRFLG4,3,1)                  
  FSRCPU = 0; TOP=C2X(SUBSTR(X.N,177,1))                                        
  IF  TOP = '00' THEN FSRCPU=C2D(SUBSTR(X.N,177,4))                             
  TOTCPU = TOTCPU + FSRCPU                                                      
  FSRAGE  = RIGHT(C2D(SUBSTR(X.N,181,2)),4,'0')                                 
  HR=LEFT(FSRTIMR,2)                                                            
  TAWAY = C2D(BITAND(SUBSTR(X.N,219,1),'01'X))                                  
  CALL KEYCOUNT XTAWAY, TAWAY;                                                  
  CALL KEYCOUNT XCODE,FSRRC  ; CALL KEYCOUNT XDATE,FSRDATR                      
  CALL KEYCOUNT XREQ,REQ     ; CALL KEYCOUNT XMC,MC                             
  CALL KEYHIST  XAGE,FSRAGE,1,15  ; CALL KEYHIST  XHOUR,HR,2,11                 
  CALL KEYHIST  XTIME,TIMET,30,14                                               
  CALL KEYCOUNT XEXT, EXT; CALL KEYCOUNT XPGB, PGB;                             
  CALL KEYCOUNT XLLQ, LLQ                                                       
  /*                                                                            
  CALL KEYCOUNT XJOB,JOBNAME ; CALL KEYCOUNT XUID,USERID                        
  CALL KEYCOUNT XFKB, FSRFKB                                                    
  CALL KEYCOUNT XHLQ, HLQ                                                       
  CALL KEYCOUNT XTOV, TOVOL                                                     
  */                                                                            
  CALL KEYHIST  XSIZE, MOVEKB,50,14                                             
   END                                                                          
   END                                                                          
RETURN                                                                          
KEYCOUNT:                                                                       
TAG=ARG(1); KEY=ARG(2); INC.TAG = 1                                             
IF LEFT(W.TAG.KEYS,2)='W.' THEN DO; W.TAG.KEYS=''; W.TAG.COUNT.=0; END          
IF POS(KEY,W.TAG.KEYS)=0 THEN ,                                                 
   DO; W.TAG.KEYS = W.TAG.KEYS KEY; W.TAG.COUNT.KEY = 0; END                    
W.TAG.COUNT.KEY = W.TAG.COUNT.KEY + 1; RETURN                                   
SHOWCOUNT:                                                                      
IF INC.TAG=0 THEN RETURN                                                        
HEADER=ARG(1); TAG=ARG(2); METHOD=ARG(3); MODE=ARG(4)                           
CALL SORTBY TAG,METHOD,MODE; CALL SENDOUT HEADER                                
LIST=W.TAG.KEYS; DO WHILE LIST  \= ''; PARSE VAR LIST KEY LIST                  
   CALL SENDOUT LEFT(KEY,10,' ') FORMAT(W.TAG.COUNT.KEY,9); END                 
CALL SENDOUT " "; RETURN                                                        
KEYHIST:                                                                        
TAG=ARG(1); POINT=ARG(2); BAR=ARG(3); LIMIT=ARG(4); INC.TAG=1                   
KEY = (POINT/BAR)%1; IF KEY>LIMIT THEN KEY=LIMIT+1                              
KEY = RIGHT(KEY,2,'0')                                                          
IF LEFT(W.TAG.KEYS,2)='W.' THEN ,                                               
   DO; W.TAG.KEYS=''; W.TAG.HBAR = BAR; W.TAG.HLIMIT = LIMIT                    
        W.TAG.MAX=0                                                             
   DO H=0 TO LIMIT+1; C1=RIGHT(H,2,'0'); W.TAG.COUNT.C1=0; END; END             
IF W.TAG.MAX<POINT THEN W.TAG.MAX=POINT                                         
W.TAG.COUNT.KEY = W.TAG.COUNT.KEY + 1; RETURN                                   
SHOWHIST:                                                                       
HEADER=ARG(1); TAG=ARG(2); IF INC.TAG=0 THEN RETURN                             
BAR=W.TAG.HBAR; LIMIT=W.TAG.HLIMIT; TOTAL=0; RUN=0                              
OVER=' OVER'; IF W.TAG.MAX<99999 THEN OVER=FORMAT(W.TAG.MAX,5,0)                
CALL SENDOUT HEADER                                                             
DO H=0 TO LIMIT+1; KEY=RIGHT(H,2,'0'); TOTAL=TOTAL+W.TAG.COUNT.KEY; END         
DO H=0 TO LIMIT+1; KEY=RIGHT(H,2,'0')                                           
   X1=W.TAG.COUNT.KEY; X2=100*(X1/TOTAL); RUN=RUN+X2                            
   IF H<=LIMIT THEN RANGE = FORMAT(H*BAR,5)"->"FORMAT(H*BAR+BAR-1,5)            
               ELSE RANGE = FORMAT(H*BAR,5)"->"OVER                             
   IF (H<=LIMIT)|(W.TAG.COUNT.KEY > 0) THEN ,                                   
   CALL SENDOUT RANGE FORMAT(W.TAG.COUNT.KEY,9) ,                               
        FORMAT(X2,6,2)'% 'FORMAT(RUN,6,2)'%'; END                               
CALL SENDOUT " "; RETURN                                                        
SHOWPERCENT:                                                                    
HEADER=ARG(1); TAG=ARG(2); METHOD=ARG(3);  MODE=ARG(4);                         
IF INC.TAG=0 THEN RETURN                                                        
CALL SORTBY TAG,METHOD,MODE; CALL SENDOUT HEADER                                
LIST=W.TAG.KEYS;                                                                
SN=WORDS(LIST);                                                                 
TOTAL=0; RUN=0                                                                  
DO Q=1 TO SN; C1=WORD(LIST,Q); TOTAL=TOTAL+W.TAG.COUNT.C1; END                  
LIST=W.TAG.KEYS;                                                                
DO WHILE LIST  \= ''; PARSE VAR LIST KEY LIST                                   
   X1=W.TAG.COUNT.KEY; X2=100*(X1/TOTAL); RUN=RUN+X2                            
   CALL SENDOUT LEFT(KEY,10,' ') FORMAT(X1,9) ,                                 
        FORMAT(X2,6,2)'% 'FORMAT(RUN,6,2)'%'; END                               
CALL SENDOUT " "; RETURN                                                        
SORTBY:                                                                         
TAG = ARG(1); METHOD= ARG(2); MODE = ARG(3)                                     
LIST = W.TAG.KEYS; SNUM=WORDS(LIST)                                             
DO Q=1 TO SNUM; V.Q = WORD(LIST,Q); END                                         
DO J=1 TO SNUM-1; DO K=J+1 TO SNUM; C1=V.J; C2=V.K                              
   IF METHOD='COUNT' THEN DO; C1=W.TAG.COUNT.C1; C2=W.TAG.COUNT.C2; END         
   IF MODE='DOWN' THEN DO; TEMP=C1; C1=C2; C2=TEMP; END                         
   IF C1  > C2  THEN DO; TEMP=V.J; V.J=V.K; V.K=TEMP; END; END; END             
NEW= '';                                                                        
DO Q=1 TO SNUM;                                                                 
   NEW = NEW V.Q;                                                               
END;                                                                            
W.TAG.KEYS = NEW                                                                
RETURN                                                                          
SENDOUT: /* SAY ARG(1) */                                                       
   K=Y.0 + 1; Y.K = ARG(1); Y.0 = K; RETURN                                     
 /***********************************************************/                  
 /* CONVERT THE HEX VALUE TO INDIVIDUAL 1'S AND 0'S         */                  
 /* EACH BYTE WILL TAKE UP 8 CHARACTER POSITIONS            */                  
 /***********************************************************/                  
  BITSTR:                                                                       
  IF BIT.F \= "1111"  THEN DO                                                   
     BIT.0="0000"; BIT.1="0001"; BIT.2="0010"; BIT.3="0011"                     
     BIT.4="0100"; BIT.5="0101"; BIT.6="0110"; BIT.7="0111"                     
     BIT.8="1000"; BIT.9="1001"; BIT.A="1010"; BIT.B="1011"                     
     BIT.C="1100"; BIT.D="1101"; BIT.E="1110"; BIT.F="1111"                     
     END                                                                        
  CH=C2X(ARG(1)); BS=''                                                         
  DO B=1 TO LENGTH(CH); Q=SUBSTR(CH,B,1); BS=BS||BIT.Q; END                     
  RETURN BS                                                                     
GETMC:                                                                          
 FSRMCNAM = SUBSTR(X.N,211,8); FSRMCLEN = C2D(SUBSTR(X.N,209,2))                
 MC= UNDERLINE(FSRMCNAM,' ','_');                                               
   FSRJBN = SUBSTR(X.N,15,8); FSRUID=SUBSTR(X.N,31,8);                          
 JOBNAME = LEFT(UNDERLINE(FSRJBN,' ','_'),1)||"__"                              
 USERID  = LEFT(UNDERLINE(FSRUID,' ','_'),1)||"__"                              
 RETURN                                                                         
 UNDERLINE:                                                                     
 ST = ''; L=LENGTH(ARG(1)); SP=ARG(2); UN=ARG(3)                                
 DO J=1 TO L; Q=SUBSTR(ARG(1),J,1); IF Q<' ' THEN Q=' '                         
   IF Q=SP  THEN ST = ST||UN; ELSE ST=ST||Q; END                                
IF LEFT(ST,1)="_" THEN ST=RIGHT("NONE",8,"_")                                   
RETURN ST                                                                       
STAMP:                                                                          
TIME1 = ARG(1); TIME2 = ARG(2)                                                  
HOUR1 = LEFT(TIME1,2); MIN1=SUBSTR(TIME1,3,2); SEC1=RIGHT(TIME1,4)              
HOUR2 = LEFT(TIME2,2); MIN2=SUBSTR(TIME2,3,2); SEC2=RIGHT(TIME2,4)              
IF HOUR2<HOUR1 THEN HOUR2=HOUR2+24                                              
STAMP1 = 3600*HOUR1 + 60*MIN1 + (SEC1/100)                                      
STAMP2 = 3600*HOUR2 + 60*MIN2 + (SEC2/100)                                      
RETURN STAMP2 - STAMP1                                                          
$$                                                                              
//HSMSTEP3 EXEC PGM=IEBGENER                                                    
//*                                                                             
//********************************************************************          
//* CREATES THE FOLLOWING JCL FOR THE ABARS UTILITIES:           @04A*          
//*                                                              @04A*          
//* ARECPROC -  ISSUE THE ARECOVER COMMAND                       @04A*          
//* ARECSNGL -  SINGLE DATA SET RESTORE FOR ARECOVER             @04A*          
//* ASMAL    -  ASSEMBLE AND LINK EDIT SLEEP PROGRAM             @04A*          
//* DCOLLECT -  ISSUE DCOLLECT COMMAND FOR AGGREGATE             @04A*          
//* DRAUDIT  -  CREATE AUDIT REPORTS FOR ARECOVER PROCESSING     @04A*          
//* DRBACKUP -  SETUP AND ISSUE APPROPRIATE ABACKUP COMMAND      @04A*          
//* DRSCAN   -  LIST INFORMATION REGARDING DATA SETS TO BE       @04A*          
//*             BACKED UP BY ABARS                               @04A*          
//* DRSCAN   -  LIST INFORMATION REGARDING DATA SETS TO BE       @04A*          
//* HSMPATCH -  ABARS PATCH                                      @04A*          
//* SETABKUP -  ISSUE ABACKUP COMMAND                            @04A*          
//* SLEEPASM -  SLEEP ASSEMBLER PROGRAM                          @04A*          
//********************************************************************          
//*                                                                             
//SYSPRINT DD SYSOUT=*                                                          
//SYSUT2   DD UNIT=SYSDA,                                                       
//            DSN=HSM.ABARUTIL.JCL(ARECPROC),                                   
//            DISP=(NEW,CATLG),                                                 
//            DCB=(RECFM=FB,LRECL=80),                                          
//            SPACE=(CYL,(2,1,10))                                              
//SYSIN    DD DUMMY                                                             
//SYSUT1   DD DATA,DLM='$$'                                                     
//ARECPROC JOB ?JOBPARM                                                         
//*                                                                             
//AGGNAME1 EXEC DRECOVER                                                        
//DRECOVER.SYSTSIN DD  *                                                        
    %ARECPROC  AGGNAME1                                                         
$$                                                                              
//HSMSTEP4 EXEC PGM=IEBUPDTE,PARM=NEW                                           
//SYSPRINT DD SYSOUT=*                                                          
//SYSUT2   DD DSN=HSM.ABARUTIL.JCL,                                             
//            DISP=OLD                                                          
//SYSIN    DD DATA,DLM='$$'                                                     
./ ADD NAME=ARECSNGL                                                            
//ARECSNGL JOB ?JOBPARM                                                         
/*                                                                              
//*                                                                             
//DRECOVER PROC                                                                 
//*********************************************************************         
//******   ABARS ARECOVER                                                       
//*********************************************************************         
//ARECOVER EXEC PGM=IKJEFT01,DYNAMNBR=20,TIME=1440                              
//SYSEXEC   DD  DSN=HSM.SAMPLE.TOOL,DISP=SHR                                    
//STEPLIB   DD  DSN=A10DLH.TSO.LOAD,DISP=SHR                                    
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//LOG       DD  SYSOUT=*                                                        
//SYSTERM   DD  SYSOUT=*                                                        
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//DRECOVER PEND                                                                 
//AGGNAME1 EXEC DRECOVER                                                        
//ARECOVER.SYSTSIN DD  *                                                        
    %ARECSNGL  DAVETEST                                                         
//ARECOVER.INDSN DD  *                                                          
A10DLH.BADDSN                                                                   
/*                                                                              
./ ADD NAME=ASMAL                                                               
//ASMAL   JOB ?JOBPARM                                                          
//C      EXEC  PGM=IEV90,PARM=OBJECT,REGION=200K                                
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR                                         
//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1           
//SYSPUNCH DD  SYSOUT=B,DCB=(BLKSIZE=800),SPACE=(CYL,(5,5,0))                   
//SYSPRINT DD SYSOUT=A,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1,SYSPUNCH))         
//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *        
//             DCB=(BLKSIZE=400),DSN=&&LOADSET                                  
//SYSIN    DD DSN=A10DLH.JCL.CNTL(SLEEPASM),DISP=SHR                            
//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,NCAL',REGION=96K,COND=(8,LT,C)         
//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)                                  
//         DD  DDNAME=SYSIN                                                     
//SYSLMOD DD DSN=A10DLH.TSO.LOAD,DISP=SHR                                       
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=&SYSUT1                         
//SYSPRINT DD  SYSOUT=A,DCB=(RECFM=FB,BLKSIZE=3509)                             
  ALIAS WAIT                                                                    
  NAME SLEEP(R)                                                                 
/*                                                                              
./ ADD NAME=DCOLLECT                                                            
//DCOLLCT JOB ?JOBPARM                                                          
//*                                                                             
//STEP1 EXEC PGM=IDCAMS                                                         
//SYSPRINT DD SYSOUT=*                                                          
//SYSIN    DD *                                                                 
  DCOLLECT OUTDATASET(HSMATH0.DCOLLECT.DATA) SMSDATA(ACTIVE) REPLACE            
/*                                                                              
./ ADD NAME=DRAUDIT                                                             
//DRAUDIT  JOB ?JOBPARM                                                         
//*                                                                             
//AUDIT PROC                                                                    
//AUDIT    EXEC PGM=IKJEFT01,DYNAMNBR=20,PARM='%DRAUDIT'                        
//SYSEXEC   DD  DSN=HSM.SAMPLE.TOOL,DISP=SHR                                    
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//SYSTERM   DD  SYSOUT=*                                                        
//AGDET     DD  SYSOUT=*,RECFM=FBA,LRECL=133                                    
//AGSUMM    DD  SYSOUT=*,RECFM=FBA,LRECL=133                                    
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//AUDIT    PEND                                                                 
//STEP1  EXEC AUDIT                                                             
//AUDIT.INCNTL DD  *                                                            
AGGNAME1                                                                        
AGGNAME2                                                                        
  .                                                                             
  .                                                                             
  .                                                                             
AGGNAMEN                                                                        
/*                                                                              
./ ADD NAME=DRBACKUP                                                            
//DRBACKUP JOB ?JOBPARM                                                         
//*                                                                             
//TEST1 EXEC DRBACKUP                                                           
//ABACKUP.SYSTSIN DD  *                                                         
    %DRBACKUP  TEST1 UNIT(3480X) EXECUTE +                                      
               INPUT('IB996RV.TEST.ABARS.CNTL(TEST1)')                          
//ABARPOST.SYSTSIN DD  *                                                        
    %ABARPOST  TEST1 UNIT(3480X)                                                
/*                                                                              
./ ADD NAME=DRSCAN                                                              
//DRSCAN   JOB ?JOBPARM                                                         
//*                                                                             
//DRSCAN PROC                                                                   
//*********************************************************************         
//******   ABARS ABACKUP PRE PROCESSOR                                          
//******    1) ELIMINATES 'ARCIVE' DATASETS FROM AGGREGATE                      
//******    2) SET UP ENVIRONMENT FOR POST PROCESSING                           
//*********************************************************************         
//ABACKUP  EXEC PGM=IKJEFT01,DYNAMNBR=20                                        
//SYSPROC   DD  DSN=?????????.ISPCLIB,DISP=SHR                                  
//SYSEXEC   DD  DSN=HSM.SAMPLE.TOOL,DISP=SHR                                    
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//SYSTERM   DD  SYSOUT=*                                                        
//ABRPT     DD  SYSOUT=*,RECFM=FBA,LRECL=133                                    
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//DRSCAN  PEND                                                                  
//STEP1  EXEC DRSCAN                                                            
//ABACKUP.SYSTSIN DD  *                                                         
    %DRSCAN  LMDB204 UNIT(3480X) VERIFY                                         
    %DRSCAN  LMDB304 UNIT(3480X) VERIFY                                         
    %DRSCAN  LMDB309 UNIT(3480X) VERIFY                                         
    %DRSCAN  LMDB312 UNIT(3480X) VERIFY                                         
/*                                                                              
./ ADD NAME=HSMPATCH                                                            
//HSMPTCH JOB ?JOBPARM                                                          
//IKJACCT EXEC PGM=IKJEFT01,DYNAMNBR=20                                         
//SYSPRINT DD  DUMMY                                                            
//SYSTSPRT DD  SYSOUT=*                                                         
//SYSTERM  DD  SYSOUT=*                                                         
//SYSIN    DD  DUMMY,DCB=BLKSIZE=80                                             
//SYSTSIN  DD  *                                                                
    HSEND PATCH .ABRCB.+81 BITS(.....1..)                                       
//*                                                                             
./ ADD NAME=SETABKUP                                                            
//SETABKP JOB ?JOBPARM                                                          
//DRBACKUP PROC                                                                 
//*********************************************************************         
//******   ABARS ABACKUP PRE PROCESSOR IF %DRBACKUP IS USED:                    
//******    1) ELIMINATES 'ARCIVE' DATASETS FROM AGGREGATE                      
//******    2) SET UP ENVIRONMENT FOR POST PROCESSING                           
//*********************************************************************         
//*********************************************************************         
//******   ABARS POST PROCESSOR                                                 
//******    1) WRITES ACTIVITY LOG TO DDNAME 'LOG'                              
//******       IF ABACKUP IS GOOD.....                                          
//******    2) WRITES ARECOVER STATEMENTS TO ARECOVER PARMS DATASET             
//******    3) CREATES DATASET ATTRIBUTE DETAIL REPORT                          
//*********************************************************************         
//ABARPOST EXEC PGM=IKJEFT01,DYNAMNBR=20                                        
//SYSEXEC   DD  DSN=HSM.SAMPLE.TOOL,DISP=SHR                                    
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//LOG       DD  SYSOUT=*,RECFM=FBA,LRECL=133                                    
//SYSTERM   DD  SYSOUT=*                                                        
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//DRBACKUP PEND                                                                 
//DAVETEST EXEC DRBACKUP                                                        
//ABARPOST.SYSTSIN DD  *                                                        
    %ABARPOST  DAVETEST UNIT(3490)                                              
//                                                                              
    HSEND WAIT ABACKUP DAVETEST UNIT(3490) EXECUTE                              
    %ABARPOST  DAVETEST UNIT(3490)                                              
./ ADD NAME=SLEEPASM                                                            
CMDNAME  TITLE ' TSO SLEEP COMMAND'                                             
         SPACE 1                                                                
***********************************************************************         
*                                                                     *         
*   COPYRIGHT IBM CORP. 2008                                      @ZRC*         
*                                                                     *         
*                                                                     *         
*        COMMAND SLEEP PUTS A REXX EXEC TO SLEEP FOR A                *         
*        SPECIFIED AMOUNT OF SECONDS. COMMAND USED IN ABARS           *         
*        UTILITIES TO ATTEMPT TO RESOLVE DATASET ALLOCATION           *         
*        CONFLICTS.                                                   *         
*                                                                     *         
*        COMMAND SYNTAX:                                              *         
*                                                                     *         
*              SLEEP <NUMBER_OF_SECONDS>                              *         
*                    'ONLY' 15 DIGITS ALLOWED                         *         
*                    ONLY NUMERICS ALLOWED                            *         
*                    DEFAULT IS 60 SECONDS                            *         
*                                                                     *         
***********************************************************************         
         SPACE 1                                                                
SLEEP    CSECT                                                                  
         SAVE  (14,12),,SLEEP(&SYSTIME._&SYSDATE) SAVE REGISTERS                
         LR    R12,R15             LOAD REGISTER 12 WITH ENTRY ADDRESS          
         USING SLEEP,R12           ESTABLISH ADDRESSABILITY TO SLEEP            
         ST    R13,SAVEAREA+4      STORE ADDRESS OF PREVIOUS SAVEAREA           
         LA    R2,SAVEAREA         TEMP ADDRESS OF SAVEAREA                     
         ST    R2,8(,R13)          STORE ADDRESS OF CURRENT SAVEAREA            
*                                    IN PREVIOUS SAVEAREA                       
         LR    R13,R2              OUR SAVE AREA.                               
         L     R6,0(,R1)           POINT TO THE COMMAND BUFFER                  
         LH    R5,2(,R6)           LOAD INDEX INTO COMMAND BUFFER.              
         LA    R4,4(R5,R6)         POINT TO COMMAND ARGUMENT                    
         LH    R3,0(,R6)           GET LENGTH OF COMMAND BUFFER                 
         SR    R3,R5               SUBTRACT THE COMMAND CODE LENGTH             
         SH    R3,=H'4'            SUBTRACT LENGTH OF PREFIX.                   
         BZ    STAX                BRANCH TO PROCESS ARGUMENT                   
ARGPROC  CH    R3,=H'15'           ONLY 15 CHARACTERS IN ARG.                   
         BH    ERRMSG1               BIN                                        
         LR    R2,R3               SET UP VALIDITY CHECK LOOP                   
         LR    R7,R4               SET UP ADDRESS REG FOR VAL. CHECK            
VALLOOP  CLI   0(R7),C'0'          LARGER THAN SMALLEST NUM?                    
         BL    ERRMSG2               BIN                                        
         CLI   0(R7),C'9'          SMALLER THAN LARGEST NUM?                    
         BH    ERRMSG2               BIN                                        
         LA    R7,1(,R7)           INCREMENT ARG. POINTER                       
         BCT   R2,VALLOOP            BRANCH IF MORE ARG. CHARS.                 
         BCTR  R3,*-*              DECREMENT FOR EX INSTRUCTION                 
         EX    R3,PACK             PACK THE EBCDIC NUMBER.                      
         CVB   R2,DEC              CONVERT IT TO BINARY                         
         MH    R2,=H'100'          GET THE NUMBER IN HUNDREDS OF A SEC.         
         ST    R2,TIME             SAVE IT FOR STIMER.                          
         EJECT                                                                  
STAX     STAX  WAKEUP,             ADDRESS OF EXIT ROUTINE             .        
               OBUF=(ATTNMSG,L'ATTNMSG), MESSAGE TO INTERRUPTER        .        
               TOPLEVL=YES         THIS IS A TOP LEVEL INTERRUPT.               
         LTR R15,R15               STAX SUCCESSFUL?                             
         BZ STIMER                   BIY                                        
         TPUT  MSG3,L'MSG3         ISSUE WARNING AND CONTINUE                   
STIMER   STIMER REAL,              SET THE SPECIFIED INTERVAL          .        
               WAKEUP,             ADDRESS OF EXIT ROUTINE             .        
               BINTVL=TIME         TIME INTERVAL FOR SLEEP                      
         WAIT  1,                  WAIT FOR TIMER EXPIRATION           .        
               ECB=WECB,           ECB TO BE POSTED AFTER TIMER EXP    .        
               LONG=YES            SWAP OUT WHILE AT SLEEP.                     
RETURN   L     R13,4(R13)          GET PREVIOUS SAVEAREA SCALE='0.8'.           
         RETURN (14,12),RC=0       RETURN TO THE TSO                            
ERRMSG1  TPUT  MSG1,L'MSG1         ISSUE ERROR MESSAGE                          
         B     ERRRETN                                                          
ERRMSG2  TPUT  MSG2,L'MSG2         ISSUE ERROR MESSAGE                          
         B     ERRRETN                                                          
ERRRETN  TPUT  MSGX,L'MSGX         ISSUE TERMINATION MESSAGE                    
         L     R13,4(R13)          GET PREVIOUS SAVE AREA.                      
         RETURN (14,12),RC=12      RETURN TO THE TSO USING RC = 12              
         EJECT                                                                  
*                                                                               
*  COMBINED WAKE UP ROUTINE FOR STIMER AND STAX                                 
*                                                                               
WAKEUP   SAVE  (14,12),,WAKEUP.ROUTINE                                          
         LR    R10,R15             ADDRESSABILITY IN EXIT.                      
         DROP R12                                                               
         USING WAKEUP,R10                                                       
         LA    R3,EXITSAVE         LOAD ADDRESS OF WORKAREA                     
         ST    R13,4(,R3)          STORE ADDRESS OF PREVIOUS SAVEAREA           
         ST    R3,8(,R13)          STORE ADDRESS OF CURRENT SAVEAREA            
*                                    IN PREVIOUS SAVEAREA                       
         LR    R13,R3              LOAD REGISTER 13 WITH ADDRESS OF             
*                                    CURRENT SAVEAREA                           
         POST  WECB                WAKE UP MAINLINE ROUTINE                     
         L     R13,4(R13)          GET PREVIOUS SAVEAREA.                       
         RETURN (14,12),RC=0       RETURN TO OS                                 
         DROP  R10                 REMOVE BASE REG. FOR EXIT                    
         USING SLEEP,R12           RE-ESTABLISH BASE REG. FOR SLEEP             
         EJECT                                                                  
ATTNMSG  DC    C'SLEEP STOPPED DUE TO ATTN'                  @FVC               
MSG1     DC    C'TIME LONGER THAN 16 CHARACTERS'                                
MSG2     DC    C'TIME NOT NUMERIC'                                              
MSG3     DC    C'STAX FAILED, SLEEP CONTINUES'                                  
MSGX     DC    C'SLEEP TERMINATED DUE TO ERROR'                                 
PACK     PACK  DEC,0(*-*,R4)                                                    
SAVEAREA DS    18F                 NORMAL SAVE AREA                             
EXITSAVE DS    18F                 EXIT ROUTINE SAVE AREA                       
WECB     DC    F'0'                MUST CONTAIN ZEROS AT WAIT TIME              
TIME     DC    F'6000'             TIMER DEFAULT (SET TO 60 SEC)                
DEC      DS    D                   DEC TIME VALUE (WORK FIELD)                  
         SPACE 3                                                                
         LTORG                                                                  
         EJECT                                                                  
R0       EQU   0                                                                
R1       EQU   1                                                                
R2       EQU   2                                                                
R3       EQU   3                                                                
R4       EQU   4                                                                
R5       EQU   5                                                                
R6       EQU   6                                                                
R7       EQU   7                                                                
R8       EQU   8                                                                
R9       EQU   9                                                                
R10      EQU   10                                                               
R11      EQU   11                                                               
R12      EQU   12                                                               
R13      EQU   13                                                               
R14      EQU   14                                                               
R15      EQU   15                                                               
         END   SLEEP                                                            
$$                                                                              
//HSMSTEP5 EXEC PGM=IEBGENER                                                    
//*                                                                             
//********************************************************************          
//* THESE ARE THE PROCEDURES FOR THE ABARS UTILITIES:            @04A*          
//*                                                              @04A*          
//* DRBACKUP - PROVIDES AGGREGATE BACKUP SUPPORT                 @04A*          
//* DRECOVER - PROVIDES AGGREGATE RECOVERY SUPPORT               @04A*          
//********************************************************************          
//*                                                                             
//SYSPRINT DD SYSOUT=*                                                          
//SYSUT2   DD UNIT=SYSDA,                                                       
//            DSN=HSM.ABARUTIL.PROCLIB(DRBACKUP),                               
//            DISP=(NEW,CATLG),                                                 
//            DCB=(RECFM=FB,LRECL=80),                                          
//            SPACE=(CYL,(1,1,5))                                               
//SYSIN    DD DUMMY                                                             
//SYSUT1   DD DATA,DLM='$$'                                                     
//DRBACKUP PROC                                                                 
//*********************************************************************         
//******   ABARS ABACKUP PRE PROCESSOR IF %DRBACKUP IS USED:                    
//******    1) ELIMINATES 'ARCIVE' DATASETS FROM AGGREGATE                      
//******    2) SET UP ENVIRONMENT FOR POST PROCESSING                           
//*********************************************************************         
//ABACKUP  EXEC PGM=IKJEFT01,DYNAMNBR=20,TIME=1440                              
//SYSEXEC   DD  DSN=HSM.SAMPLE.TOOL,DISP=SHR                                    
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//SYSTERM   DD  SYSOUT=*                                                        
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//*********************************************************************         
//******   ABARS POST PROCESSOR                                                 
//******    1) WRITES ACTIVITY LOG TO DDNAME 'LOG'                              
//******       IF ABACKUP IS GOOD.....                                          
//******    2) WRITES ARECOVER STATEMENTS TO ARECOVER PARMS DATASET             
//******    3) CREATES DATASET ATTRIBUTE DETAIL REPORT                          
//*********************************************************************         
//ABARPOST EXEC PGM=IKJEFT01,DYNAMNBR=20                                        
//SYSEXEC   DD  DSN=HSM.SAMPLE.TOOL,DISP=SHR                                    
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//LOG       DD  SYSOUT=*,RECFM=FBA,LRECL=133                                    
//SYSTERM   DD  SYSOUT=*                                                        
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//*********************************************************************         
//******   ABENDBK - ISSUE U0100 ABEND CODE IF ABACKUP  STEP ISSUES             
//******   A RETURN CODE NOT EQUAL TO 0                                         
//*********************************************************************         
//ABENDBK EXEC PGM=GPABEND,COND=(0,EQ,ABACKUP)                                  
//SYSOUT  DD SYSOUT=*                                                           
$$                                                                              
//HSMSTEP6 EXEC PGM=IEBUPDTE,PARM=NEW                                           
//SYSPRINT DD SYSOUT=*                                                          
//SYSUT2   DD DSN=HSM.ABARUTIL.PROCLIB,                                         
//            DISP=OLD                                                          
//SYSIN    DD DATA,DLM='$$'                                                     
./ ADD NAME=DRECOVER                                                            
//DRECOVER PROC                                                                 
//*********************************************************************         
//******   ABARS ARECOVER                                                       
//*********************************************************************         
//ARECOVER EXEC PGM=IKJEFT01,DYNAMNBR=20,TIME=1440                              
//SYSEXEC   DD  DSN=HSM.SAMPLE.TOOL,DISP=SHR                                    
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//LOG       DD  SYSOUT=*                                                        
//SYSTERM   DD  SYSOUT=*                                                        
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//*********************************************************************         
//******   ABENDBK - ISSUE U0100 ABEND CODE IF ARECOVER STEP ISSUES             
//******   A RETURN CODE NOT EQUAL TO 0                                         
//*********************************************************************         
//ABENDBK EXEC PGM=GPABEND,COND=(0,EQ,ARECOVER)                                 
//SYSOUT  DD SYSOUT=*                                                           
$$                                                                              
//HSMSTEP7 EXEC PGM=IEBGENER                                                    
//*                                                                             
//********************************************************************          
//* THIS IS THE ABARS UTILITIES REFERENCE MATERIAL:              @04A*          
//*                                                              @04A*          
//* ABARTREF - ABARS UTILITIES TECHNICAL REFERENCE               @04A*          
//* ABARUG   - ABARS UTILITIES USER'S GUIDE                      @04A*          
//*                                                              @04A*          
//********************************************************************          
//*                                                                             
//SYSPRINT DD SYSOUT=*                                                          
//SYSUT2   DD UNIT=SYSDA,                                                       
//            DSN=HSM.ABARUTIL.DOCS(ABARTREF),                                  
//            DISP=(NEW,CATLG),                                                 
//            DCB=(RECFM=FB,LRECL=80),                                          
//            SPACE=(CYL,(1,1,10))                                              
//SYSIN    DD DUMMY                                                             
//SYSUT1   DD DATA,DLM='$$'                                                     
.CM  GDOC SEC='UNCLASSIFIED'                                                    
:GDOC SEC='(C)COPYRIGHT INTERNATIONAL BUSINESS MACHINES CORPORATION 1994        
.CM  QPRINT DCF OPTIONS 'TWOPASS CONT PROF(DSMPROF3'                            
:FRONTM.                                                                        
:TITLEP.                                                                        
:TITLE.ABARS REXX UTILITIES                                                     
:TITLE.TECHNICAL REFERENCE                                                      
:ADDRESS.                                                                       
:ALINE.D. L. HEGGEN                                                             
:ALINE.214 280-5432                                                             
:ALINE.TIE 542-5432                                                             
:EADDRESS.                                                                      
:ADDRESS.                                                                       
:ALINE.IBM CORPORATION                                                          
:ALINE.DEPARTMENT 1MJD                                                          
:ALINE.1605 LBJ FREEWAY                                                         
:ALINE.DALLAS, TEXAS  75234                                                     
:EADDRESS.                                                                      
:DATE.FEBRUARY 7TH, 1994                                                        
:ETITLEP.                                                                       
.LL 4I                                                                          
:TOC.                                                                           
.LL 6I                                                                          
:BODY                                                                           
:H2.INTRODUCTION                                                                
:P.ABARS STANDS FOR AGGREGATE BACKUP AND RECOVERY SYSTEM.  IT IS AN             
EXTENSION OF IBM'S DFHSM PRODUCT AND ALLOWS FOR THE BACKUP (AND IN THE          
CASE OF A DISASTER) THE RECOVERY OF AN APPLICATION'S DATA.  IT CREATES          
A TRANSPORTABLE LOGICAL (AS OPPOSED TO PHYSICAL) COPY OF THE                    
APPLICATION'S DATA.  THE USE OF LOGICAL COPIES ALLOWS FOR THE DATA              
TO BE RESTORED ON A DIFFERENT DEVICE TYPE THAN IT ORIGINATED.  THIS             
SIMPLIFIES RECOVERY, BECAUSE THE RECOVERY SITE NEED ONLY SUPPLY THE             
REQUIRED STORAGE CAPACITY FOR THE APPLICATION, NOT A SPECIFIC                   
CONFIGURATION.                                                                  
:P.THE ABARS UTILITIES ALLOW CUSTOMERS THE ABILITY TO TRACK AND CONTROL         
THE EXECUTION OF HUNDREDS OF ABARS AGGREGATES DEFINED IN THEIR                  
DATACENTERS.                                                                    
:H2.TECHNICAL DETAIL                                                            
:H3.UTILITY FLOW                                                                
:P.ASSUMING HSEND AND ABACKUP ARE RESTRICTED COMMANDS, APPLICATION              
OWNERS REQUEST A ABARS AGGREGATE TO BE SET-UP FOR THEIR USE.  IF                
DRBACKUP IS TO BE USED (AS OPPOSED TO THE REGULAR ABACKUP COMMAND),             
THE FIRST SELECTION DATASET IS NOT OWNED BY THE APPLICATION OWNER               
AND DEFINED TO DFSMS WITH A NAME THAT ALLOW STORAGE ADMINISTRATION              
WRITE ACCESS.  DRSCAN IS USED INITIALLY, TO SUPPLY INFORMATION                  
TO THE APPLICATION OWNER CONCERNING THE LOCATION OF THE DATASETS                
INCLUDED IN THE AGGREGATE.  AFTER A FEW ITERATIONS OF DRSCAN, THE               
INCLUDE/EXCLUDE LIST FOR THE AGGREGATE IS FINALIZED, AND PRODUCTION             
CAN START.  PRODUCTION JOBS OF THE DRBACKUP JCL PROCS ARE USUALLY               
SUBMITTED VIA A SCHEDULING PACKAGE (CA7,OPC/ESA,ETC).  THE ARECOVER             
PARMS PRODUCED AS OUTPUT FROM ABARPOST STEP OF THE DRBACKUP PROCEDURE           
ARE TRANSMITTED TO THE RECOVERY SITE IN COORDINATION WITH THE VAULTING          
CYCLE.                                                                          
:P.AT THE RECOVERY SITE, THE ARECOVER PARMS ARE MERGED TO A SINGLE PDS          
WITH THE AGGREGATE NAME AS THE MEMBER NAME (MOST TO LEAST RECENT,               
COPY WITHOUT REPLACEMENT).  APPLICATION OWNERS SCHEDULE THEIR                   
ARECOVER JOBS TO START (DETERMINE THE ORDER OF RESTORATION).  THESE             
JOBS READ THE PARMS DATASET AND EXECUTE THE ARECOVER COMMAND, COPY              
THE ACTIVITY LOG TO SYSOUT, AND UPDATE A DATASET WITH THE AGGREGATE             
NAME AND LOG DATASET NAME (FOR AUDIT).                                          
:P.AT SOME POINT IN TIME AN AUDIT IS EXECUTED WITH A LIST OF AGGREGATES         
TO BE CHECKED.  THE AUDIT LISTS THE LOGS FOR THE AGGREGATE, THE NUMBER          
OF TIMES AN ARECOVER HAS EXECUTED, AND CHECKS THE STATUS OF MOVEMENT            
OF EACH DATASET IN THE AGGREGATE TO THE RECOVERY SITE.                          
:H2.INSTALLATION                                                                
:H3.PRE-REQUISITE MAINTENANCE                                                   
:P.NEED PTF UY73400 TO WRITE MESSAGE ARC6030I TO THE SYSTEM LOG                 
(SYSLOG).  THIS MESSAGE CONTAINS THE NAME OF THE AGGREGATE AND THE              
NAME OF THE ACTIVITY LOG.                                                       
:P.NEED HSM PATCH AS DESCRIBED IN THE TEXT OF PTF UY73400                       
(PRESENTED LATER IN THIS DOCUMENT)                                              
:P.NEED APARS OY59794, OY60048, AND OY37378 TO ALLOW DCOLLECT TO                
GATHER DATA ON DFSMS CONSTRUCTS.                                                
:H3.AUTOMATED OPERATIONS INTERFACE                                              
:H4.ACTIVITY LOG NAME CAPTURE                                                   
:P.MESSAGE(S) ARC6030I MUST BE TRAPPED AND PARSED FOR THESE UTILITIES.          
THE UTILITIES NEED TO BE PRESENTED WITH THE ACTIVITY LOG DATASET NAME           
FOR A GIVEN AGGREGATE NAME.  INITIAL IMPLEMENTATION USED AUTOMATE/MVS           
AND IT SET GLOBAL VARIABLES THAT WE ACCESSED THROUGH THE UTILITIES.             
THE ARC6030I MESSAGE HAS 4 FLAVORS.  THERE ARE DIFFERENCES BETWEEN              
DFHSM 2.6 /DFSMSHSM 1.1 AND ABACKUP/ARECOVER.  SO DEPENDING ON THE              
RELEASE AND ACTIVITY, THE AUTOMATED OPERATIONS INTERFACE MAY NEED TO            
BE DIFFERENT. THE EXEC DR14AM IS AN EXAMPLE OF AN INTERFACE TO AUTOMATE         
AND EXEC DR14NV IS AN IMPLEMENTATION USING NETVIEW.  IN THE APPENDIX            
OF THIS DOCUMENT ARE INSTRUCTIONS/EXAMPLES OF IMPLEMENTATION OF THE             
NETVIEW INTERFACE.                                                              
:H4.DCOLLECT EXECUTIONS                                                         
:P.IF THE REXX EXEC DRBACKUP IS NECESSARY THEN                                  
ANY TIME THE AGGREGATE DEFINITION CHANGES, A DCOLLECT NEEDS TO                  
BE RUN TO CAPTURE THE NEW STRUCTURE.  FOR CONVENIENCE, WE SET UP                
AUTOMATE/MVS TO SUBMIT DCOLLECT WHENEVER A SETSMS ACTIVATE                      
WAS SUCCESSFUL (MSG IGD0008I).                                                  
:H4.ARECOVER PARMS TRANSMISSION                                                 
:P.THIS ENVIRONMENT VAULTS TAPES TWICE DAILY.  WE SET UP AN NDM                 
TRANSMISSION OF THE ARECOVER PARMS DATASET APPROXIMATELY 30 MINUTES             
PRIOR TO THE VAULT RUN.  IT IS SENT TO THE RECOVERY SITE AS A GDG PDS           
AND WITH A LIMIT OF 70.  WE THEN COPY TO THE ARECOVER.PARMS DATASET FROM        
THE GDGS STARTING FROM GDG(0) TO GDG(-69) WITHOUT REPLACEMENT                   
WITH THIS SETUP, OUR RECOVERY HAS THE MOST                                      
CURRENT ARECOVER COMMANDS FOR THE DAILY, WEEKLY, AND MONTHLY AGGREGATES.        
:H3.HSM SETUP                                                                   
:P.NEED THE DFSMS/HSM ARCCMDXX MEMBER TO SPECIFY SETSYS                         
ABARSACTLOGMSGLVL(FULL) TO INSURE ALL DFDSS MESSAGES ARE WRITTEN TO             
THE ACTIVITY LOG.  SETSYS ABARSACTLOGMSGLVL(FULL) IS THE DEFAULT IF             
NOT SPECIFIED.                                                                  
:P.WITH ABARS II, THE MINIMUM NUMBER OF TAPES NEEDED FOR AN AGGREGATE           
INCREASED FROM 2 TO 3 TAPES. A DFSMS/HSM PATCH EXISTS TO CHANGE THE             
MINIMUM TAPES NEEDED FOR A AGGREGATE BACK TO 2 TAPES.  IF THIS                  
PATCH IS APPLIED, CHANGES WILL NEED TO BE MADE TO DRXX TO NOT ELIMINATE         
THE LAST TWO DATASETS IN THE AGGREGATE FOR AUDIT (THEY WOULD HAVE BEEN          
THE INSTRUCTION DATASET AND THE ACTIVITY LOG FROM ABACKUP).                     
:H3.REXX EXECS AND JCL                                                          
:SL.                                                                            
:LI.COPY REXX EXECS TO PRODUCTION REXX LIBRARY                                  
:LI.ALLOCATE 2 DATASETS FOR THEIR USE                                           
:SL.                                                                            
:LI.HLQ.DCOLLECT.DATA (RECFM=VB,LRECL=644,DSORG=PS), SHOULD NEED NO             
MORE THAN 750KB, DFSMS CONSTRUCTS ARE RECORDED HERE, DRBACKUP UTILITY           
READS THE "AG" RECORD TYPES FOR THE SELECTION DATASET NAME.                     
:LI.HLQ.ARECOVER.PARMS (RECFM=FB,LRECL=80,DSORG=P0), SHOULD NEED NO             
MORE THAN 3750KB, ABARS ARECOVER COMMANDS ARE RECORDED HERE WITH THE            
ABACKUP ACTIVITY LOG NAME (CONTAINS THE DATE/TIME STAMP) AND A LIST OF          
DATASETS INCLUDED IN THE AGGREGATE FOR AUDIT PURPOSES.  THIS DATASET            
LIST IS AN IMPROVEMENT OVER MOUNTING TAPES AND READ THE CONTROL FILE            
OF THE AGGREGATE TO AUDIT.                                                      
:ESL.                                                                           
:LI.SPECIFY DATASET NAMES FOR THE UTILITIES USE IN THE REXX EXEC DR10.          
THIS EXEC IS CALLED AND THE RESULT IS PARSED TO SUPPLY 'GLOBAL                  
VARIABLES' FOR THE UTILITIES TO ALLOCATE THEIR DATASETS.                        
:OL.THE DATASETS ARE:                                                           
:LI.THE DCOLLECT DATASET - DISCUSSED EARLIER                                    
:LI.THE ARECOVER PARMS DATASET - DISCUSSED EARLIER                              
:LI.THE TEMPORARY HIGH LEVEL QUALIFIER - THIS IS USED BY VARIOUS                
UTILITIES FOR ALLOCATION OF 'TEMPORARY' DATASETS. IT WOULD BE                   
APPROPRIATE TO ASSOCIATE THIS HIGH-LEVEL QUALIFIER WITH A                       
MANAGEMENT CLASS THAT DELETES AFTER 2 DAYS UNREFERENCED.                        
THESE DATASETS ARE NORMALLY                                                     
ONLY A FEW TRACKS IN SIZE AND NEEDED ONLY FOR A SHORT PERIOD OF TIME            
AFTER ALLOCATION (E.G. ABARPOST WILL ALLOCATE A TEMP. DATASET WHEN              
ITS NEEDED AND DELETE IT. THIS DATASET                                          
CONTAINS INFORMATION FOR THE DSN DETAIL REPORT)                                 
:LI.THE ARECOVER LOGS DATASET (ALLOCATED BY ARECPROC WHEN NEEDED)               
:EOL.                                                                           
:LI.COPY DR10 TO MEMBER DR10SAVE IN THE SAME LIBRARY.  THIS CONVENTION          
SAVES THE INFORMATION IN DR10 SO THAT NEW DISTRIBUTIONS OF THE CODE             
CAN OVERLAY DR10 AND INSTALLATION SUPPLIED PARAMETERS CAN BE REINSTATED.        
:LI.COPY DRBACKUP AND DRECOVER PROCS TO A PROCLIB AVAILABLE TO BATCH            
JOBS.                                                                           
:LI.COPY DRBACKUP, DRECOVER, ARECPROC, AND DRAUDIT TO A JCL LIBRARY             
FOR SUBMISSION.                                                                 
:LI.COPY DR14AM (AUTOMATE/MVS) OR DR14NV(NETVIEW) TO DR14.  THIS WILL           
ENABLE THE SUPPLIED INTERFACE TO CONSOLE AUTOMATION.  AN EXAMPLE OF             
CONSOLE AUTOMATION VIA NETVIEW IS SUPPLIED IN THE APPENDIX OF THIS              
DOCUMENT.                                                                       
:LI.DECIDE IF DRBACKUP IS TO BE USED IN THIS INSTALLATION.... IF SO             
EXISTING AGGREGATES WILL NEED TO HAVE A DIFFERENT SELECTION DATASET.            
(ALTER THE AGGREGATE IN ISMF).                                                  
DRBACKUP WILL USE THE EXISTING SELECTION DATASET AS INPUT AND IT WILL           
RE-WRITE THE 'NEW' SELECTION DATASET FOR THE AGGREGATE.  DRBACKUP ALSO          
RESTRICTS THE AGGREGATE TO USE ONLY THE FIRST SELECTION DATASET (ABARS          
ALLOWS UP TO 5).                                                                
:ESL.                                                                           
:H2.PROGRAM DETAIL                                                              
:P.THE NAMING CONVENTION USED FOR EXECS IS AS FOLLOWS.  THE DRIVER              
EXECS ARE GIVEN A NAME INDICATIVE OF THEIR FUNCTION.  THE SUPPORTING            
EXECS ARE DRXYZ; WHERE X IS A NUMBER FROM 1-7 IDENTIFYING THE DRIVER            
EXEC THEY WERE DESIGNED TO SUPPORT, Y IS THE ORDER OF SEQUENCE THAT             
THEY ARE FIRST CALLED BY THE DRIVER, AND Z (IF USED) IS A SUBROUTINE            
USED BY THE DRXY SUPPORTING EXEC.  I TRIED TO GENERALIZE AND RE-USE             
THESE EXECS WHEREVER IT MADE SENSE.  SO DR10 IS USED BY ALL EXECS.              
DR13 IS USED TWICE BY DRBACKUP AND OPTIONALLY BY DRSCAN AND DRSEO.              
INSIDE THESE EXECS CAN BE OTHER INTERNAL SUBROUTINES FOR THEIR USE              
EXCLUSIVELY.  FOR EXAMPLE, WRITEAA IS A SUBROUTINE IN DR15 AND ITS              
USE IS TO WRITE THE ALLOCATE/ACCOMPANY STATEMENTS TO THE ABARS                  
SELECTION DATASET.                                                              
:H3.DRBACKUP EXEC                                                               
:OL.DRIVER EXEC FOR DRBACKUP FUNCTION. PARAMETERS PASSED ARE THE                
AGGREGATE NAME, TAPE UNIT, EXECUTE/VERIFY, AND THE INPUT DATASET.               
OUTPUT WILL BE RETURN CODE 16, IF A PROBLEM IS FOUND WITH EXECUTION,            
OR THE RETURN CODE FROM ABACKUP.                                                
:LI.SUPPRESSES TSO MESSAGES                                                     
:LI.CALLS DR10 TO GET GLOBAL PARAMETERS                                         
:LI.CALLS DR11 TO PARSE PARAMETERS SENT                                         
:LI....QUITS IF PROBLEM FOUND                                                   
:LI.CALLS DR12 TO GET SELECTION DATASET FROM DCOLLECT DATA                      
:LI....QUITS IF PROBLEM FOUND                                                   
:LI.CALLS DR13 TO COPY INPUT DATASET TO SELECTION DATASET                       
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.ISSUES ABACKUP ...VERIFY COMMAND                                            
:LI.CALLS DR14 TO LOCATE ABARS ACTIVITY LOG NAME                                
:LI.CALLS DR15 TO PARSE LOG AND EXCLUDE 'ARCIVE' DATASETS                       
:LI.CALLS DR13 TO COPY REVISED INPUT DATASET TO SELECTION DATASET               
:LI.ISSUES ABACKUP COMMAND WITH OPTION SUPPLIED AS PARAMETER                    
:LI.CALLS DR16 TO CLEAR AGGREGATE'S SELECTION DATASET                           
:EOL.                                                                           
:H3.DR10 EXEC                                                                   
:OL.GLOBAL VARIABLES EXEC                                                       
NO PARAMETERS ARE PASSED TO THIS EXEC. IT'S CALLED                              
FROM ALL DRIVER EXECS AND RETURNS GLOBAL VARIABLES.                             
:LI.SETS STRINGS UP AS VARIABLES TO BE USED BY ALL UTILITIES                    
:LI.RETURNS VARIABLES AS RESULT                                                 
:EOL.                                                                           
:H3.DR11 EXEC                                                                   
:OL.PERFORMS EDITS ON PARAMETERS PASSED TO DRBACKUP                             
:LI.CHECKS TO SEE THAT ALL VARIABLES ARE PASSED                                 
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.CHECKS TO SEE THAT EITHER 'EXECUTE' OR 'VERIFY' WAS REQUESTED               
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.PARSES OUT INPUT DATASET SPECIFICATION                                      
:LI.CHECKS TO SEE IF INPUT DATASET EXISTS                                       
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.RETURNS INPUT DATASET NAME AS RESULT, IF SUCCESSFUL                         
:EOL.                                                                           
:H3.DR12 EXEC                                                                   
:OL.READS THE DCOLLECT DATA FOR AGGREGATE STRUCTURE                             
PASSED THE AGGREGATE NAME AND THE DCOLLLECT.DATA GLOBAL VARIABLE.               
LOGIC IN THE EXEC GETS ALL SELECTION DATASETS FOR THE AGGREGATE                 
BUT IT RETURNS ONLY THE FIRST SELECTION DATASET.  WE'LL NEED APAR               
OW01729 TO ALLOW THE USE OF MORE THAN 1 SELECTION DATASET IN DRBACKUP.          
:LI.ALLOCATES DCOLLECT DATASET                                                  
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.LOOKS FOR AG RECORD TYPE AND THIS AGGREGATE'S NAME IN THE RECORD            
:LI....EXITS EXEC IF NOT FOUND                                                  
:LI.LOOPS THROUGH SELECTION DATASETS                                            
:LI.CONSTRUCTS THE AGGREGATE'S FIRST SELECTION DATASET NAME                     
:LI.RETURNS SELECTION DATASET NAME AS RESULT, IF SUCCESSFUL                     
:EOL.                                                                           
:H3.DR13 EXEC                                                                   
PASSED THE AGGREGATE NAME AND THE INPUT AND OUTPUT DATASET.                     
NOTHING IS PASSED BACK IF NO ERROR IS DETECTED.                                 
:OL.COPIES THE INPUT DATASET TO THE SELECTION (OUTPUT) DATASET                  
:LI.CHECKS TO INSURE INPUT DATASET AND OUTPUT DATASET AREN'T THE SAME           
:LI....EXITS EXEC IF THEY ARE THE SAME                                          
:LI.INSURES THE SELECTION DATASET EXISTS ON THE SYSTEM                          
:LI....EXITS EXEC IF NOT FOUND                                                  
:LI.ALLOCATES OUTPUT, INPUT, AND UTILITY DATASETS                               
:LI.CALLS IEBGENER TO PERFORM COPY                                              
:LI.RETURNS 0                                                                   
:EOL.                                                                           
:H3.DR14 EXEC                                                                   
PASSED THE AGGREGATE NAME.                                                      
:OL.GET THE ACTIVITY LOG NAME FOR THE AGGREGATE                                 
:LI.SHUTS OFF TSO MESSAGES                                                      
:LI.CREATES THE VARIABLE NAME SAVED FOR US BY AUTOMATE/MVS                      
:LI.ISSUES AUTOMATE GETVAR COMMAND TO BE RETURNED THE LOGNAME                   
:LI.CREATE A FULLY QUALIFIED NAME OUT OF THE LOGNAME RETURNED                   
:LI.RETURN WITH LOGNAME AS THE RESULT                                           
:EOL.                                                                           
:H3.DR15 EXEC                                                                   
:OL.READ THE LOG AND THE INPUT DATASET AND CREATE THE REVISED INPUT             
PASSED THE AGGREGATE NAME, SELECTION DSN, AND ACTIVITY LOG DSN                  
PARSING LOGIC ALSO EXISTS HERE CAPABLE OF DEALING WITH MULTIPLE                 
SELECTION DATASETS.  CHANGES NEED TO BE MADE HERE AND DR12 TO ALLOW             
MORE THAN ONE SELECTION DATASET TO BE USED.  SEE DR12.                          
:LI.SHUTS OFF TSO MESSAGES                                                      
:LI.ALLOCATE AND READ THE ACTIVITY LOG                                          
:LI.CHECK TO INSURE ACTIVITY LOG IS FROM VERIFY FUNCTION                        
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.PARSES FOR STARTING AND ENDING MESSAGES OF INC/EXC STMTS                    
:LI.BETWEEN STARTING AND ENDING MESSAGES, PARSE FOR DATASET NAMES               
:LI.ISSUE LISTCAT COMMAND WITH DATASET NAME                                     
:LI.CALL DR151 FOR POSSIBLE DATASET ELIMINATION                                 
:LI.IF NOT EXCLUDED, PLACE DSN ON STEM VARIABLE                                 
.HR LEFT RIGHT                                                                  
:LI.READ SELECTION DATASET                                                      
:LI.PARSE IT FOR ALLOCATE/ACCOMPANY STATEMENTS                                  
:LI.PLACE ALLOCATE/ ACCOMPANY STATEMENTS ON STEM VARIABLES                      
.HR LEFT RIGHT                                                                  
:LI.ALLOCATE A TEMPORARY DATASET                                                
:LI.WRITE INCLUDE STATEMENTS TO TEMPORARY DATASET                               
:LI.WRITE ALLOCATE/ACCOMPANY STATEMENTS TO TEMPORARY DATASET                    
:LI.RETURN TEMPORARY DATASETNAME                                                
:EOL.                                                                           
:H3.DR16 EXEC                                                                   
PASSED THE AGGREGATE NAME AND SELECTION DATASET NAME.                           
:OL.PREVENTS ABACKUP FROM ATTEMPTING SUCCESSFUL EXECUTION                       
:LI.WRITES COMMENT TO DATASET AS 1 RECORD                                       
:LI.CLOSE DATASET                                                               
:EOL.                                                                           
.PA                                                                             
:H3.ABARPOST EXEC                                                               
:OL.DRIVER EXEC FOR ABARPOST FUNCTION                                           
:LI.SUPPRESSES TSO MESSAGES                                                     
:LI.CALLS DR10 TO GET GLOBAL PARAMETERS                                         
:LI.CALLS DR14 TO LOCATE ABARS ACTIVITY LOG NAME                                
:LI.CALLS DR21 TO PARSE LOG, COPY TO SYSOUT, CODE ARECOVER, AND                 
GATHER INFORMATION FOR DSN DETAIL REPORT                                        
:LI.CALLS DR22 TO CREATE DSN DETAIL REPORT                                      
:EOL.                                                                           
:H3.DR21 EXEC                                                                   
:OL.PARSES THE LOG FOR REQUIRED FUNCTIONS                                       
:LI.ALLOCATE REPORT DATASET                                                     
:LI.ALLOCATE ACTIVITY LOG                                                       
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.READ LOG UNTIL EOF                                                          
:SL.                                                                            
:LI.WRITE LOG RECORD TO DDNAME LOG                                              
:LI.LOOK FOR THE LAST MESSAGE                                                   
:LI....SET THE RETURN CODE TO THE RETURN CODE IN THE LOG                        
:LI.LOOK FOR THE MESSAGE WITH THE CONTROL DATASET INFORMATION                   
:LI....SAVE THIS FOR ARECOVER COMMAND                                           
:LI.LOOK FOR THE DF/DSS DATASET MESSAGES                                        
:LI....CALL DR212 TO GATHER DETAIL DATASET INFORMATION                          
:LI.......WRITE DSN DETAIL TO DSN DETAIL DATASET                                
:ESL.                                                                           
:LI.INSURE PARMS DATASET IS AVAILABLE                                           
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.ALLOCATE ARECOVER PARMS DATASET                                             
:LI.CALL DR211 TO SET UP ARECOVER COMMAND                                       
:LI.WRITE ARECOVER PARMS AND DATASETS TO ARECOVER PARMS DATASET                 
:LI.RETURN                                                                      
:EOL.                                                                           
:H3.DR22 EXEC                                                                   
:OL.                                                                            
:LI.ALLOCATE THE DSN DETAIL DATASET                                             
:LI.READ THE DSN DETAIL DATASET                                                 
:LI.WRITE REPORT TO THE LOG DDNAME                                              
:LI.CLOSE DATASETS                                                              
:EOL.                                                                           
.PA                                                                             
:H3.ARECPROC EXEC                                                               
:OL.DRIVER EXEC FOR ARECPROC FUNCTION                                           
:LI.SUPPRESSES TSO MESSAGES                                                     
:LI.CALLS DR10 TO GET GLOBAL PARAMETERS                                         
:LI.CALLS DR31 TO READ ARECOVER PARMS DATASET AND ISSUE ARECOVER                
:LI.CALLS DR14 TO LOCATE ABARS ACTIVITY LOG NAME                                
:LI.CALLS DR31 TO PROCESS THE ABARS ACTIVITY LOG                                
:EOL.                                                                           
:H3.DR31 EXEC                                                                   
:OL.READ, PARSE, CREATE, AND EXECUTE ARECOVER COMMAND                           
:LI.DETERMINE THE RELEASE OF DFHSM AT RECOVERY SITE                             
:LI.ALLOCATES ARECOVER PARMS DATASET                                            
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.READS AND PARSES ARECOVER PARMS                                             
:LI.CREATE AND EXECUTE HSEND ARECOVER COMMAND                                   
:LI.RETURN                                                                      
:EOL.                                                                           
:H3.DR32 EXEC                                                                   
:OL.READS THE ARECOVER LOG AND TRACKS THE ARECOVER EXECUTIONS                   
:LI.CHECKS TO SEE OF THE ARECOVER ACTIVITY LOG EXISTS                           
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.READS THROUGH THE LOG FOR THE ENDING RETURN CODE                            
:LI.ALLOCATES THE LOG OF LOGS DATASET IF NOT FOUND                              
:LI.WRITES 1 RECORD TO LOL DATASET WITH DISP=MOD                                
:LI.RETURN                                                                      
:EOL.                                                                           
.PA                                                                             
:H3.DRAUDIT EXEC                                                                
:OL.READS AGGREGATE NAMES AS INPUT AND CREATES AUDIT SUMMARY REPORT             
:LI.OPEN INPUT INCNTL AND OUTPUT AGSUMM DDNAMES                                 
:LI.READ FIRST RECORD FROM INCNTL                                               
:LI.DO WHILE NOT EOF                                                            
:LI....COUNT THE AGGREGATES WE ARE PROCESSING                                   
:LI....CHECK IF WE NEED A NEW REPORT HEADING                                    
:LI....CALL ARAUDIT WITH THE AGGREGATE NAME                                     
:LI....PARSE RESULT FOR THE NUMBER OF DATASETS AND THE NUMBER OF ERRORS         
:LI....WRITE LINE TO THE SUMMARY REPORT                                         
:LI....COUNT THE DATASETS AND ERRORS                                            
:LI.WRITE TOTAL AGGREGATES, DATASETS AND ERRORS                                 
:EOL.                                                                           
:H3.ARAUDIT EXEC                                                                
:OL.CALL DR10 TO SET UP GLOBAL PARAMETERS                                       
:LI.CALL DR41 TO CREATE AUDIT DETAIL REPORT                                     
:LI.RETURN WITH THE NUMBER OF DATASETS AND ERRORS                               
:EOL.                                                                           
:H3.DR41 EXEC                                                                   
:OL.                                                                            
:LI.READ THE LOG OF LOGS DATASET                                                
:LI.DO WHILE NOT EOF                                                            
:LI....IF AGGREGATE NAME EQUALS THE AGGREGATE NAME IN THE LOL                   
:LI....TALLY THE MATCH                                                          
:LI....SAVE THE ACTIVITY LOG DSN                                                
:LI.CHECK TO SEE WE HAD MATCHES                                                 
:LI....IF NOT, PROVIDE MESSAGE 'ALL DATASETS IN ERROR'                          
:LI....OTHERWISE, LIST THE ACTIVITY LOG DATASET NAME                            
:LI.PROVIDE THE COUNT OF LOG NAMES AS THE # OF TIMES ARECOVER EXECUTED          
:LI.ALLOCATE THE ARECOVER PARMS DATASET                                         
:LI.SKIP OVER THE FIRST 6 RECORDS                                               
:LI.READ UNTIL EOF                                                              
:LI....PARSE OUT DSN OF DATASET IN THE AGGREGATE                                
:LI....ISSUE LISTDSI COMMAND AGAINST THE DATASET                                
:LI....IF ERROR                                                                 
:LI.......WRITE DETAIL LINE WITH DATASET NAME AND NATURE OF THE ERROR           
:LI.IF NO ERRORS                                                                
:LI....WRITE DETAIL LINE INDICATING NO DATASETS WITH ERRORS                     
:LI.RETURN WITH THE NUMBER OF DATASETS AND ERRORS                               
:EOL.                                                                           
.PA                                                                             
:H3.DRSCAN EXEC                                                                 
:OL.DRIVER EXEC FOR DRSCAN FUNCTION                                             
:LI.SUPPRESSES TSO MESSAGES                                                     
:LI.CALLS DR10 TO GET GLOBAL PARAMETERS                                         
:LI.CHECKS TO SEE IF THE INPUT PARAMETER WAS SENT                               
:LI....IF SO, CHECKS TO SEE IF THE INPUT DATASET EXISTS                         
:LI.......IF NOT, EXITS WITH ERROR MESSAGE                                      
:LI.CHECKS TO SEE IF THE INPUT PARAMETER WAS SENT                               
:LI....PARSES THE INPUT DSN OUT OF THE INPUT PARAMETER                          
:LI....CALLS DR12 TO GET SELECTION DATASET FROM DCOLLECT DATA                   
:LI....QUITS IF PROBLEM FOUND                                                   
:LI.CHECKS TO SEE IF THE INPUT PARAMETER WAS SENT                               
:LI....CALLS DR13 TO COPY INPUT DATASET TO SELECTION DATASET                    
:LI......EXITS EXEC IF PROBLEM FOUND                                            
:LI.ISSUES ABACKUP ...VERIFY COMMAND                                            
:LI.CALLS DR14 TO LOCATE ABARS ACTIVITY LOG NAME                                
:LI.CALLS DR51 TO PARSE LOG AND LIST DSN INFORMATION                            
:LI.CHECKS TO SEE IF THE INPUT PARAMETER WAS SENT                               
:LI....CALLS DR16 TO CLEAR AGGREGATE'S SELECTION DATASET                        
:EOL.                                                                           
:H3.DR51 EXEC                                                                   
:OL.READ THE LOG AND LIST THE DATASET LOCATIONS/CHARACTERISTICS                 
:LI.SHUTS OFF TSO MESSAGES                                                      
:LI.ALLOCATE AND READ THE ACTIVITY LOG                                          
:LI.CHECK TO INSURE ACTIVITY LOG IS FROM VERIFY FUNCTION                        
:LI....EXITS EXEC IF PROBLEM FOUND                                              
:LI.PARSES FOR STARTING AND ENDING MESSAGES OF INC/EXC STMTS                    
:LI.BETWEEN STARTING AND ENDING MESSAGES, PARSE FOR DATASET NAMES               
:LI.ISSUE LISTCAT COMMAND WITH DATASET NAME                                     
:LI.CALL DR151 TO SEE IF DATASET IS ARCIVE'D                                    
:LI.IF NOT ARCIVE'D, CALL INTDSN TO INTERROGATE THE DSN INFO                    
:LI.WRITE DSN AND INFO TO SYSOUT                                                
:EOL.                                                                           
.PA                                                                             
:H3.DRSEO EXEC                                                                  
:P.FUNCTION IS THE SAME AS DRSCAN BUT DATASETS LISTED ARE EXCEPTION             
(EXCLUSION) CANDIDATES ONLY.                                                    
.FO OFF                                                                         
:H2.ANCILLARY JCL                                                               
:H3.DCOLLECT JCL                                                                
//IB996RVP JOB (800000),'HEGGEN IDCAMS  X6678',CLASS=R,MSGCLASS=U,              
//         NOTIFY=IB996RV                                                       
//*                                                                             
//STEP1 EXEC PGM=IDCAMS                                                         
//SYSPRINT DD SYSOUT=*                                                          
//SYSIN    DD *                                                                 
  DCOLLECT OUTDATASET(IB996RV.DCOLLECT.DATA) SMSDATA(ACTIVE) REPLACE            
/*                                                                              
:H3.HSMPATCH JCL                                                                
//IB996RVT JOB (800000),'HEGGEN IDCAMS  X6678',CLASS=R,MSGCLASS=U,              
//         NOTIFY=IB996RV                                                       
//IKJACCT EXEC PGM=IKJEFT01,DYNAMNBR=20                                         
//SYSHELP  DD  DSN=SYS1.HELP,DISP=SHR                                           
//SYSPRINT DD  DUMMY                                                            
//SYSTSPRT DD  SYSOUT=*                                                         
//SYSTERM  DD  SYSOUT=*                                                         
//SYSIN    DD  DUMMY,DCB=BLKSIZE=80                                             
//SYSTSIN  DD  *                                                                
    HSEND PATCH .ABRCB.+81 BITS(.....1..)                                       
//*                                                                             
:H2.ERROR MESSAGES                                                              
:H3.DRBACKUP                                                                    
:OL.                                                                            
:LI.DRBACKUP: AGGREGATE VERIFY FAILED, CHECK REPORT IN LOGDSN                   
:P.ISSUED ABACKUP ...VERIFY COMMAND AND RECEIVED A NON-ZERO RETURN              
CODE.  NOT MUCH SENSE IN CONTINUING WITH EXECUTION, WE KNOW AN EXECUTE          
WILL NOT WORK.  MESSAGE IS GENERATED BY DRBACKUP EXEC.                          
:LI.DRBACKUP: 4 REQUIRED PARAMETERS NOT SUPPLIED                                
    DRBACKUP: NEED AGGREGATE NAME, TAPE UNIT, EXECUTE/VERIFY,                   
         AND INPUT DSN (FULLY QUALIFIED)                                        
:P.CHECKED ALL FOUR PARAMETERS TO DRBACKUP FOR A NULL STRING AND FOUND          
AT LEAST ONE NULL STRING.  A SPACE BETWEEN PARAMETERS IS REQUIRED.              
A MISSING PARAMETER TO DRBACKUP WILL RESULT IN APPEARING THAT THE               
LAST PARAMETER IS MISSING, TWO MISSING PARAMETERS WILL APPEAR AS                
THE LAST TWO PARAMETERS ARE MISSING (AND SO ON).  THE EXECS HAVE A              
POSITIONAL ORIENTATION TO THEIR PARAMETERS.  MESSAGE IS GENERATED BY            
DR11 EXEC.                                                                      
:LI.DRBACKUP: EXECVER  MUST SPECIFY VERIFY OR EXECUTE'                          
:P.CHECKED THE THIRD PARAMETER FOR CORRECT SPELLING AND IT DIDN'T               
PASS.  CORRECT THE SPELLING AND RESUBMIT.  MESSAGE IS GENERATED BY              
DR11 EXEC.                                                                      
:LI.DRBACKUP: VALID INPUT DATASET REQUIRED                                      
:P.CHECKED THE CATALOG AND VOLUME FOR THE EXISTENCE OF THE INPUT                
DATASET AND IT FAILED.  INSURE THE INPUT DATASET IS SPELLED CORRECTLY           
AND EXISTS ON THE SYSTEM THE COMMAND EXECUTES.  MESSAGE IS GENERATED BY         
DR11 EXEC.                                                                      
:LI.DRBACKUP: CANNOT ALLOCATE DCOLLDSN .  RC=RC                                 
:P.ATTEMPTED ALLOCATION OF DCOLLECT DATASET AND IT FAILED.  VALUE OF            
DCOLLDSN IS WHAT IS SPECIFIED IN DR10.  RC IS THE RETURN CODE FROM A            
TSO ALLOCATE COMMAND.  INSURE THAT THE DCOLLECT JCL IS USING THE SAME           
DATASET FOR OUTPUT THAT DR10 SPECIFIES.  MESSAGE IS GENERATED BY                
DR12 EXEC.                                                                      
:LI.DRBACKUP: ERROR READING DCOLLDSN .  RC=RC                                   
:P.ATTEMPTED FIRST READ OF THE DCOLLECT DATASET AND HAD A PROBLEM. VALUE        
OF DCOLLDSN IS WHAT IS SPECIFIED IN DR10.  RC IS THE RETURN CODE FROM A         
REXX EXECIO COMMAND.  INSURE THAT THE DCOLLECT JCL IS USING THE SAME            
DATASET FOR OUTPUT THAT DR10 SPECIFIES.  INSURE THE DCOLLECT JCL HAS            
EXECUTED (POSSIBLE EOF ON FIRST READ, IF RC=2).  MESSAGE IS GENERATED           
BY DR12 EXEC.                                                                   
:LI.DRBACKUP: IAGNAME AGGREGATE NOT FOUND IN DCOLLECT DSN DCOLDSN               
:P.READ TO END-OF-FILE ON DCOLLECT DATASET AND DIDN'T MATCH THE                 
AGGREGATE NAME ON THE DRBACKUP COMMAND TO ANY IN THE DCOLLECT DATASET.          
POSSIBLE PROBLEMS ARE: DCOLLECT DATASET RECORDS ARE NOT CORRECT OR              
CURRENT;  AGGREGATE NAME IS INCORRECT.  INSURE THE DCOLLECT JCL HAS             
EXECUTED. MESSAGE IS GENERATED BY DR12 EXEC.                                    
:LI.DRBACKUP: SELECTION DATASET AND INPUT DATASET ARE THE SAME                  
    DRBACKUP: SELECTION DATASET : OPUTCTL                                       
    DRBACKUP:     INPUT DATASET : IDSN                                          
:P.THE DATASET SPECIFIED ON THE INPUT PARAMETER TO DRBACKUP MATCHES             
THE SELECTION DATASET DEFINED FOR THE AGGREGATE.  THIS ERROR PREVENTS           
THE EXECS FROM OVER-WRITING THE INPUT DATASET.   IT IS REQUIRED THAT            
THESE DATASETS HAVE DIFFERENT NAMES, THE EXECS WILL READ FROM THE INPUT         
DSN AND WRITE TO THE SELECTION DSN. MESSAGE IS GENERATED BY DR13 EXEC.          
:LI.DRBACKUP: SELECTION DATASET ODSN ...MSDSN                                   
:P.THE EXEC HAS LOOKED AT THE CATALOG AND VOLUME FOR THE SELECTION              
DSN ODSN, AND FOUND A PROBLEM.  THE NATURE OF THE PROBLEM IS SPECIFIED          
IN THE MSDSN VARIABLE.  MESSAGE IS GENERATED BY DR13 EXEC.                      
:LI.DRBACKUP: ALLOCATION OF SELECTION DATASET UNSUCCESSFUL OPUTCTL              
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE SELECTION DATASET (OPUTCTL)         
WITH EXCLUSIVE CONTROL MANY TIMES.  POSSIBLE THAT SOMEONE OR SOMETHING          
ELSE HAS IT ALLOCATED.  CHECK THE SYSLOG FOR MESSAGES CONCERNING                
DATASET CONTENTION.  MESSAGE IS GENERATED BY DR13 EXEC.                         
:LI.DRBACKUP: ERROR ALLOCATING LOG DSN ACTLOG .  RC=RC                          
POSSIBLE THAT SOMEONE OR SOMETHING HAS IT ALLOCATED OR THAT THE                 
AUTOMATE/MVS SCRIPT HAS PROBLEMS. CHECK THE SYSLOG FOR MESSAGES                 
CONCERNING THIS DATASET                                                         
MESSAGE IS GENERATED BY READLOG SUBROUTINE OF THE DR15 EXEC.                    
:LI.DRBACKUP: LOG NOT FROM ABACKUP VERIFY                                       
    DRBACKUP: CHECK AUTOMATED OPERATIONS, WRONG LOG ACTLOG                      
:P.THE EXEC IS READING THE ABACKUP ...VERIFY ACTIVITY LOG AND FOUND             
MESSAGES THAT COULD ONLY BE PRODUCED BY A EXECUTE ACTIVITY LOG.                 
WE SHOULD HAVE THE VERIFY LOG AVAILABLE TO US, (THE COMMAND WAS ISSUED          
DRBACKUP PRIOR TO EXECUTING THIS EXEC), IF NOT THEN THE AUTOMATE/MVS            
SCRIPTS MAY HAVE BEEN PULLED FROM THE SYSTEM.                                   
MESSAGE IS GENERATED BY READLOG SUBROUTINE OF THE DR15 EXEC.                    
:LI.DRBACKUP: PROBLEM WITH AGDSN WHY                                            
:P.THE IS THE MESSAGE PRODUCED WHEN AN DMS ARCIVE DATASET IS                    
ENCOUNTERED.  THIS IS NOT AN ERROR.  VARIABLE AGDSN IS THE NAME OF              
A DATASET IN THE AGGREGATE, AND WHY IS A STRING RETURNED FROM THE               
DR151 SUBROUTINE EXEC.                                                          
MESSAGE IS GENERATED BY READLOG SUBROUTINE OF THE DR15 EXEC.                    
WRITEINC:                                                                       
:LI.DRBACKUP: CANDIDATE DATASETS FOR BACKUP: SMC1                               
:P.THIS MESSAGE DISPLAYS A COUNT OF THE DATASETS INCLUDED AS A RESULT           
OF THE INPUT DATASET USED FOR A ABACKUP ...VERIFY.   SMC1 IS                    
THE TOTAL DATASETS PRIOR TO LOOKING FOR ARCIVE'D DATASETS                       
MESSAGE IS GENERATED BY WRITEINC SUBROUTINE OF THE DR15 EXEC.                   
:LI.DRBACKUP: ARCIVE'D DATASETS EXCLUDED: SMC2                                  
:P.THIS MESSAGE DISPLAYS A COUNT OF THE DATASETS EXCLUDED BECAUSE THEY          
WERE ARCHIVED (SMC2).                                                           
MESSAGE IS GENERATED BY WRITEINC SUBROUTINE OF THE DR15 EXEC.                   
:LI.DRBACKUP: DATASETS INCLUDED: SMC3                                           
:P.THIS MESSAGE DISPLAYS A COUNT OF THE DATASETS INCLUDED AFTER THE             
ARCHIVED DATASETS ARE REMOVED (SMC3).  SMC1 = SMC2 + SMC3                       
MESSAGE IS GENERATED BY WRITEINC SUBROUTINE OF THE DR15 EXEC.                   
:LI.DRBACKUP: ALL DATASETS IN AGGREGATE HAVE BEEN ELIMINATED                    
:P.THIS MESSAGE STOPS DRBACKUP BECAUSE THE AGGREGATE HAS NO DATASETS            
TO BE INCLUDED FOR BACKUP (ABARS MUST HAVE AT LEAST ONE INCLUDE STMT).          
MESSAGE IS GENERATED BY WRITEINC SUBROUTINE OF THE DR15 EXEC.                   
:LI.DRBACKUP: RESET OF SELECTION DATASET UNSUCCESSFUL OUTPUT                    
:P.OUTPUT IS THE NAME OF THE SELECTION DATASET.  THIS MESSAGE INDICATES         
THAT IT COULDN'T ALLOCATE THE SELECTION WITH EXCLUSIVE CONTROL TO CLEAR         
IT.  CLEARING THE SELECTION DATASET PREVENTS THE ABACKUP COMMAND FROM           
ACCIDENTALLY USING AN OLD INCLUDE LIST GENERATED BY DRBACKUP. CHECK THE         
SYSLOG FOR MESSAGES CONCERNING ANOTHER USER/JOB HAVING THE SELECTION            
DATASET ALLOCATED.                                                              
MESSAGE IS GENERATED BY THE DR16 EXEC.                                          
:EOL.                                                                           
:H3.ABARPOST                                                                    
:OL.                                                                            
:LI.ABARPOST: NO ABACKUP LOGS AVAILABLE FOR AGGREGATE IAGNAME                   
:P.IAGNAME IS THE AGGREGATE NAME SUPPLIED AS A PARAMETER TO THE COMMAND.        
THE ABACKUP ACTIVITY LOG NAME IS NULL.  POSSIBLE THAT THIS COMMAND WAS          
ISSUED PRIOR TO DRBACKUP EXECUTION.                                             
MESSAGE IS GENERATED BY THE DR21 EXEC.                                          
:LI.ABARPOST:' ARPARMS ...MDSN                                                  
    ARECOVER PARMS NOT WRITTEN FOR IAGNAME                                      
:P.IAGNAME IS THE AGGREGATE NAME SUPPLIED AS A PARAMETER TO THE COMMAND.        
ARPARMS IS THE ARECOVER PARMS DATASET SPECIFIED IN DR10.  MDSN IS TEXT          
DESCRIBING THE PROBLEM AFTER CHECKING THE CATALOG AND VOLUME FOR THE            
DATASET.                                                                        
MESSAGE IS GENERATED BY THE DR21 EXEC.                                          
:EOL.                                                                           
:H3.ARECPROC                                                                    
:OL.                                                                            
:LI.ARECPROC: NO ARECOVER PARMS DATASET FOR AGGREGATE IAGNAME                   
:P.IAGNAME IS THE AGGREGATE NAME SUPPLIED AS A PARAMETER TO THE COMMAND.        
ARPARMS IS THE ARECOVER PARMS DATASET SPECIFIED IN DR10.  MDSN IS TEXT          
DESCRIBING THE PROBLEM AFTER CHECKING THE CATALOG AND VOLUME FOR THE            
DATASET.                                                                        
MESSAGE IS GENERATED BY THE DR31 EXEC.                                          
:LI.ARECPROC: CHECK SYSLOG; CONTENTION FOR PARMS DSN ARDSN                      
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE PARMS DATASET (ARDSN)               
WITH SHARED CONTROL MANY TIMES.  POSSIBLE THAT SOMEONE OR SOMETHING             
ELSE HAS IT ALLOCATED.  CHECK THE SYSLOG FOR MESSAGES CONCERNING                
DATASET CONTENTION.  MESSAGE IS GENERATED BY DR31 EXEC.                         
:LI.ARECPROC: NO ARECOVER LOGS AVAILABLE FOR AGGREGATE IAGNAME                  
:P.IAGNAME IS THE AGGREGATE NAME SUPPLIED AS A PARAMETER TO THE COMMAND.        
THE ARECOVER ACTIVITY LOG NAME IS NULL.  POSSIBLE THAT THE ARC6030I             
MESSAGE WASN'T TRAPPED AT THE RECOVERY SITE.  INSURE THAT THE                   
AUTOMATE/MVS SCRIPT IS ACTIVE/WORKING.                                          
MESSAGE IS GENERATED BY THE DR32 EXEC.                                          
:LI.ARECPROC: MOD TO LOG OF LOGS DATASET UNSUCCESSFUL LOGLOG                    
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE LOG-OF-LOGS DATASET (LOGLOG)        
WITH DISP=MOD MANY TIMES.  POSSIBLE THAT SOMEONE OR SOMETHING                   
ELSE HAS IT ALLOCATED.  CHECK THE SYSLOG FOR MESSAGES CONCERNING                
DATASET CONTENTION.                                                             
MESSAGE IS GENERATED BY THE DR32 EXEC.                                          
:EOL                                                                            
:H3.DRAUDIT                                                                     
:OL                                                                             
:LI.DRAUDIT: ALLOCATION OF LOGS DATASET UNSUCCESSFUL' LOGLOG                    
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE LOG-OF-LOGS DATASET (LOGLOG)        
WITH DISP=MOD MANY TIMES.  POSSIBLE THAT SOMEONE OR SOMETHING                   
ELSE HAS IT ALLOCATED.  CHECK THE SYSLOG FOR MESSAGES CONCERNING                
DATASET CONTENTION.                                                             
MESSAGE IS GENERATED BY THE DR41 EXEC (CALLED BY ARAUDIT, CALLED BY             
:LI.DRAUDIT: NO ARECOVER PARMS DATASET FOR AGGREGATE IAGNAME                    
:P.IAGNAME IS THE INPUT AGGREGATE NAME.                                         
CHECK THE ARECOVER PARMS DATASET IN DR10 TO INSURE IT'S NOT NULL.               
MESSAGE IS GENERATED BY THE DR41 EXEC (CALLED BY ARAUDIT  CALLED BY             
DRAUDIT).                                                                       
:EOL.                                                                           
:H3.DRSCAN:                                                                     
:OL.                                                                            
:LI.DRSCAN: INPUT DATASET INPUT ...MSDSN                                        
:P.CHECKED THE CATALOG AND VOLUME FOR THE EXISTENCE OF THE INPUT                
DATASET AND IT FAILED.  INSURE THE INPUT DATASET IS SPELLED CORRECTLY           
AND EXISTS ON THE SYSTEM THE COMMAND EXECUTES.  MESSAGE IS GENERATED BY         
DRSCAN EXEC.                                                                    
:LI.DRSCAN: AGGREGATE VERIFY FAILED, CHECK REPORT IN LOGDSN                     
:P.ISSUED ABACKUP ...VERIFY COMMAND AND RECEIVED A NON-ZERO RETURN              
CODE.  NOT MUCH SENSE IN CONTINUING WITH EXECUTION, WE KNOW THE ACTIVITY        
LOG HAS NO DATASETS IN IT.  MESSAGE IS GENERATED BY DRSCAN EXEC.                
:LI.DRSCAN: ERROR ALLOCATING LOG DSN ACTLOG .  RC=RC                            
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE LOG DATASET (ACTLOG).               
POSSIBLE THAT SOMEONE OR SOMETHING HAS IT ALLOCATED OR THAT THE                 
AUTOMATE/MVS SCRIPT HAS PROBLEMS. CHECK THE SYSLOG FOR MESSAGES                 
CONCERNING THIS DATASET                                                         
MESSAGE IS GENERATED BY DR61 EXEC.                                              
:LI.DRSCAN: LOG NOT FROM ABACKUP VERIFY' LOGDSN                                 
    DRSCAN: CHECK AUTOMATED OPERATIONS, WRONG LOG ACTLOG                        
:P.THE EXEC IS READING THE ABACKUP ...VERIFY ACTIVITY LOG AND FOUND             
MESSAGES THAT COULD ONLY BE PRODUCED BY A EXECUTE ACTIVITY LOG.                 
WE SHOULD HAVE THE VERIFY LOG AVAILABLE TO US, (THE COMMAND WAS ISSUED          
BY DRSCAN PRIOR TO EXECUTING THIS EXEC), IF NOT THEN THE AUTOMATE/MVS           
SCRIPTS MAY HAVE BEEN PULLED FROM THE SYSTEM.                                   
MESSAGE IS GENERATED BY DR51 EXEC.                                              
:EOL                                                                            
:H3.DRSEO:                                                                      
:OL                                                                             
:LI.DRSEO: INPUT DATASET INPUT ...MSDSN                                         
:P.CHECKED THE CATALOG AND VOLUME FOR THE EXISTENCE OF THE INPUT                
DATASET AND IT FAILED.  INSURE THE INPUT DATASET IS SPELLED CORRECTLY           
AND EXISTS ON THE SYSTEM THE COMMAND EXECUTES.  MESSAGE IS GENERATED BY         
DRSEO EXEC.                                                                     
:LI.DRSEO: AGGREGATE VERIFY FAILED, CHECK REPORT IN LOGDSN                      
:P.ISSUED ABACKUP ...VERIFY COMMAND AND RECEIVED A NON-ZERO RETURN              
CODE.  NOT MUCH SENSE IN CONTINUING WITH EXECUTION, WE KNOW THE ACTIVITY        
LOG HAS NO DATASETS IN IT.  MESSAGE IS GENERATED BY DRSEO EXEC.                 
:LI.DRSEO: ERROR ALLOCATING LOG DSN ACTLOG .  RC=RC                             
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE LOG DATASET (ACTLOG).               
POSSIBLE THAT SOMEONE OR SOMETHING HAS IT ALLOCATED OR THAT THE                 
AUTOMATE/MVS SCRIPT HAS PROBLEMS. CHECK THE SYSLOG FOR MESSAGES                 
CONCERNING THIS DATASET                                                         
MESSAGE IS GENERATED BY DR61 EXEC.                                              
:LI.DRSEO: LOG NOT FROM ABACKUP VERIFY LOGDSN                                   
    DRSEO: CHECK AUTOMATED OPERATIONS, WRONG LOG ACTLOG                         
:P.THE EXEC IS READING THE ABACKUP ...VERIFY ACTIVITY LOG AND FOUND             
MESSAGES THAT COULD ONLY BE PRODUCED BY A EXECUTE ACTIVITY LOG.                 
WE SHOULD HAVE THE VERIFY LOG AVAILABLE TO US, (THE COMMAND WAS ISSUED          
BY DRSEO PRIOR TO EXECUTING THIS EXEC), IF NOT THEN THE AUTOMATE                
SCRIPTS MAY HAVE BEEN PULLED FROM THE SYSTEM.                                   
MESSAGE IS GENERATED BY DR61 EXEC.                                              
:EOL                                                                            
:APPENDIX                                                                       
:H1.AUTOMATION PROCESSING FOR ARC6030I MESSAGE                                  
:P.THE FOLLOWING DESCRIBES SAMPLE AUTOMATION FOR PROCESSING FOR MATCHING        
THE AGGREGATE NAME TO THE LOG DATASET USING NETVIEW AUTOMATION.                 
.SP 1                                                                           
:P. PROVIDED BY DONALD FOSTER, IBM ISSC SAN JOSE                                
:H2.INSTALLATION                                                                
:P.INSTALLING THIS FUNCTION REQUIRES CHANGES TO:                                
:OL                                                                             
:LI.THE MPF LIST (POSSIBLY)                                                     
:LI.THE NETVIEW MESSAGE AUTOMATION TABLE                                        
:LI.THE NETVIEW CLIST DATA SET.                                                 
:EOL                                                                            
:P.IN ADDITION, A DATA SET NEEDS TO BE PRE-ALLOCATED TO CONTAIN                 
THE RESULTS OF THE AUTOMATION PROCESSING.                                       
:H3.MFP LIST                                                                    
:P.CHECK YOUR MFP LIST TO BE SURE THAT MESSAGE ARC6030I IS AVAILABLE            
FOR AUTOMATION.                                                                 
:H3.NETVIEW MESSAGE TABLE                                                       
:P.ADD AN ENTRY SIMILAR TO THE FOLLOWING                                        
TO THE APPROPRIATE SECTION OF YOUR                                              
MESSAGE TABLE.  THE ARC6030I MESSAGE IS NOT A MULTI-LINE MESSAGE                
AND IS PROCESSED SEVERAL TIMES BEFORE ALL THE DATA IS COLLECTED.                
THEREFORE, THE MESSAGE TABLE                                                    
ENTRY MUST ROUTE THE PROCESSING TO A SPECIFIC                                   
AUTOTASK, AS DATA IS ACCUMULATED IN A GLOBAL TASK VARIABLE.                     
.FO OFF                                                                         
.SP                                                                             
   IF MSGID='ARC6030I'                                                          
   THEN EXEC(CMD('ABARMSG ') ROUTE(ONE AUTO1))                                  
   BEEP(N) DISPLAY(Y) HCYLOG(N) HOLD(N) SYSLOG(N) NETLOG(Y);                    
.SP                                                                             
.FO ON                                                                          
:H3.CLIST INSTALLATION                                                          
:P.THE CLIST NAMED ABARMSG MUST BE INSTALLED IN A DATASET LISTED                
IN THE DSICLD DD CARD IN THE NETVIEW PROC.                                      
IF YOU CHANGE THE NAME OF THE CLIST, THE MESSAGE AUTOMATION TABLE               
ENTRY MUST CHANGE ALSO.                                                         
:H3.DATA SET ALLOCATION                                                         
:P.ALLOCATE A DATA SET TO CONTAIN THE RESULTS OF AUTOMATION PROCESSING.         
BY DEFAULT THIS DATASET HAS THE NAME 'NETVIEW.ABARDATA'.  TO CHANGE             
THE NAME OF THE DATASET, EDIT                                                   
THE CLIST ABARMSG AND CHANGE THE OUTDSN VARIABLE.  THE NAME OF THE              
STARTED TASK THAT NETVIEW RUNS UNDER, MUST HAVE RACF UPDATE ACCESS              
TO THIS DATASET.  YOU WILL NEED TO ISSUE THE SETROPTS RACF COMMAND,             
AFTER YOU ISSUE THE APPROPRIATE PERMIT COMMANDS,                                
IF YOU DO NOT WANT TO COMPLETELY RESTART NETVIEW.                               
THIS DATA SET MUST BE A PRE-ALLOCATED PDS.                                      
ALSO UPDATE DR14NV IN THE ABARS REXX UTILITIES, THEN COPY THIS MEMBER           
TO DR14 FOR THE UTILITY'S USE.                                                  
:H2.ABARMSG CLIST                                                               
:XMP                                                                            
/**********************************************************************/        
/* DESCRIPTION:  THIS NETVIEW CLIST PROCESSES MESSAGE ARC6030I.       */        
/*               IT ALLOWS THE AGGREGATE GROUP NAME TO BE MATCHED     */        
/*               TO THE ASSOCIATE LOG DATA SET.                   @XRC*/        
/*                                                                    */        
/* PROCESSING:  WHEN AN ARC6030I MESSAGE IS RECEIVED FOR BACKUP       */        
/*              ('AGGREGATE GROUP' IN TEXT OF MESSAGE), A MEMBER      */        
/*              IS CREATED IN THE OUTPUT DATASET CONTAINING THE       */        
/*              DATASET NAME OF THE ACTIVITY LOG.  THE NAME OF        */        
/*              THE MEMBER IS THE AGGREGATE GROUP NAME SPECIFIED      */        
/*              IN THE MESSAGE TEXT.                                  */        
/*                                                                    */        
/*              WHEN AN ARC6030I MESSAGE IS RECEIVED FOR RECOVERY     */        
/*              ('CONTROL FILE' IN TEXT OF MESSAGE), A MEMBER         */        
/*              IS CREATED IN THE OUTPUT DATASET CONTAINING THE       */        
/*              DATASET NAME OF THE ACTIVITY LOG.  THE NAME OF        */        
/*              THE MEMBER IS THE AGGREGATE GROUP NAME (AS FOUND      */        
/*              IN THE DATA SET NAME (3RD QUALIFIER FROM THE END).    */        
/*                                                                    */        
/* INPUT:                                                             */        
/*       BACKUP MESSAGE:                                              */        
/*         ARC6030I ACTIVITY LOG FOR AGGREGATE GROUP DAVETEST WILL BE */        
/*         ARC6030I (CONT.) ROUTED TO                                 */        
/*         ARC6030I (CONT.) HSMACT.HD.ABACKUP.DAVETEST.D95082.T113550 */        
/*                                                                    */        
/*       RECOVERY MESSAGE:                                            */        
/*         ARC6030I ACTIVITY LOG FOR CONTROL FILE DATA SET            */        
/*         ARC6030I (CONT.) DR.C.C01V0001 WILL BE ROUTED TO           */        
/*         ARC6030I (CONT.) HSMACT.HD.ARECOVER.DAVETEST.D95083.T135552*/        
/*                                                                    */        
/* OUTPUT:                                                            */        
/*       THE DATA SET WHERE THE MEMBERS ARE CREATED IS SPECIFIED      */        
/*       IN THE VARIABLE OUTDSN.  CHANGE THIS FOR YOUR INSTALLATION.  */        
/*                                                                    */        
/*       AN ENTRY IS MADE INTO THE NETVIEW LOG INDICATING WHAT        */        
/*       PROCESSING HAS TAKEN PLACE.                              @XRC*/        
/*                                                                    */        
/**********************************************************************/        
/* CREATED BY DONALD H. FOSTER 4/17/95                                */        
/**********************************************************************/        
/*                                                                    */        
/* PROCESS THE MESSAGE.  THE ARC6030I MESSAGE IS NOT A MULTILINE      */        
/* MESSAGE.  THEREFORE AS THE PARTS OF THE MESSAGE ARE RECEIVED,      */        
/* THEY ARE KEPT IS A GLOBAL TASK VARIABLE UNTIL THE LAST PART OF     */        
/* THE MESSAGE IS RECEIVED.                                       @ZRC*/        
/*                                                                    */        
/*====================================================================*/        
/**********************************************************************/        
/* MODIFY THIS VARIABLE TO CONTAIN THE FULLY QUALIFIED DSN FOR        */        
/*        YOUR INSTALLATION.                                          */        
/**********************************************************************/        
OUTDSN = 'NETVIEW.ABARDATA'         /* PDS TO CREATE MEMBERS IN       */        
/**********************************************************************/        
/*====================================================================*/        
PARSE SOURCE . . CLISTNAME .        /*    GET NAME OF CLIST AS CALLED */        
ADDRESS NETVASIS                    /* SUPPORT UPPER AND LOWER CASE   */        
'GETMLINE INARG 1 '                 /* GET THE MESSAGE                */        
SRC = RC                                                                        
IF INARG = '' | SRC^=0 THEN ,                                                   
   DO;                                                                          
     'MSG LOG' CLISTNAME 'ERROR PROCESS INPUT DATA. GETMLINE RC='SRC,           
         ' OR MESSAGE WAS NULL: -'INARG'-'                                      
     END                                                                        
  ELSE                                                                          
     CALL MSGTEST                   /* GO PROCESS MESSAGE IF 6030 MSG */        
EXIT                                                                            
/**********************************************************************/        
/*                                                                    */        
/*  IF THIS IS A 6030 MESSAGE PROCESS IT, ELSE NOTE ERROR IN LOG      */        
/*                                                                    */        
/**********************************************************************/        
MSGTEST:                                                                        
PARSE UPPER VAR INARG MSGID MSGTEXT                                             
IF MSGID = 'ARC6030I' THEN CALL PARSEMSG                                        
  ELSE                                                                          
    'MSG LOG' CLISTNAME 'RECEIVED UNEXPECTED MSGID:' MSGID                      
RETURN                                                                          
/**********************************************************************/        
/*                                                                    */        
/*  PIECE THE MESSAGE TOGETHER.                                       */        
/*                                                                    */        
/* -A NEW MESSAGE IS DETECTED IF FIRST WORD IS 'ACTIVITY'             */        
/* -THE LAST PART OF THE MESSAGE IS DETECTED IF THE DATA SET NAME     */        
/*  IS FOUND IN THE MESSAGE I.E. THERE IS A CHARACTER STRING WITH     */        
/*  MORE THAT 14 CHARACTERS FOLLOWING THE 'ROUTED TO' STRING.         */        
/*  THE LAST PART OF THE DSN IS ALWAYS DXXXXX.TXXXXXX (14 CHARS)      */        
/*                                                                    */        
/**********************************************************************/        
PARSEMSG:                                                                       
PARSE VAR MSGTEXT TESTWORD MSGREST                                              
IF TESTWORD = 'ACTIVITY' THEN SAVEDMSG = TESTWORD  /* SAVE BEGINNING  */        
  ELSE CALL GETSAVEDMSG                       /* GO GET PRIOR PARTS   */        
SAVEDMSG = SAVEDMSG||' '||MSGREST             /* RECONSTRUCT WHOLE MSG*/        
PARSE VAR SAVEDMSG . 'ROUTED TO' LOGFILE    /* DSN FOLLOWS 'ROUTED TO'*/        
PARSE VAR LOGFILE LOGFILE .                 /* ISOLATE DSN            */        
IF LENGTH(LOGFILE) > 14 THEN CALL MSGDONE   /* HAVE COMPLETE MESSAGE  */        
  ELSE                                                                          
    CALL SAVEMSG                            /* GO SAVE THIS MUCH      */        
RETURN                                                                          
/**********************************************************************/        
/*                                                                    */        
/* MESSAGE RECONSTRUCTION IS COMPLETE.  SO SAVE THE DSN IN            */        
/* THE APPROPRIATE MEMBER.                                            */        
/*  BACKUP: MEMBER NAME FOLLOWS 'GROUP'  .... DAVETEST                */        
/*         ARC6030I ACTIVITY LOG FOR AGGREGATE GROUP DAVETEST WILL BE */        
/*  RECOVERY: MEMBER NAME IS 3RS FROM LAST DSN QUALIFIER ... DAVETEST */        
/*         ARC6030I (CONT.) HSMACT.HD.ARECOVER.DAVETEST.D95083.T135552*/        
/*                                                                    */        
/**********************************************************************/        
MSGDONE:                                                                        
PARSE VAR SAVEDMSG . 'LOG FOR' TYPE .                                           
IF TYPE = 'AGGREGATE' THEN                                                      
   PARSE VAR SAVEDMSG . 'GROUP' MEMBERNAME .                                    
 ELSE                                                                           
   DO; LOGWORD = TRANSLATE(LOGFILE,' ','.') /* REMOVE PERIODS FROM DSN*/        
       WORDCNT = WORDS(LOGWORD)             /* GET COUNT OF QUALIFIERS*/        
       MEMBERNAME = WORD(LOGWORD,WORDCNT-2) /* YES, ITS THIS ONE      */        
       END                                                                      
"ALLOC F(ABARDATA) DA('"OUTDSN"("MEMBERNAME")') SHR FREE"                       
SRC = RC                                                                        
IF SRC ^= 0 THEN                                                                
   DO;                                                                          
     'MSG LOG' CLISTNAME 'ALLOCATE ERROR FOR 'OUTDSN' RC='SRC                   
     END                                                                        
OUTREC.0 = 1                                                                    
OUTREC.1 = LOGFILE                                                              
ADDRESS MVS 'EXECIO 1 DISKW ABARDATA (FINIS STEM OUTREC.'                       
SRC = RC                                                                        
IF SRC ^= 0 THEN                                                                
   DO;                                                                          
     'MSG LOG' CLISTNAME 'EXECIO ERROR RC='SRC' WHILE PROCESSING' OUTDSN        
     END                                                                        
'MSG LOG' CLISTNAME 'DSN:'OUTDSN 'MEMBER:'MEMBERNAME' CONTAINS:'LOGFILE         
RETURN                                                                          
/**********************************************************************/        
/*                                                                    */        
/* GET THE PREVIOUS MESSAGE TEXT FROM TASK GLOBAL: ABAR6030           */        
/*                                                                    */        
/**********************************************************************/        
GETSAVEDMSG:                                                                    
'GLOBALV GETT ABAR6030'            /* GET PREVIOUSLY SAVED TEST       */        
SRC = RC                                                                        
IF SRC ^= 0 THEN                                                                
   DO;                                                                          
     'MSG LOG' CLISTNAME 'GLOBALV GETT ERROR RC='SRC' WHILE PROCESSING',        
     INARG                                                                      
     END                                                                        
SAVEDMSG = VALUE('ABAR6030')                                                    
RETURN                                                                          
/**********************************************************************/        
/*                                                                    */        
/* SAVE THE TEXT SO FAR IN TASK GLOBAL: ABAR6030                      */        
/*                                                                    */        
/**********************************************************************/        
SAVEMSG:                                                                        
ABAR6030 = SAVEDMSG                                                             
'GLOBALV PUTT' 'ABAR6030'          /* GET PREVIOUSLY SAVED TEST       */        
SRC = RC                                                                        
IF SRC ^= 0 THEN                                                                
  DO;                                                                           
    'MSG LOG' CLISTNAME 'GLOBALV PUTT ERROR RC='SRC' WHILE PROCESSING',         
    INARG                                                                       
    END                                                                         
RETURN                                                                          
:EXMP                                                                           
:BACKM.                                                                         
:EGDOC.                                                                         
$$                                                                              
//HSMSTEP8 EXEC PGM=IEBUPDTE,PARM=NEW                                           
//SYSPRINT DD SYSOUT=*                                                          
//SYSUT2   DD DSN=HSM.ABARUTIL.DOCS,                                            
//            DISP=OLD                                                          
//SYSIN    DD DATA,DLM='$$'                                                     
./ ADD NAME=ABARUG                                                              
.CM  GDOC SEC='UNCLASSIFIED'                                                    
:GDOC SEC='(C)COPYRIGHT INTERNATIONAL BUSINESS MACHINES CORPORATION 1994        
.CM  QPRINT DCF OPTIONS 'TWOPASS CONT PROF(DSMPROF3'                            
:FRONTM.                                                                        
:TITLEP.                                                                        
:TITLE.ABARS REXX UTILITIES                                                     
:TITLE.USERS GUIDE                                                              
:ADDRESS.                                                                       
:ALINE.D. L. HEGGEN                                                             
:ALINE.214 280-5432                                                             
:ALINE.TIE 542-5432                                                             
:EADDRESS.                                                                      
:ADDRESS.                                                                       
:ALINE.IBM CORPORATION                                                          
:ALINE.DEPARTMENT 1MJD                                                          
:ALINE.1605 LBJ FREEWAY                                                         
:ALINE.DALLAS, TEXAS  75234                                                     
:EADDRESS.                                                                      
:DATE.FEBRUARY 7TH, 1994                                                        
:ETITLEP.                                                                       
.LL 4I                                                                          
:TOC.                                                                           
.LL 6I                                                                          
:BODY                                                                           
:H2.INTRODUCTION                                                                
:P.ABARS STANDS FOR AGGREGATE BACKUP AND RECOVERY SYSTEM.  IT IS AN             
EXTENSION OF IBM'S DFHSM PRODUCT AND ALLOWS FOR THE BACKUP (AND IN THE          
CASE OF A DISASTER) THE RECOVERY OF AN APPLICATION'S DATA.  IT CREATES          
A TRANSPORTABLE LOGICAL (AS OPPOSED TO PHYSICAL) COPY OF THE                    
APPLICATION'S DATA.  THE USE OF LOGICAL COPIES ALLOWS FOR THE DATA              
TO BE RESTORED ON A DIFFERENT DEVICE TYPE THAN IT ORIGINATED.  THIS             
SIMPLIFIES RECOVERY, BECAUSE THE RECOVERY SITE NEED ONLY SUPPLY THE             
REQUIRED STORAGE CAPACITY FOR THE APPLICATION, NOT A SPECIFIC                   
CONFIGURATION.                                                                  
:P.ABARS PROVIDES AN EXCELLENT TRANSPORT VEHICLE FOR DATASETS TO A              
DISASTER/RECOVERY SITE.  ALL DATA IN AN ABARS AGGREGATE IS SELF                 
DESCRIBING AND CAN BE RESTORED TO ANY SUPPORTED CONFIGURATION.  ABARS           
WILL CREATE COPIES OF DASD, TAPE, AND MIGRATED DATASETS FOR CRITICAL            
BUSINESS APPLICATION RECOVERY. AN ABARS AGGREGATE DEFINITION IS A               
COLLECTION OF DATASETS COMPRISING A CRITICAL BUSINESS FUNCTION.  THE            
CUSTOMERS THAT USE ABARS FOR DISASTER/RECOVERY TYPICALLY DEFINE AN              
AGGREGATE TO A SET OF DATA THAT CAN BE PROCESSED IN 30-45 MINUTES.              
IF THE BUSINESS APPLICATION'S DATASETS EXCEED THIS DEFINITION, THEN             
MULTIPLE AGGREGATES ARE DEFINED FOR THE APPLICATION.  THIS CAN LEAD TO          
MORE AGGREGATES THAN CAN BE EFFECTIVELY TRACKED MANUALLY.  THESE                
UTILITIES EXTEND ABARS CAPABILITY BY PROVIDING THE ABILITY TO TRACK             
AND CONTROL THE EXECUTION OF HUNDREDS OF ABARS AGGREGATES DEFINED FOR           
CRITICAL BUSINESS APPLICATION RECOVERY.                                         
:H3.FUNCTION                                                                    
:P.THESE UTILITIES WILL:                                                        
:OL.                                                                            
:LI.AID THE DEVELOPMENT OF AN AGGREGATE DEFINITION                              
:LI.EXTEND DATASET FILTER SELECTION CAPABILITY BEYOND DATASET NAME              
:LI.ASSOCIATE THE ACTIVITY LOG TO AN ABARS EXECUTION                            
:LI.PROVIDE REPORT OF DATASET DETAIL FOR AN ABARS AGGREGATE                     
:LI.CREATE THE ARECOVER COMMAND AS A RESULT OF THE ABACKUP PROCESS              
FOR TRANSMISSION TO RECOVERY SITE                                               
:LI.ALLOW FOR SUBMISSION, TRACKING AND REPORTING OF AGGREGATES BY A             
JOB SCHEDULING PRODUCT (I.E. OPC/ESA, CA7, ETC.)                                
:LI.RESTORE SELECTED DATASETS FROM A SUCCESSFUL ABACKUP EXECUTION               
:LI.RESTORE AN AGGREGATE WITH THE USER SPECIFYING ONLY THE AGGREGATE            
NAME.                                                                           
:LI.ALLOW AGGREGATE RESTORATION TO BE INDEPENDENT OF ABARS RELEASE AT           
RECOVERY SITE                                                                   
:LI.AUDIT THIS PROCESS AT ANY POINT IN TIME TO ASSESS DEGREE OF                 
COMPLETENESS.                                                                   
:EOL.                                                                           
:H3 DESIGN                                                                      
:P.THESE ABARS UTILITIES ARE DESIGNED TO:                                       
:OL.                                                                            
:LI.SIMPLIFY THE ABACKUP/ARECOVER PROCESS FOR APPLICATIONS AND STORAGE          
ADMINISTRATORS                                                                  
:LI.USE EXTERNAL INTERFACES ONLY                                                
:LI.ALLOW FOR EASY MAINTENANCE/MODIFICATION                                     
:EOL.                                                                           
.SP                                                                             
:P.THESE ABARS UTILITIES USE:                                                   
:OL.                                                                            
:LI.AN AUTOMATED OPERATIONS TYPE PRODUCT (NETVIEW, AUTOMATE, ETC. )             
:LI.REXX EXECS                                                                  
:LI.ASSEMBLER TSO COMMAND (OPTIONAL, FOR WAIT FUNCTION)                         
:LI.DFHSM OR DFSMSHSM IS REQUIRED                                               
:EOL.                                                                           
:H3.THE COMMAND FUNCTIONS                                                       
:OL.                                                                            
:LI.DRSCAN (AND/OR DRSEO) TO LIST LOCATION OF DATASETS                          
CONTAINED IN AN AGGREGATE                                                       
:LI.DRBACKUP TO ELIMINATE 'ARCIVE' DATA (OPTIONAL)                              
:LI.ABARPOST TO COPY THE ACTIVITY LOG TO SYSOUT, CODE THE ARECOVER              
COMMAND, AND CREATE THE DSN DETAIL REPORT                                       
:LI.ARECPROC TO PROCESS THE ARECOVER COMMANDS FROM ABARPOST AND                 
COPY THE ARECOVER ACTIVITY LOG TO SYSOUT                                        
:LI.DRAUDIT TO AUDIT THE AGGREGATE(S) PROGRESS AT THE RECOVERY SITE             
:LI.ARECSNGL FOR SELECTED DATASET RESTORE FROM ABACKUP TAPES                    
:EOL.                                                                           
.PA                                                                             
:H2.JCL, COMMANDS,AND PARAMETERS                                                
.FO OFF                                                                         
:H3.DRSCAN JCL                                                                  
//JOBNAME  JOB .................                                                
//DRSCAN PROC                                                                   
//AUDIT    EXEC PGM=IKJEFT01,DYNAMNBR=20                                        
//SYSEXEC   DD  DSN=IB996RV.ABARS.EXECS,DISP=SHR                                
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//SYSTERM   DD  SYSOUT=*                                                        
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//DRSCAN   PEND                                                                 
//STEP1  EXEC DRSCAN                                                            
//DRSCAN.SYSTSIN DD  *                                                          
    %DRSCAN  AGGNAME UNIT(TAPE) EXECUTE +                                       
               INPUT('INPUT DSN')                                               
    %DRSEO  AGGNAME UNIT(TAPE) EXECUTE                                          
.FO ON                                                                          
:H3.DRSCAN/DRSEO DISCUSSION                                                     
:P.SYNTACTICALLY, THE DRSCAN COMMAND IS THE SAME AS DRBACKUP OR ABACKUP         
COMMANDS (THAT IS; THE INPUT PARAMETER IS OPTIONAL).  THIS IS DESIGNED          
TO MINIMIZE THE CHANGES NEEDED AS A NEW AGGREGATE FLOWS FROM DESIGN             
TO PRODUCTION USAGE.  AS SHOWN, MULTIPLE EXECUTIONS OF THE                      
COMMAND MAY BE USED IN A SINGLE STEP.  ALSO IN THE EXAMPLE, THE FIRST           
EXECUTION IS FOR A AGGREGATE THAT WILL USE DRBACKUP, THE SECOND IS FOR          
AN AGGREGATE THAT WILL USE ABACKUP.                                             
WE EXECUTE THE FRONT END OF A DRBACKUP (IF THE                                  
INPUT DATASET IS SUPPLIED). AND ISSUE AN ABACKUP VERIFY COMMAND.                
THE ABACKUP ACTIVITY LOG IS THEN ALLOCATED AND EACH DATASET IS                  
INTERROGATED FOR ITS LOCATION.  THIS INFORMATION IS USED TO CREATE              
THE REPORT.  THE DIFFERENCE BETWEEN DRSCAN AND DRSEO IS THE DRSCAN              
LISTS THE LOCATION OF ALL DATASETS IN THE AGGREGATE, DRSEO LISTS                
WHAT WE THINK MAY BE CANDIDATES FOR EXCLUSION FROM THE AGGREGATE.               
DRSEO IS A VARIATION OF DRSCAN TO PROVIDE A LIST OF DATASETS THAT               
ARE LIKELY CANDIDATES FOR EXCLUSION.                                            
.PA                                                                             
:H3.DRBACKUP JCL                                                                
.FO OFF                                                                         
//JOBNAME  JOB .................                                                
//AGGNAME EXEC DRBACKUP                                                         
//ABACKUP.SYSTSIN DD  *                                                         
    %DRBACKUP  AGGNAME UNIT(TAPE) EXECUTE +                                     
               INPUT('INPUT DSN')                                               
//ABARPOST.SYSTSIN DD  *                                                        
    %ABARPOST  AGGNAME UNIT(TAPE)                                               
.SP                                                                             
//JOBNAME  JOB .................                                                
//AGGNAME EXEC DRBACKUP                                                         
//ABACKUP.SYSTSIN DD  *                                                         
    HSEND WAIT ABACKUP AGGNAME UNIT(TAPE) EXECUTE                               
//ABARPOST.SYSTSIN DD  *                                                        
    %ABARPOST  AGGNAME UNIT(TAPE)                                               
:H3.DRBACKUP JCL PROC                                                           
//DRBACKUP PROC                                                                 
//******   ABARS ABACKUP PRE PROCESSOR IF %DRBACKUP IS USED:                    
//******    1) ELIMINATES 'ARCIVE' DATASETS FROM AGGREGATE                      
//******    2) SET UP ENVIRONMENT FOR POST PROCESSING                           
//ABACKUP  EXEC PGM=IKJEFT01,DYNAMNBR=20,TIME=1440                              
//SYSPROC   DD  DSN=SYS3.FISCO.ISPCLIB,DISP=SHR                                 
//SYSEXEC   DD  DSN=DSM.D.REXX.EXECS,DISP=SHR                                   
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//SYSTERM   DD  SYSOUT=*                                                        
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//******   ABARS POST PROCESSOR                                                 
//******    1) WRITES ACTIVITY LOG TO DDNAME 'LOG'                              
//******       IF ABACKUP IS GOOD.....                                          
//******    2) WRITES ARECOVER STATEMENTS TO ARECOVER PARMS DATASET             
//******    3) CREATES DATASET ATTRIBUTE DETAIL REPORT                          
//ABARPOST EXEC PGM=IKJEFT01,DYNAMNBR=20                                        
//SYSPROC   DD  DSN=SYS3.FISCO.ISPCLIB,DISP=SHR                                 
//SYSEXEC   DD  DSN=DSM.D.REXX.EXECS,DISP=SHR                                   
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//LOG       DD  SYSOUT=*,RECFM=FBA,LRECL=133                                    
//SYSTERM   DD  SYSOUT=*                                                        
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//******   ABENDBK - ISSUE U0100 ABEND CODE IF ABACKUP  STEP ISSUES             
//******   A RETURN CODE NOT EQUAL TO 0                                         
//ABENDBK EXEC PGM=GPABEND,COND=(0,EQ,ABACKUP)                                  
//SYSOUT  DD SYSOUT=*                                                           
.FO ON                                                                          
:H3.DRBACKUP DISCUSSION                                                         
:P.THE DRBACKUP JCL PROC SUPPORTS BOTH ABACKUP COMMANDS AND DRBACKUP            
COMMANDS.  ALTHOUGH ONLY ONE COMMAND IS ALLOWED TO BE PRESENT PER               
EXECUTION. THE ABACKUP COMMAND SHOULD ALREADY BE FAMILIAR.  THE ONLY            
ADDITIONAL PARAMETER NEEDED FOR DRBACKUP IS AN INPUT FILE (FULLY                
QUALIFIED).  THIS IS NEEDED TO COPY AND MODIFY THE DATASET LIST                 
THE SELECTION STATEMENTS GENERATE.  MOVING AN AGGREGATE TO OR FROM              
DRBACKUP COMMAND REQUIRES A CHANGE IN THE AGGREGATE STRUCTURE.  DO              
NOT CHANGE BETWEEN ABACKUP AND DRBACKUP COMMANDS                                
WITHOUT GETTING THE AGGREGATE ALTERED BY STORAGE ADMINISTRATION.                
:P.THE ABARPOST COMMAND NEEDS BOTH THE AGGREGATE NAME AND TAPE UNIT             
SPECIFIED AS PARAMETERS.  THE NECESSITY OF THE TAPE UNIT IS BECAUSE             
APARPOST WILL CODE THE ARECOVER COMMAND FOR USE AT THE RECOVERY SITE.           
WE DIDN'T WANT TO MAKE DRBACKUP COMMAND A REQUIREMENT (THAT IF THE              
AGGREGATE DIDN'T HAVE ARCIVE DATA OR NEEDED THE ARCIVE DATA,                    
ABACKUP COMMAND IS APPROPRIATE TO USE), AND WITHOUT ACCESS TO THE               
TAPE UNIT SPECIFIED TO THE ABACKUP COMMAND, IT NEEDS TO BE SPECIFIED FOR        
THE ABARPOST COMMAND.                                                           
:P.THE ORDER OF THE STEPS PROVIDED IN THE DRBACKUP JCL PROCEDURE IS             
IMPORTANT.  THE ABACKUP STEP (IF NO PROBLEMS ARE FOUND) WILL END                
WITH THE RETURN CODE OF A ABACKUP COMMAND.  IF THIS IS NON-ZERO                 
THE ABENDBK STEP WILL FLAG THE AGGREGATE BACKUP AS A PROBLEM TO                 
THE JOB SCHEDULING PRODUCT.                                                     
ABARPOST EXECUTES BEFORE ABENDBK TO AT LEAST DUMP THE ABACKUP                   
ACTIVITY LOG TO SYSOUT.  IF THE RETURN CODE FROM THE ABACKUP STEP IS            
ZERO, ABARPOST WILL ALSO CREATE THE ARECOVER COMMAND AND PROVIDE THE DSN        
DETAIL REPORT.                                                                  
.PA                                                                             
.FO OFF                                                                         
:H3.DRECOVER JCL                                                                
//JOBNAME  JOB .................                                                
//AGGNAME EXEC DRECOVER                                                         
//DRECOVER.SYSTSIN DD  *                                                        
    %ARECPROC AGGNAME                                                           
:H3.DRECOVER JCL PROC                                                           
//DRECOVER PROC                                                                 
//******   ABARS ARECOVER                                                       
//ARECOVER EXEC PGM=IKJEFT01,DYNAMNBR=20,TIME=1440                              
//SYSPROC   DD  DSN=SYS3.FISCO.ISPCLIB,DISP=SHR                                 
//SYSEXEC   DD  DSN=DSM.D.REXX.EXECS,DISP=SHR                                   
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//LOG       DD  SYSOUT=*                                                        
//SYSTERM   DD  SYSOUT=*                                                        
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//******   ABENDBK - ISSUE U0100 ABEND CODE IF ARECOVER STEP ISSUES             
//******   A RETURN CODE NOT EQUAL TO 0                                         
//ABENDBK EXEC PGM=GPABEND,COND=(0,EQ,ARECOVER)                                 
.FO ON                                                                          
:H3.DRECOVER DISCUSSION                                                         
:P.THE ONLY INPUT PARAMETER NEEDED FOR THE ARECPROC COMMAND IS THE              
AGGREGATE NAME.  THIS IS USED AS THE MEMBER NAME WHEN ACCESSING THE             
ARECOVER.PARMS DATASET.  IN THIS DATASET THE ARECOVER COMMAND IS CODED          
AS A RESULT OF A SUCCESSFUL DRBACKUP EXECUTION.  THIS MEMBER IS READ,           
AND THE ENVIRONMENT IS CHECKED IN THE RECOVERY SITE FOR THE RELEASE             
OF DFHSM AVAILABLE.  THE ARECOVER COMMAND IS ISSUED BY THE ARECPROC             
COMMAND (SYNTACTICALLY   CORRECT FOR THE RELEASE OF DFHSM FOUND AT THE          
RECOVERY SITE).                                                                 
:P.A 'FALL BACK' POSITION IS AVAILABLE, BY EXECUTING                            
THE TSO TERMINAL MONITOR PROGRAM IN BATCH AND POINTING THE SYSTSIN              
DD CARD TO THE ARECOVER.PARMS DATASET WITH THE AGGREGATE NAME SPECIFIED         
AS THE MEMBER NAME.                                                             
:P.WORSE CASE, THE ABARS TAPE(S) COULD BE READ BY DFDSS FOR DATASET             
RESTORATION OUTSIDE THE CONTEXT OF ABARS.                                       
.PA                                                                             
:H3.DRAUDIT JCL                                                                 
.FO OFF                                                                         
//JOBNAME  JOB .................                                                
//AUDIT PROC                                                                    
//DRAUDIT  EXEC PGM=IKJEFT01,DYNAMNBR=20,PARM='%DRAUDIT'                        
//SYSEXEC   DD  DSN=IB996RV.ABARS.EXECS,DISP=SHR                                
//SYSHELP   DD  DSN=SYS1.HELP,DISP=SHR                                          
//SYSPRINT  DD  DUMMY                                                           
//SYSTSPRT  DD  SYSOUT=*                                                        
//SYSTERM   DD  SYSOUT=*                                                        
//AGDET     DD  SYSOUT=*,RECFM=FBA,LRECL=133                                    
//AGSUMM    DD  SYSOUT=*,RECFM=FBA,LRECL=133                                    
//SYSIN     DD  DUMMY,DCB=BLKSIZE=80                                            
//SYSTSIN   DD  DUMMY                                                           
//AUDIT    PEND                                                                 
//STEP1  EXEC AUDIT                                                             
//AUDIT.INCNTL DD  *                                                            
AGGNAME 1                                                                       
        .                                                                       
        .                                                                       
        .                                                                       
AGGNAME N                                                                       
.FO ON                                                                          
:H3.DRAUDIT DISCUSSION                                                          
:P.INPUT IS A LIST OF AGGREGATES FOLLOWING THE INCNTL DD CARD.  ARECPROC        
KEEPS TRACK OF THE ARECOVER COMMANDS/ACTIVITY LOGS FOR EACH AGGREGATE           
THROUGH A DATASET IT ALLOCATES AND USES (DISP=NEW THE FIRST TIME,               
DISP=MOD FOR EACH SUBSEQUENT EXECUTION). THE AUDIT CAN BE RUN ANY TIME          
AND CREATES TWO DIFFERENT REPORTS, A DETAIL AND A SUMMARY.                      
:P.THE DETAIL REPORT LISTS AN AGGREGATE, THE LOGS ARECOVER HAS CREATED          
AND (BY COUNTING THE NUMBER OF LOG DATASETS) THE NUMBER OF TIMES                
ARECOVER HAS EXECUTED FOR THIS AGGREGATE.  FOLLOWING THIS INFORMATION           
IS A REPORT OF THE DATASETS IN THE AGGREGATE WITH ERRORS.  ERRORS ARE           
DETECTED VIA THE REXX LISTDSI FUNCTION.  THAT IS TO SAY, WE CAN TEST            
EXISTENCE OF THE DATASET FROM THE AGGREGATE AT THE RECOVERY SITE,               
BUT UNTIL APPLICATIONS START AND ACCESS THE DATA, THE CONTENT                   
OF THE DATASET CAN'T BE TESTED.                                                 
:P.THE SUMMARY REPORT LISTS AN AGGREGATE NAME, THE NUMBER OF DATASETS,          
AND THE NUMBER OF ERRORS FOUND. THE LAST LINE LISTS THE TOTAL NUMBER            
OF AGGREGATES (REQUESTED FOR THIS AUDIT), THE TOTAL NUMBER OF DATASETS,         
AND THE TOTAL NUMBER OF ERRORS.  THE QUICK SCAN FOR THIS REPORT STARTS          
AT THE BOTTOM RIGHT EDGE (TOTAL ERRORS).  IF ZERO, LOOK NO FURTHER.             
IF NOT ZERO, SCAN THE RIGHT COLUMN ON THE REPORT.  THIS WILL LOCATE             
THE AGGREGATES WITH PROBLEMS.  IF THE NUMBER OF DATASETS AND THE                
NUMBER OF ERRORS ARE APPROXIMATELY THE SAME, ASSUME THE ARECOVER FOR            
THE AGGREGATE HASN'T COMPLETED YET.                                             
.PA                                                                             
:H3.ARECSNGL JCL                                                                
.FO OFF                                                                         
//JOBNAME  JOB .................                                                
//AGGNAME EXEC DRECOVER                                                         
//DRECOVER.SYSTSIN DD  *                                                        
    %ARECSNGL AGGNAME                                                           
//DRECOVER.INDSN   DD  *                                                        
DSN1                                                                            
DSN*                                                                            
DSNN                                                                            
.FO ON                                                                          
:H3.ARECSNGL DISCUSSION                                                         
:P.THE ONLY INPUT PARAMETER NEEDED FOR THE ARECSNGL COMMAND IS THE              
AGGREGATE NAME.  THIS IS USED AS THE MEMBER NAME WHEN ACCESSING THE             
ARECOVER.PARMS DATASET.  IN THIS DATASET THE ARECOVER COMMAND IS CODED          
AS A RESULT OF A SUCCESSFUL DRBACKUP EXECUTION.  THIS MEMBER IS READ,           
AND THE ENVIRONMENT IS CHECKED FOR THE RELEASE OF DFHSM AVAILABLE.              
ADDITIONALLY, A LIST OF DATASETS IN THE AGGREGATE THAT NEED SELECTIVE           
RESTORE ARE SUPPLIED VIA THE INDSN JCL DD CARD. INPUT IS EXPECTED TO            
ONE LINE PER DATASET.  ALSO A SIMPLISTIC FILTER CAPABILITY HAS BEEN             
ENABLED, USE OF AN "*" ON THE RIGHT OF THE DATASETNAME WILL ALLOW A             
MATCH ON ALL PRECEDING CHARACTERS.                                              
:P.UP TO 2 COPIES OF THE AGGREGATE ARE SUPPORTED, WITH THE FIRST COPY           
EXPECTED TO GO OFFSITE AND THE SECOND COPY EXPECTED TO REMAIN ONSITE.           
MULTIPLE VERSIONS CAN BE SUPPORTED, IF THE MEMBER IN THE ARECOVER.PARMS         
DATASET IS REPLACED WITH A VALID MEMBER FROM A PREVIOUS ABACKUP                 
EXECUTION.  OTHERWISE THE MOST RECENT ABACKUP EXECUTION'S VERSION OF THE        
DATASET WILL BE RESTORED.                                                       
.PA                                                                             
:H2.ERROR MESSAGES                                                              
:H3.DRBACKUP                                                                    
:OL.                                                                            
:LI.DRBACKUP: AGGREGATE VERIFY FAILED, CHECK REPORT IN LOGDSN                   
:P.ISSUED ABACKUP ...VERIFY COMMAND AND RECEIVED A NON-ZERO RETURN              
CODE.  NOT MUCH SENSE IN CONTINUING WITH EXECUTION, WE KNOW AN EXECUTE          
WILL NOT WORK.                                                                  
:LI.DRBACKUP: 4 REQUIRED PARAMETERS NOT SUPPLIED                                
    DRBACKUP: NEED AGGREGATE NAME, TAPE UNIT, EXECUTE/VERIFY,                   
         AND INPUT DSN (FULLY QUALIFIED)                                        
:P.CHECKED ALL FOUR PARAMETERS TO DRBACKUP FOR A NULL STRING AND FOUND          
AT LEAST ONE NULL STRING.  A SPACE BETWEEN PARAMETERS IS REQUIRED.              
A MISSING PARAMETER TO DRBACKUP WILL RESULT IN APPEARING THAT THE               
LAST PARAMETER IS MISSING, TWO MISSING PARAMETERS WILL APPEAR AS                
THE LAST TWO PARAMETERS ARE MISSING (AND SO ON).  THE EXECS HAVE A              
POSITIONAL ORIENTATION TO THEIR PARAMETERS.                                     
:LI.'DRBACKUP:' EXECVER ' MUST SPECIFY VERIFY OR EXECUTE'                       
:P.CHECKED THE THIRD PARAMETER FOR CORRECT SPELLING AND IT DIDN'T               
PASS.  CORRECT THE SPELLING AND RESUBMIT.                                       
:LI.DRBACKUP: VALID INPUT DATASET REQUIRED                                      
:P.CHECKED THE CATALOG AND VOLUME FOR THE EXISTENCE OF THE INPUT                
DATASET AND IT FAILED.  INSURE THE INPUT DATASET IS SPELLED CORRECTLY           
AND EXISTS ON THE SYSTEM THE COMMAND EXECUTES.                                  
:LI.DRBACKUP: ERROR READING DCOLLDSN .  RC=RC                                   
:P.ATTEMPTED FIRST READ OF THE DCOLLECT DATASET AND HAD A PROBLEM. VALUE        
OF DCOLLDSN IS WHAT IS SPECIFIED IN DR10.  RC IS THE RETURN CODE FROM A         
REXX EXECIO COMMAND.  INSURE THAT THE DCOLLECT JCL IS USING THE SAME            
DATASET FOR OUTPUT THAT DR10 SPECIFIES.  INSURE THE DCOLLECT JCL HAS            
EXECUTED (POSSIBLE EOF ON FIRST READ, IF RC=2).  PROBABLE PROBLEM WITH          
THE UTILITY SUPPORT FILES, CONTACT YOUR SUPPORT.                                
:LI.DRBACKUP: IAGNAME AGGREGATE NOT FOUND IN DCOLLECT DSN DCOLDSN               
:P.READ TO END-OF-FILE ON DCOLLECT DATASET AND DIDN'T MATCH THE                 
AGGREGATE NAME ON THE DRBACKUP COMMAND TO ANY IN THE DCOLLECT DATASET.          
POSSIBLE PROBLEMS ARE: DCOLLECT DATASET RECORDS ARE NOT CORRECT OR              
CURRENT;  AGGREGATE NAME IS INCORRECT.  INSURE THE DCOLLECT JCL HAS             
EXECUTED OR THAT THE AGGREGATE NAME IS SPELLED CORRECTLY.                       
:LI.DRBACKUP: SELECTION DATASET AND INPUT DATASET ARE THE SAME                  
    DRBACKUP: SELECTION DATASET : OPUTCTL                                       
    DRBACKUP:     INPUT DATASET : IDSN                                          
:P.THE DATASET SPECIFIED ON THE INPUT PARAMETER TO DRBACKUP MATCHES             
THE SELECTION DATASET DEFINED FOR THE AGGREGATE.  THIS ERROR PREVENTS           
THE EXECS FROM OVER-WRITING THE INPUT DATASET.   IT IS REQUIRED THAT            
THESE DATASETS HAVE DIFFERENT NAMES, THE EXECS WILL READ FROM THE INPUT         
DSN AND WRITE TO THE SELECTION DSN.                                             
:LI.DRBACKUP: SELECTION DATASET ODSN ...MSDSN                                   
:P.THE EXEC HAS LOOKED AT THE CATALOG AND VOLUME FOR THE SELECTION              
DSN ODSN, AND FOUND A PROBLEM.  THE NATURE OF THE PROBLEM IS SPECIFIED          
IN THE MSDSN VARIABLE.                                                          
:LI.DRBACKUP: ALLOCATION OF SELECTION DATASET UNSUCCESSFUL OPUTCTL              
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE SELECTION DATASET (OPUTCTL)         
WITH EXCLUSIVE CONTROL MANY TIMES.  POSSIBLE THAT SOMEONE OR SOMETHING          
ELSE HAS IT ALLOCATED.  CHECK THE SYSLOG FOR MESSAGES CONCERNING                
DATASET CONTENTION.                                                             
:LI.DRBACKUP: LOG NOT FROM ABACKUP VERIFY                                       
    DRBACKUP: CHECK AUTOMATED OPERATIONS, WRONG LOG ACTLOG                      
:P.THE EXEC IS READING THE ABACKUP ...VERIFY ACTIVITY LOG AND FOUND             
MESSAGES THAT COULD ONLY BE PRODUCED BY A EXECUTE ACTIVITY LOG.                 
WE SHOULD HAVE THE VERIFY LOG AVAILABLE TO US, (THE COMMAND WAS ISSUED          
BY DRBACKUP PRIOR TO EXECUTING THIS EXEC), IF NOT THEN THE CONSOLE              
AUTOMATION SCRIPTS HAVE BEEN PULLED FROM THE SYSTEM.                            
:LI.DRBACKUP: PROBLEM WITH AGDSN WHY                                            
:P.THE IS THE MESSAGE PRODUCED WHEN AN DMS ARCIVE DATASET IS                    
ENCOUNTERED.  THIS IS NOT AN ERROR.  VARIABLE AGDSN IS THE NAME OF              
A DATASET IN THE AGGREGATE, AND WHY IS A STRING RETURNED FROM THE               
DR151 SUBROUTINE EXEC.                                                          
:LI.'DRBACKUP: CANDIDATE DATASETS FOR BACKUP:' SMC1                             
:P.THIS MESSAGE DISPLAYS A COUNT OF THE DATASETS INCLUDED AS A RESULT           
OF THE INPUT DATASET USED FOR A ABACKUP ...VERIFY.   SMC1 IS                    
THE TOTAL DATASETS PRIOR TO LOOKING FOR ARCIVE'D DATASETS                       
:LI."DRBACKUP: ARCIVE'D DATASETS EXCLUDED:" SMC2                                
:P.THIS MESSAGE DISPLAYS A COUNT OF THE DATASETS EXCLUDED BECAUSE THEY          
WERE ARCHIVED (SMC2).                                                           
:LI."DRBACKUP: DATASETS INCLUDED:" SMC3                                         
:P.THIS MESSAGE DISPLAYS A COUNT OF THE DATASETS INCLUDED AFTER THE             
ARCHIVED DATASETS ARE REMOVED (SMC3).  SMC1 = SMC2 + SMC3                       
:LI.DRBACKUP: ALL DATASETS IN AGGREGATE HAVE BEEN ELIMINATED                    
:P.THIS MESSAGE STOPS DRBACKUP BECAUSE THE AGGREGATE HAS NO DATASETS            
TO BE INCLUDED FOR BACKUP (ABARS MUST HAVE AT LEAST ONE INCLUDE STMT).          
USE DRSCAN WITH THIS AGGREGATE TO INSURE THAT THERE WILL BE DATASETS            
TO BE BACKED UP.                                                                
:EOL.                                                                           
:H3.ABARPOST                                                                    
:OL.                                                                            
:LI.ABARPOST: NO ABACKUP LOGS AVAILABLE FOR AGGREGATE IAGNAME                   
:P.IAGNAME IS THE AGGREGATE NAME SUPPLIED AS A PARAMETER TO THE COMMAND.        
THE ABACKUP ACTIVITY LOG NAME IS NULL.  POSSIBLE THAT THIS COMMAND WAS          
ISSUED PRIOR TO DRBACKUP EXECUTION.                                             
:EOL.                                                                           
:H3.ARECPROC                                                                    
:OL.                                                                            
:LI.ARECPROC: NO ARECOVER PARMS DATASET FOR AGGREGATE IAGNAME                   
:P.IAGNAME IS THE AGGREGATE NAME SUPPLIED AS A PARAMETER TO THE COMMAND.        
ARPARMS IS THE ARECOVER PARMS DATASET SPECIFIED IN DR10.  MDSN IS TEXT          
DESCRIBING THE PROBLEM AFTER CHECKING THE CATALOG AND VOLUME FOR THE            
DATASET.                                                                        
:LI.ARECPROC: CHECK SYSLOG; CONTENTION FOR PARMS DSN ARDSN                      
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE PARMS DATASET (ARDSN)               
WITH SHARED CONTROL MANY TIMES.  POSSIBLE THAT SOMEONE OR SOMETHING             
ELSE HAS IT ALLOCATED.  CHECK THE SYSLOG FOR MESSAGES CONCERNING                
DATASET CONTENTION.                                                             
:LI.ARECPROC: NO ARECOVER LOGS AVAILABLE FOR AGGREGATE IAGNAME                  
:P.IAGNAME IS THE AGGREGATE NAME SUPPLIED AS A PARAMETER TO THE COMMAND.        
THE ARECOVER ACTIVITY LOG NAME IS NULL.  POSSIBLE THAT THE ARC60360I            
MESSAGE WASN'T TRAPPED AT THE RECOVERY SITE.  INSURE THAT THE CONSOLE           
AUTOMATION SCRIPT IS ACTIVE/WORKING.                                            
:LI.ARECPROC: MOD TO LOG OF LOGS DATASET UNSUCCESSFUL LOGLOG                    
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE LOG-OF-LOGS DATASET (LOGLOG)        
WITH DISP=MOD MANY TIMES.  POSSIBLE THAT SOMEONE OR SOMETHING                   
ELSE HAS IT ALLOCATED.  CHECK THE SYSLOG FOR MESSAGES CONCERNING                
DATASET CONTENTION.                                                             
:EOL                                                                            
:H3.DRAUDIT                                                                     
:OL                                                                             
:LI.DRAUDIT: ALLOCATION OF LOGS DATASET UNSUCCESSFUL' LOGLOG                    
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE LOG-OF-LOGS DATASET (LOGLOG)        
WITH DISP=SHR MANY TIMES.  POSSIBLE THAT SOMEONE OR SOMETHING                   
ELSE HAS IT ALLOCATED.  CHECK THE SYSLOG FOR MESSAGES CONCERNING                
DATASET CONTENTION.                                                             
:LI.DRAUDIT: NO ARECOVER PARMS DATASET FOR AGGREGATE IAGNAME                    
:P.IAGNAME IS THE INPUT AGGREGATE NAME.                                         
CHECK THE ARECOVER PARMS DATASET IN DR10 TO INSURE IT'S NOT NULL.               
:EOL.                                                                           
:H3.DRSCAN:                                                                     
:OL.                                                                            
:LI.DRSCAN: INPUT DATASET INPUT ...MSDSN                                        
:P.CHECKED THE CATALOG AND VOLUME FOR THE EXISTENCE OF THE INPUT                
DATASET AND IT FAILED.  INSURE THE INPUT DATASET IS SPELLED CORRECTLY           
AND EXISTS ON THE SYSTEM THE COMMAND EXECUTES.                                  
:LI.DRSCAN: AGGREGATE VERIFY FAILED, CHECK REPORT IN LOGDSN                     
:P.ISSUED ABACKUP ...VERIFY COMMAND AND RECEIVED A NON-ZERO RETURN              
CODE.  NOT MUCH SENSE IN CONTINUING WITH EXECUTION, WE KNOW THE ACTIVITY        
LOG HAS NO DATASETS IN IT. .                                                    
:LI.DRSCAN: ERROR ALLOCATING LOG DSN ACTLOG .  RC=RC                            
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE LOG DATASET (ACTLOG).               
POSSIBLE THAT SOMEONE OR SOMETHING HAS IT ALLOCATED OR THAT THE CONSOLE         
AUTOMATION SCRIPT HAS PROBLEMS. CHECK THE SYSLOG FOR MESSAGES                   
CONCERNING THIS DATASET                                                         
:LI.DRSCAN: LOG NOT FROM ABACKUP VERIFY' LOGDSN                                 
    DRSCAN: CHECK AUTOMATED OPERATIONS, WRONG LOG ACTLOG                        
:P.THE EXEC IS READING THE ABACKUP ...VERIFY ACTIVITY LOG AND FOUND             
MESSAGES THAT COULD ONLY BE PRODUCED BY A EXECUTE ACTIVITY LOG.                 
WE SHOULD HAVE THE VERIFY LOG AVAILABLE TO US, (THE COMMAND WAS ISSUED          
BY DRSCAN PRIOR TO EXECUTING THIS EXEC), IF NOT THEN THE CONSOLE                
AUTOMATION SCRIPTS MAY HAVE BEEN PULLED FROM THE SYSTEM.                        
:EOL                                                                            
:H3.DRSEO:                                                                      
:OL                                                                             
:LI.DRSEO: INPUT DATASET INPUT ...MSDSN                                         
:P.CHECKED THE CATALOG AND VOLUME FOR THE EXISTENCE OF THE INPUT                
DATASET AND IT FAILED.  INSURE THE INPUT DATASET IS SPELLED CORRECTLY           
AND EXISTS ON THE SYSTEM THE COMMAND EXECUTES.                                  
:LI.DRSEO: AGGREGATE VERIFY FAILED, CHECK REPORT IN LOGDSN                      
:P.ISSUED ABACKUP ...VERIFY COMMAND AND RECEIVED A NON-ZERO RETURN              
CODE.  NOT MUCH SENSE IN CONTINUING WITH EXECUTION, WE KNOW THE ACTIVITY        
LOG HAS NO DATASETS IN IT.  MESSAGE IS GENERATED BY DRSEO EXEC.                 
:LI.DRSEO: ERROR ALLOCATING LOG DSN ACTLOG .  RC=RC                             
:P.THE EXEC HAS ATTEMPTED ALLOCATION OF THE LOG DATASET (ACTLOG).               
POSSIBLE THAT SOMEONE OR SOMETHING HAS IT ALLOCATED OR THAT THE CONSOLE         
AUTOMATION SCRIPT HAS PROBLEMS. CHECK THE SYSLOG FOR MESSAGES                   
CONCERNING THIS DATASET                                                         
:LI.DRSEO: LOG NOT FROM ABACKUP VERIFY LOGDSN                                   
    DRSEO: CHECK AUTOMATED OPERATIONS, WRONG LOG ACTLOG                         
:P.THE EXEC IS READING THE ABACKUP ...VERIFY ACTIVITY LOG AND FOUND             
MESSAGES THAT COULD ONLY BE PRODUCED BY A EXECUTE ACTIVITY LOG.                 
WE SHOULD HAVE THE VERIFY LOG AVAILABLE TO US, (THE COMMAND WAS ISSUED          
BY DRSEO PRIOR TO EXECUTING THIS EXEC), IF NOT THEN THE CONSOLE                 
AUTOMATION SCRIPTS MAY HAVE BEEN PULLED FROM THE SYSTEM.                        
:EOL                                                                            
:BACKM.                                                                         
:EGDOC.                                                                         
 $$                                                                             
$$                                                                              
